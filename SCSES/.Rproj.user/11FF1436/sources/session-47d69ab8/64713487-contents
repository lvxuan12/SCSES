.libPaths(c(.libPaths(),"/home/Liulab/lvxuan/R/x86_64-pc-linux-gnu-library/4.0"))
suppressMessages({
  library(parallel)
  library(rtracklayer)
  library(Rtsne)
  library(umap)
  library(reticulate)
  library(jsonlite)
  library(R.matlab)
  library(raveio)
  library(reshape2)
  library(rhdf5)
  library(hdf5r)
  library(pracma)
  library(matrixStats)
  library(glmnet)
  library(caret)
  library(ggplot2)
  library(cowplot)
  library(pROC)
  library(Seurat)
})
source('/disk/lvxuan/Single-Splicing/src/impute/func_evaluation.r')
source('/disk/lvxuan/Single-Splicing/src/impute/func_data_preprocess.r')
source('/disk/lvxuan/Single-Splicing/src/impute/impute.util.r')
source('/disk/lvxuan/Single-Splicing/src/events/event_to_split_read_matrix.r')
source('/disk/lvxuan/Single-Splicing/src/events/reads_to_psi.r')
work_path="/disk/lvxuan/Single-Splicing/result/"
evaluation_path="/disk/lvxuan/Single-Splicing/evaluation/"
paras_path="/disk/lvxuan/Single-Splicing/configure/"
base_size=8
base_line=0.23
basic_theme=theme(panel.background = element_blank(),
                  panel.border = element_rect(fill=NA,color="black", linewidth=base_line, linetype="solid"),
                  # axis.line = element_line(colour = 'black',linewidth = base_line),
                  axis.line=element_blank(),
                  axis.line.x=element_blank(),
                  axis.ticks = element_line(colour = 'black',linewidth = base_line),
                  #axis.ticks = element_blank(),
                  axis.text = element_text(family = 'sans',colour = 'black',size = base_size),
                  axis.text.x = element_text(angle=0,hjust=0.5,vjust=0.5),
                  axis.title = element_text(family = 'sans',colour = 'black',size = base_size),
                  strip.background = element_blank(),
                  strip.text = element_text(family = 'sans',colour = 'black',size = base_size),
                  plot.title = element_text(family = 'sans',colour = 'black',hjust = 0.5,size = base_size+1),
                  plot.subtitle = element_text(hjust = 0.5,size = base_size,family = 'sans'),
                  plot.margin = unit(x = c(5,5,5,5),units = 'pt'),
                  legend.position = 'bottom',legend.key.size = unit(3,'mm'),
                  legend.text = element_text(family = 'sans',colour = 'black',size = base_size),
                  legend.title = element_text(family = 'sans',colour = 'black',size = base_size),
                  legend.key = element_rect(fill = NA,colour = "white"),
                  plot.tag = element_text(size = 14,family = 'sans'))
mycol=list(method=c(BRIE1="#9DC7DD",BRIE2="#367DB0","BRIE2 aggr"="#367DB0"
                    ,Expedition="#DECBE4",Psix="#f6c554",Psix0="#E6F5C9",
                    SCASL="#EFC5AE",
                    rMats="#BAB2AE",
                    "SCSES Raw"="#FFB6B0",
                    "SCSES PSI"="#AADCA9",
                    "SCSES RC"="#3D9F3C",
                    "SCSES RBP"="#9ED17B",
                    "SCSES"="#FB8072"),
           compare2=c("0"="#B5C8E2","1"="#FB9A99"),
           event_type=c(A3SS="#90CD97",A5SS="#f7dd85",MXE="#67bcdd",
                        RI="#f4aaa4",SE="#d4e8c0"),
           compare_raw_impute=c("Raw"="#D3D3D3","SCSES"="#FB9A99"),
           cell_line=c(HCT116="#CBD5E8",HepG2="#F1E2CC","HL-60"="#CCCCCC",
                       HCC1954="#E5D8BD"),
           pheatmap=colorRampPalette(c("#2872d1", "white", "#ff0d0d"))(100),
           ipsc=c(iPSC="#fbb45d",MN="#699ed4",NPC="#ef8183"),
           # ipsc_subcluster=c(c1="#1170AA",c2="#6BAED6",c3="#B7E4F9"),
           ipsc_subcluster=c(c1="#1170AA",c2="#B7E4F9"),
           downsample_dataset=c("Reference"="black",
                                "GSE171820 Raw"="#39737C",
                                "GSE171820 Test"="#86B4A9",
                                "GSE36552 Raw"="#32A251",
                                "GSE36552 Test"="#ACD98D",
                                "GSE85908 Raw"="#FF7F0F",
                                "GSE85908 Test"="#FFB977"),
           GSE85908=c(iPSC="#fbb45d",MN="#699ed4",NPC="#ef8183"),
           GSE36552=c(`Oocyte`="#A60021",
                                `Zygote`="#F76E5E",
                                `2-cell`="#FFAD73",
                                `4-cell`="#ffcc66",
                                `8-cell`="#73DAFF",
                                `Late_blastocyst`="#2A0BD9",
                                `Morulae`="#40A1FF"),
           GSE171820=c(`Early_Trophectoderm`="#FFD8D0",
                                 `Inner_Cell_Mass`="#DBEAD9",
                                 `Inner_Cell_Mass-Trophectoderm_Transition`="#A1C8E3",
                                 `Epiblast`="#579C5A",
                                 `Primitive_Endoderm`="#09622A",
                                 `Trophectoderm`="#BD2629")
           )
toolname=data.frame(old=c("rmats","brie_mode1","brie_mode2","brie_mode2_aggr",
                          "psix15","psix25","psix35","psix45",        
                          "psix5","outrigger","scses_test","scses_PSI",      
                          "scses_RC","scses_EXP_RBP","SCSES","scasl"),
                    new=c("rMats","BRIE1","BRIE2","BRIE2 aggr","Psix0","Psix0",
                          "Psix0","Psix0","Psix","Expedition","SCSES Raw","SCSES PSI",
                          "SCSES RC","SCSES RBP","SCSES","SCASL"))
row.names(toolname)=toolname$old
library(patchwork)
library(ggnewscale)
library(geomtextpath)
library(scales)
library(paletteer)
library(cluster)
library(ggpubr)
library(pheatmap)
library(ggplotify)
library(destiny)

##########################***Down-sampling data***#############################
# "GSE171820","GSE36552","GSE85908"
datasets=c("GSE171820","GSE36552","GSE85908")
tools=c("rmats","outrigger","brie_mode1","brie_mode2","brie_mode2_aggr",
        "scses_test","scasl","scses_RC","scses_EXP_RBP",
        "scses_PSI","psix5","psix15","psix25","psix35","psix45")
options("scipen"=100)
for (dataset in c("GSE36552","GSE171820")){
  if(dataset=="GSE171820"){
    rate=0.15
    paras_file=paste0(paras_path,'/',dataset,"_new.json")
  }else if(dataset=="GSE36552"){
    rate=0.03
    paras_file=paste0(paras_path,'/Zygote_new.json')
  }else{
    rate=0.1
    paras_file=paste0(paras_path,'/iPSC_new.json')
  }
  paras <- fromJSON(paras_file)
  work_path_data=paras$Basic$work_path
  bam_suffix=paras$Basic$bam_suffix
  bam_path=paras$Basic$bam_path
  sequence=paras$Basic$sequence
  java_path=paras$Basic$jar_path
  # 1.psi id转换----
  # # #* 1.1 reference psi matrix----
  # psi_ref_list=list()
  # 1.1.1 scses
  # splicing_value_ref_path=paste0(work_path_data,'/splicing_value/')
  # psi_scses_raw= read_psi(splicing_value_ref_path)
  # colnames(psi_scses_raw)<-gsub(bam_suffix,"",colnames(psi_scses_raw))
  # psi_ref_list[["scses"]]=psi_scses_raw
  # # 1.1.2 rmats
  # e_rmats_path=paste0(work_path_data,'/rMats/output/')
  # id_rmats<-id_tr2_rmats(e_path = e_rmats_path,remove.chr = F,base = 5)
  # # dir.create(paste0(work_path_data,'/rMats/splicing_value/'))
  # # junction_split(event_path=paste0(work_path_data,'/rMats/events/'),
  # #                rc_path=paste0(work_path_data,'/rMats/splicing_value/'),
  # #                datapath=bam_path,
  # #                java_path=java_path,
  # #                core=20,
  # #                sequence=sequence)
  # # reads_to_psi(event_path=paste0(work_path_data,'/rMats/events/'),
  # #              rc_path=paste0(work_path_data,'/rMats/splicing_value/'))
  # psi_rmats <- read_psi(paste0(work_path_data,'/rMats/splicing_value/'))
  # colnames(psi_rmats)<-gsub(bam_suffix,"",colnames(psi_rmats))
  # psi_rmats[is.na(psi_rmats)]=0
  # psi_ref_list[["rmats"]]=psi_rmats
  # # 1.1.3 brie
  # brie_anno_path <- paras$Task$BRIE2$brie_ref
  # brie_id_path <- paste0(dirname(brie_anno_path), "/SE_events_scses_id.txt")
  # e_brie_path <- paste0(work_path_data, "/BRIE2/psi_BRIE2_mode1.txt")
  # # id_brie_mode1 <- id_tr2_brie2(e_brie_path, brie_id_path)
  # outdir <- paste0(work_path_data, "/BRIE2/events/")
  # # dir.create(outdir)
  # # writeLines(id_brie_mode1, paste0(outdir, "/SE.txt"))
  # # dir.create(paste0(work_path_data,'/BRIE2/splicing_value/'))
  # # junction_split(event_path=outdir,
  # #                rc_path=paste0(work_path_data,'/BRIE2/splicing_value/'),
  # #                datapath=bam_path,
  # #                java_path=java_path,
  # #                core=10,
  # #                sequence=sequence)
  # # reads_to_psi(event_path=outdir,
  # #              rc_path=paste0(work_path_data,'/BRIE2/splicing_value/'))
  # psi_brie_mode1 <- read_psi(paste0(work_path_data,'/BRIE2/splicing_value/'))
  # colnames(psi_brie_mode1)<-gsub(bam_suffix,"",colnames(psi_brie_mode1))
  # psi_ref_list[["brie"]]=psi_brie_mode1
  # 
  # # 1.1.4 psix
  # psix_anno_path <- paras$Task$psix$anno_path
  # psix_id_path <- paste0(dirname(psix_anno_path), "/SE_events_scses_id.txt")
  # e_psix_path <- paste0(work_path_data, "/psix/psix_object/")
  # # id_psix <- id_tr2_psix(paste0(e_psix_path,"/psi.tab.gz"), psix_id_path)
  # outdir1 <- paste0(work_path_data, "/psix/events/")
  # # dir.create(outdir1)
  # outdir2 <- paste0(work_path_data, "/psix/splicing_value/")
  # # dir.create(outdir2)
  # # writeLines(id_psix, paste0(outdir1, "/SE.txt"))
  # # junction_split(event_path=outdir1,
  # #                rc_path=outdir2,
  # #                datapath=bam_path,
  # #                java_path=java_path,
  # #                core=10,
  # #                sequence=sequence)
  # # reads_to_psi(event_path=outdir1,
  # #              rc_path=outdir2)
  # psi_psix <- read_psi(outdir2)
  # colnames(psi_psix)<-gsub(bam_suffix,"",colnames(psi_psix))
  # psi_psix[is.na(psi_psix)]=0
  # psi_ref_list[["psix"]]=psi_psix
  # 1.1.5 outrigger
  # load(paste0(work_path_data, "/psi_ref_list.rdata"))
  # e_outrigger_path <- paste0(work_path_data, "/outrigger/psi/outrigger_psi.csv")
  # # psi_outrigger <- read.csv(e_outrigger_path,header = T,row.names = 1)
  # # psi_outrigger <- id_tr_outrigger(e_outrigger_path,gtf = paras$Task$rMats$gtf_path,
  # #                                  core=20)
  # outdir <- paste0(work_path_data, "/outrigger/events/")
  # dir.create(outdir)
  # writeLines(row.names(psi_outrigger)[grep("SE$",row.names(psi_outrigger))], paste0(outdir, "/SE.txt"))
  # writeLines(row.names(psi_outrigger)[grep("MXE$",row.names(psi_outrigger))], paste0(outdir, "/MXE.txt"))
  # dir.create(paste0(work_path_data,'/outrigger/splicing_value/'))
  # junction_split(event_path=outdir,
  #                rc_path=paste0(work_path_data,'/outrigger/splicing_value/'),
  #                datapath=bam_path,
  #                java_path=java_path,
  #                core=20,
  #                sequence=sequence)
  # reads_to_psi(event_path=outdir,
  #              rc_path=paste0(work_path_data,'/outrigger/splicing_value/'))
  # psi_outrigger <- read_psi(paste0(work_path_data,'/outrigger/splicing_value/'))
  # colnames(psi_outrigger)<-gsub(bam_suffix,"",colnames(psi_outrigger))
  # psi_outrigger[is.na(psi_outrigger)]=0
  # psi_ref_list[["outrigger"]]=psi_outrigger
  # # 1.1.5 scasl
  # e_scasl_path=list.files(path = paste0(work_path_data,"/scasl/result"),
  #                             pattern = "normalized_matrix.csv",recursive = T,
  #                         full.names = T)
  # psi_scasl=read.csv(e_scasl_path,header = T,row.names = NULL)
  # row.names(psi_scasl)=make.names(psi_scasl[,1],TRUE)
  # psi_scasl=psi_scasl[,-1]
  # save(psi_ref_list, file = paste0(work_path_data, "/psi_ref_list.rdata"))
  # 
  #* 1.2 test psi matrix----
  for (i in 1:6) {
    psi_test_list=list()
    paras_file_new=paste0(paras_path, "/", dataset, "_", rate, "_rep", i, ".json")
    paras_new <- fromJSON(paras_file_new)
    work_path_new=paras_new$Basic$work_path
    bam_suffix_new=paras_new$Basic$bam_suffix
    # 1.2.1 scses
    # load(paste0(work_path_new, "/psi_test_list.rdata"))
    # print(paste("[",Sys.time(),'] ',"scses"))
    # psi_scses_test=read_psi(paste0(work_path_new,'/splicing_value/'))
    # colnames(psi_scses_test)<-gsub(bam_suffix_new,"",colnames(psi_scses_test))
    # psi_test_list[["scses_test"]]=psi_scses_test
    # scses_impute_file=list.files(paste0(work_path_new,'/imputation/'),pattern = "*_combined_Dreduct*")
    # scses_impute_file=scses_impute_file[grep("kcell_max20_kcell_min5",scses_impute_file)]
    # load(paste0(work_path_new,'/imputation/',scses_impute_file))
    # psi_test_list[["scses_PSI"]]=NULL
    # psi_test_list[["scses_RC"]]=NULL
    # psi_test_list[["scses_EXP_RBP"]]=NULL
    # for (x in names(psi_imputed_final)){
    #   data=as.data.frame(psi_imputed_final[[x]])
    #   colnames(data)<-gsub(bam_suffix_new,"",colnames(data))
    #   psi_test_list=c(psi_test_list,list(data))
    #   names(psi_test_list)[length(psi_test_list)]=paste0("scses_",x)
    # }
    # # 1.2.2 rmats
    # print(paste("[",Sys.time(),'] ',"rmats"))
    # e_rmats_path=paste0(work_path_new,'/rMats/output/')
    # psi_rmats_new<-id_tr3_rmats(e_path = e_rmats_path,remove.chr = F)
    # colnames(psi_rmats_new)<-gsub(bam_suffix_new,"",colnames(psi_rmats_new))
    # psi_rmats_new[is.na(psi_rmats_new)]=0
    # psi_test_list[["rmats"]]=psi_rmats_new
    # # 1.2.3 brie
    # print(paste("[",Sys.time(),'] ',"brie"))
    # brie_anno_path <- paras_new$Task$BRIE2$brie_ref
    # brie_id_path <- paste0(dirname(brie_anno_path), "/SE_events_scses_id.txt")
    # e_brie_path <- paste0(work_path_new, "/BRIE2/psi_BRIE2_mode1.txt")
    # psi_brie_mode1_new <- id_tr_brie2(e_brie_path, brie_id_path)
    # psi_test_list[["brie_mode1"]]=psi_brie_mode1_new
    # e_brie_path <- paste0(work_path_new, "/BRIE2/psi_BRIE2_mode2_diff.txt")
    # psi_brie_mode2_new <- id_tr_brie2(e_brie_path, brie_id_path)
    # psi_test_list[["brie_mode2"]]=psi_brie_mode2_new
    # e_brie_path <- paste0(work_path_new, "/BRIE2/psi_BRIE2_mode2_aggr.txt")
    # psi_brie_mode2_aggr <- id_tr_brie2(e_brie_path, brie_id_path)
    # psi_test_list[["brie_mode2_aggr"]]=psi_brie_mode2_aggr
    #
    # # 1.2.4 psix
    # print(paste("[",Sys.time(),'] ',"psix"))
    # psix_anno_path <- paras_new$Task$psix$anno_path
    # psix_id_path <- paste0(dirname(psix_anno_path), "/SE_events_scses_id.txt")
    # e_psix_path <- paste0(work_path_new, "/psix/psix_object/")
    # psi_psix_list_new <- id_tr_psix(e_psix_path, psix_id_path)
    # for (x in names(psi_psix_list_new)) {
    #   psi_psix_list_new[[x]][is.na(psi_psix_list_new[[x]])]=0
    #   psi_test_list=c(psi_test_list,list(psi_psix_list_new[[x]]))
    #   names(psi_test_list)[length(psi_test_list)]=paste0("psix",x)
    # }

    # 1.2.5 outrigger
    load(paste0(work_path_new, "/psi_test_list.rdata"))
    print(paste("[",Sys.time(),'] ',"outrigger"))
    e_outrigger_path <- paste0(work_path_new, "/outrigger/psi/outrigger_psi.csv")
    psi_outrigger_new <- read.csv(e_outrigger_path,header = T,row.names = 1)
    psi_outrigger_new <- id_tr_outrigger(e_outrigger_path,gtf = paras_new$Task$outrigger$gtf_path)
    colnames(psi_outrigger_new)<-gsub(bam_suffix_new,"",colnames(psi_outrigger_new))
    psi_outrigger_new[is.na(psi_outrigger_new)]=0
    psi_test_list[["outrigger"]]=psi_outrigger_new

    # 1.2.6 scasl
    # e_scasl_path=list.files(path = paste0(work_path_new,"/scasl/result"),
    #                         pattern = "normalized_matrix.csv",recursive = T,
    #                         full.names = T)
    # psi_scasl=read.csv(e_scasl_path,header = T,row.names = NULL)
    # row.names(psi_scasl)=make.names(psi_scasl[,1],TRUE)
    # psi_scasl=psi_scasl[,-1]
    # psi_test_list[["scasl"]]=psi_scasl
    save(psi_test_list, file = paste0(work_path_new, "/psi_test_list.rdata"))
  }
}

# 1.3. downsampling rate----
p=list.files(path = '/disk/lvxuan/Single-Splicing/evaluation/downsample/FACS',pattern = "*counts.csv",full.names = T)
cell_count_sum=lapply(p, function(x){
  print(paste0("[",Sys.time(),'] ',x))
  name=unlist(strsplit(x,'/'))[length(unlist(strsplit(x,'/')))]
  name=gsub("-counts.csv","",name)
  f=read.csv(x,header = T,row.names = 1)
  s=colSums(f)
  dropout_rate=colSums(f==0)/nrow(f)
  return(data.frame(count_sum=s,
                    dropout=dropout_rate,
                    group=name))
})
cell_count_sum=do.call(what = rbind,args = cell_count_sum)
cell_count_sum$group=as.factor(cell_count_sum$group)
gene_count_sum=lapply(p, function(x){
  print(paste0("[",Sys.time(),'] ',x))
  name=unlist(strsplit(x,'/'))[length(unlist(strsplit(x,'/')))]
  name=gsub("-counts.csv","",name)
  f=read.csv(x,header = T,row.names = 1)
  s=rowSums(f)
  dropout_rate=rowSums(f==0)/ncol(f)
  return(data.frame(count_sum=s,
                    dropout=dropout_rate,
                    group=name))
})
gene_count_sum=do.call(what = rbind,args = gene_count_sum)

save(cell_count_sum,file = '/disk/lvxuan/Single-Splicing/evaluation/downsample/FACS/cell_count_sum.rdata')
save(gene_count_sum,file = '/disk/lvxuan/Single-Splicing/evaluation/downsample/FACS/gene_count_sum.rdata')

load('/disk/lvxuan/Single-Splicing/evaluation/downsample/FACS/cell_count_sum.rdata')
load('/disk/lvxuan/Single-Splicing/evaluation/downsample/FACS/gene_count_sum.rdata')
p1=ggplot(data = gene_count_sum,mapping = aes(x = log1p(count_sum)))+
  geom_density()
p2=ggplot(data = cell_count_sum,mapping = aes(x = log1p(count_sum)))+
  geom_density()
p1|p2

qc_dataset=lapply(list("GSE171820","GSE36552","GSE85908"),function(dataset){
  if(dataset=="GSE171820"){
    rate=0.15
    paras_file=paste0(paras_path,'/',dataset,"_new.json")
  }else if(dataset=="GSE36552"){
    rate=0.03
    paras_file=paste0(paras_path,'/Zygote_new.json')
  }else{
    rate=0.1
    paras_file=paste0(paras_path,'/iPSC_new.json')
  }
  paras <- fromJSON(paras_file)
  work_path_data=paras$Basic$work_path
  bam_suffix=paras$Basic$bam_suffix
  bam_path=paras$Basic$bam_path
  sequence=paras$Basic$sequence
  java_path=paras$Basic$jar_path
  expr_path=paste0(work_path_data, "/expr/",dataset,"_count.txt")
  expr <- read.table(expr_path, comment.char = "#", sep = "\t", header = T, check.names = F)
  row.names(expr) <- expr$Geneid
  expr <- expr[, -c(1:6), drop = F]
  colnames(expr) <- sapply(colnames(expr), function(x) {
    unlist(strsplit(x, "/"))[length(unlist(strsplit(x, "/")))]
  })
  s=colSums(expr)
  dropout_rate=colSums(expr==0)/nrow(expr)
  df_cell_ref=data.frame(count_sum=s,dropout=dropout_rate,
                         group=paste(dataset,"ref",sep = "_"))
  s=rowSums(expr)
  dropout_rate=rowSums(expr==0)/ncol(expr)
  df_gene_ref=data.frame(count_sum=s,dropout=dropout_rate,
                         group=paste(dataset,"ref",sep = "_"))
  df_cell_all=data.frame()
  df_gene_all=data.frame()
  for (i in 1:6) {
    expr_path=paste0(work_path_data,"/rep",i,"/expr/",dataset,"_count.txt")
    expr <- read.table(expr_path, comment.char = "#", sep = "\t", header = T, check.names = F)
    row.names(expr) <- expr$Geneid
    expr <- expr[, -c(1:6), drop = F]
    colnames(expr) <- sapply(colnames(expr), function(x) {
      unlist(strsplit(x, "/"))[length(unlist(strsplit(x, "/")))]
    })
    s=colSums(expr)
    dropout_rate=colSums(expr==0)/nrow(expr)
    df_cell_data=data.frame(count_sum=s,dropout=dropout_rate,
                            group=paste0(dataset,"_rep",i))
    df_cell_all=rbind(df_cell_all,df_cell_data)
    s=rowSums(expr)
    dropout_rate=rowSums(expr==0)/ncol(expr)
    df_gene_data=data.frame(count_sum=s,dropout=dropout_rate,
                            group=paste0(dataset,"_rep",i))
    df_gene_all=rbind(df_gene_all,df_gene_data)
  }
  df_cell_all=rbind(df_cell_ref,df_cell_all)
  df_gene_all=rbind(df_gene_ref,df_gene_all)
  return(list(cell=df_cell_all,gene=df_gene_all))
})
names(qc_dataset)=c("GSE171820","GSE36552","GSE85908")

qc_dataset_cell=lapply(names(qc_dataset), function(d){
  return(qc_dataset[[d]][[1]])
})
qc_dataset_cell=do.call(what = rbind,args = qc_dataset_cell)
qc_dataset_gene=lapply(names(qc_dataset), function(d){
  return(qc_dataset[[d]][[2]])
})
qc_dataset_gene=do.call(what = rbind,args = qc_dataset_gene)
p1=ggplot(data = qc_dataset_cell,mapping = aes(x = log1p(count_sum),color=group))+
  geom_density()
p2=ggplot(data = qc_dataset_gene,mapping = aes(x = log1p(count_sum) ,color=group))+
  geom_density()
p1|p2

qc_cell=cell_count_sum
qc_cell$group="Reference"
qc_cell=rbind(qc_cell,qc_dataset_cell[grep("ref$|rep1$",qc_dataset_cell$group),])
qc_cell$group=gsub("_"," ",qc_cell$group)
qc_cell$group=gsub(" ref"," Raw",qc_cell$group)
qc_cell$group=gsub(" rep1"," Test",qc_cell$group)
p_qc_cell_count=ggplot(data = qc_cell,mapping = aes(x = log10(count_sum),
                                                    color=group))+
  geom_density(linewidth=base_line)+
  ggtitle("Read count per cell")+
  xlab("log10 Library size")+
  ylab("Density")+
  scale_color_manual(values = mycol$downsample_dataset)+
  basic_theme+
  theme(legend.position = "none")
p_qc_cell_dropout=ggplot(data = qc_cell)+
  geom_boxplot(mapping = aes(x = group,y=dropout,color=group),
               linewidth=base_line,
               outliers = F,width=0.5)+
  scale_color_manual(values = mycol$downsample_dataset)+
  ggtitle("Dropout per cell")+
  xlab("")+
  ylab("Dropout percent")+
  basic_theme+
  theme(axis.title.x = element_blank(),axis.text.x = element_blank(),
        axis.ticks.x = element_blank(),legend.position = "right")
p=p_qc_cell_count|p_qc_cell_dropout
plotdir="/share/lvxuan/Single-Splicing/downsample/"
ggsave(paste0(plotdir,"/downsample_qc.pdf"),
       p, width = 8.27,height = 2,units = 'in', dpi = 300)


qc_gene=gene_count_sum
qc_gene$group="Reference"
qc_gene=rbind(qc_gene,qc_dataset_gene[grep("ref$|rep1$",qc_dataset_gene$group),])
qc_gene$group=gsub("_"," ",qc_gene$group)
qc_gene$group=gsub(" ref"," Raw",qc_gene$group)
qc_gene$group=gsub(" rep1"," Test",qc_gene$group)
p_qc_gene_count=ggplot(data = qc_gene,mapping = aes(x = log1p(count_sum),
                                                    color=group))+
  geom_density()+
  ggtitle("Gene level")+
  xlab("Read count")+
  scale_color_manual(values = mycol$downsample_dataset)+
  basic_theme
p_qc_gene_dropout=ggplot(data = qc_gene)+
  geom_boxplot(mapping = aes(x = group,y=dropout,color=group),
               linewidth=base_line,
               outliers = F,width=0.5)+
  scale_color_manual(values = mycol$downsample_dataset)+
  ggtitle("Gene level")+
  basic_theme+
  theme(axis.title.x = element_blank(),axis.text.x = element_blank(),
        axis.ticks.x = element_blank(),legend.position = "none")
(p_qc_cell_count|p_qc_cell_dropout)/(p_qc_gene_count|p_qc_gene_dropout)

# 2. 细胞分群准确性----
library(flexclust)
library(NMI)
library(ggpubr)
library(umap)
library(igraph)
calcu_pca <- function(data) {
  data = data[which(apply(data, 1, mean) != 0), ]
  data = data[which(apply(data, 1, var) != 0), ]
  v=apply(data,1,var)
  # data = data[order(v,decreasing = T)[1:min(1000,nrow(data))],]
  data = data[order(v,decreasing = T)[1:ceiling(nrow(data)*0.3)],]
  D_Reduct_res <- prcomp(t(data), center = TRUE, scale. = TRUE)
  sdev <- D_Reduct_res$sdev
  var_prop <- sdev^2 / sum(sdev^2)
  cumulative_variance <- cumsum(var_prop)
  n_components <- which(cumulative_variance >= 0.9)[1]
  D_Reduct <- D_Reduct_res$x[, 1:n_components]
  return(D_Reduct)
}
calcu_umap<-function(data,n_neighbors){
  set.seed(12345)
  data = data[which(apply(data, 1, mean) != 0), ]
  data = data[which(apply(data, 1, var) != 0), ]
  v=apply(data,1,var)
  data = data[order(v,decreasing = T)[1:ceiling(nrow(data)*0.3)],]
  D_Reduct_res <- prcomp(t(data), center = T, scale. = T)
  sdev <- D_Reduct_res$sdev
  var_prop <- sdev^2 / sum(sdev^2)
  cumulative_variance <- cumsum(var_prop)
  n_components <- which(cumulative_variance >= 0.9)[1]
  D_Reduct <- D_Reduct_res$x[, 1:n_components]
  umap_res <- umap::umap(D_Reduct,n_neighbors = n_neighbors)
  input <- umap_res$layout
  # input<-umap_res
  df<-as.data.frame(input)
  row.names(df)<-colnames(data)
  return(df)
}
calcu_tsne=function(data,perplexity){
  set.seed(12345)
  data = data[which(apply(data, 1, mean) != 0), ]
  data = data[which(apply(data, 1, var) != 0), ]
  v=rowVars(as.matrix(data))
  data = data[order(v,decreasing = T)[1:min(500,nrow(data))],]
  tsne_res <- Rtsne(t(data),check_duplicates = FALSE,
                    perplexity = perplexity,theta = 0.1,max_iter = 2000)
  input <- tsne_res$Y
  df<-as.data.frame(input)
  row.names(df)<-colnames(data)
  return(df)
}
calcu_umap_seurat=function(data,n_neighbors,resolution,nfeatures){
  set.seed(12345)
  data = data[which(apply(data, 1, mean) != 0), ]
  data = data[which(apply(data, 1, var) != 0), ]
  test.seu <- CreateSeuratObject(counts = data,assay = 'RNA')
  test.seu<-SetAssayData(object=test.seu, layer="data", new.data = test.seu@assays$RNA$counts)
  # #Normalize
  # test.seu <- NormalizeData(test.seu, normalization.method = "LogNormalize", scale.factor = 10000)
  #FindVariableFeatures
  test.seu <- FindVariableFeatures(test.seu, selection.method = "vst", nfeatures = nfeatures)
  #Scale
  test.seu <- ScaleData(test.seu, features = rownames(test.seu))
  #PCA
  test.seu <- RunPCA(test.seu, features = VariableFeatures(test.seu),
                     npcs = 50)
  p=ElbowPlot(test.seu)
  sdev <- test.seu@reductions$pca@stdev
  var_prop <- sdev^2 / sum(sdev^2)
  cumulative_variance <- cumsum(var_prop)
  n_components <- which(cumulative_variance >= 0.9)[1]
  if(n_components==1){
    n_components=n_components+1
  }
  print(n_components)
  #cluster
  test.seu <- FindNeighbors(test.seu, dims = 1:n_components)
  test.seu <- FindClusters(test.seu, resolution = resolution)
  test.seu <- RunUMAP(test.seu, dims = 1:n_components,n.neighbors = n_neighbors)
  # test.seu <- RunTSNE(test.seu, dims = 1:5)
  df=data.frame(test.seu@reductions$umap@cell.embeddings,
                test.seu@reductions$pca@cell.embeddings[,1:2],
                seurat_clusters=test.seu@meta.data$seurat_clusters)
  return(list(df,test.seu))
}
#"GSE36552", "GSE85908","GSE171820"
ari_list=lapply(list("GSE85908","GSE36552","GSE171820"), function(dataset){
  print(paste0("[",Sys.time(),'] ',dataset))
  work_path_data <- paste0(work_path, "/", dataset)
  if(dataset=="GSE171820"){
    paras_file=paste0(paras_path,'/',dataset,"_new.json")
  }else if(dataset=="GSE36552"){
    paras_file=paste0(paras_path,'/Zygote_new.json')
  }else{
    paras_file=paste0(paras_path,'/iPSC_new.json')
  }
  paras <- fromJSON(paras_file)
  annotation_path=paras$Basic$meta_path
  annotation=read.table(annotation_path,sep = "\t",header = F)
  true_label<-annotation[,2]
  names(true_label)<-annotation[,1]
  
  ari_list2=data.frame()
  for (i in 1:6) {
    print(paste0("[",Sys.time(),'] ',i))
    work_path_rep <- paste0(work_path_data, "/rep", i, "/")
    load(paste0(work_path_rep, "/psi_test_list.rdata"))
    cluster=makeCluster(spec = 4)
    clusterExport(cl = cluster,varlist = c("work_path_rep","annotation","calcu_pca",
                                           "true_label","calcu_ARI","calcu_umap_seurat",
                                           "evaluation_path","dataset","i"),envir = environment())
    ari_rep<-parLapply(cl = cluster,names(psi_test_list),function(name){
    # ari_rep<-lapply(names(psi_test_list),function(name){
      .libPaths(c("/disk/lvxuan/R/x86_64-pc-linux-gnu-library/4.2",
                  "/opt/R/4.2.3/lib/R/library",
                  "/disk/lvxuan/R/x86_64-pc-linux-gnu-library/4.0"))
      library(igraph)
      library(Seurat)
      library(flexclust)
      library(NMI)
      library(umap)
      library(matrixStats)
      library(cluster)
      print(name)
      load(paste0(work_path_rep, "/psi_test_list.rdata"))
      data=psi_test_list[[name]]
      data[is.na(data)]=0
      data=data[,names(true_label)]
      
      if(name=="scasl"){
        data_pca=calcu_pca(data)
        data_pca_dist=as.matrix(dist(data_pca))
        cluster_scasl_path=list.files(path = paste0(work_path_rep,"/scasl/result"),
                                      pattern = "cluster_result.csv",recursive = T,
                                      full.names = T)
        cluster_scasl=read.csv(cluster_scasl_path,header=T)
        nmi_scasl=NMI(X = cluster_scasl[,c("Run","type")],
                      Y = cluster_scasl[,c("Run","preds")])$value
        ari_scasl<-randIndex(table(cluster_scasl$type,cluster_scasl$preds),correct = F)
        sil_scasl <- silhouette(cluster_scasl$preds, data_pca_dist)
        sil_scasl <- summary(sil_scasl)
        sil_scasl_median=as.numeric(sil_scasl$si.summary["Median"])
        res=data.frame(ari=ari_scasl,nmi=nmi_scasl,
                             sil=sil_scasl_median,tool=name,
                             cluster="scasl",
                             cluster_num=length(unique(annotation$V2)))
      }else{
        # data_list=calcu_umap_seurat(data,ceiling(ncol(data)*0.2),1,
        #                             # ceiling(nrow(data)*0.1)
        #                             500
        #                             )
        # data_seurat=data_list[[1]]
        # data_seurat$seurat_clusters=as.numeric(as.character(data_seurat$seurat_clusters))
        # save(data_seurat,file = paste0(evaluation_path, "/downsample/",dataset,"_",i,"_",name,"_df.rdata"))
        # test.seu=data_list[[2]]
        # save(test.seu,file = paste0(evaluation_path, "/downsample/",dataset,"_",i,"_",name,"_seurat.rdata"))
        
        # load(paste0(evaluation_path, "/downsample/",dataset,"_",i,"_",name,"_df.rdata"))
        # load(paste0(evaluation_path, "/downsample/",dataset,"_",i,"_",name,"_seurat.rdata"))
        data_pca=calcu_pca(data)
        save(data_pca,file = paste0(evaluation_path, "/downsample/",dataset,"_",i,"_",name,"_pca_df.rdata"))
        # data_umap=calcu_umap(data,n_neighbors = ceiling(ncol(data)*0.2))
        # data_umap$group=annotation$V2[match(row.names(data_umap),annotation$V1)]
        # save(data_umap,file = paste0(evaluation_path, "/downsample/",dataset,"_",i,"_",name,"_umap_df.rdata"))
        
        data_pca_dist=as.matrix(dist(data_pca))
        data_pca_sim=max(data_pca_dist)-data_pca_dist
        graph=graph_from_adjacency_matrix(adjmatrix = data_pca_sim,
                                          mode = "undirected",
                                          weighted = T)
        lov=cluster_louvain(graph = graph,weights = NULL)
        print(length(unique(lov$membership)))
        data_pca_lov=lov$membership
        names(data_pca_lov)=lov$names
        r <- quantile(strength(graph))[2] / (gorder(graph) - 1)
        led=cluster_leiden(graph = graph,weights = NULL,resolution_parameter = r)
        print(length(unique(led$membership)))
        data_pca_led=led$membership
        names(data_pca_led)=led$names
        
        nmi_km=c()
        ari_km=c()
        ssil_km_median=c()
        for (km_rep in 1:10) {
          data_pca_km<-kmeans(data_pca,centers = length(unique(annotation[,2])))$cluster
          nmi_km_rep=NMI(X = data.frame(names(data_pca_km),data_pca_km),
                     Y = data.frame(names(true_label),true_label))$value
          ari_km_rep<-calcu_ARI(data_pca_km,true_label)
          sil_km_rep <- silhouette(data_pca_km, data_pca_dist)
          ssil_km_rep <- summary(sil_km_rep)
          ssil_km_rep_median=as.numeric(ssil_km_rep$si.summary["Median"])
          nmi_km=c(nmi_km,nmi_km_rep)
          ari_km=c(ari_km,ari_km_rep)
          ssil_km_median=c(ssil_km_median,ssil_km_rep_median)
        }
        nmi_km=mean(nmi_km)
        ari_km=mean(ari_km)
        ssil_km_median=mean(ssil_km_median)
        nmi_lov=NMI(X = data.frame(names(data_pca_lov),data_pca_lov),
                    Y = data.frame(names(true_label),true_label))$value
        ari_lov<-calcu_ARI(data_pca_lov,true_label)
        sil_lov <- silhouette(data_pca_lov, data_pca_dist)
        ssil_lov <- summary(sil_lov)
        ssil_lov_median=as.numeric(ssil_lov$si.summary["Median"])
        
        nmi_led=NMI(X = data.frame(names(data_pca_led),data_pca_led),
                    Y = data.frame(names(true_label),true_label))$value
        ari_led<-calcu_ARI(data_pca_led,true_label)
        sil_led <- silhouette(data_pca_led, data_pca_dist)
        ssil_led <- summary(sil_led)
        ssil_led_median=as.numeric(ssil_led$si.summary["Median"])
        
        
        # nmi_seurat=NMI(X = data.frame(row.names(data_seurat),data_seurat$seurat_clusters),
        #                Y = data.frame(names(true_label),true_label))$value
        # data_seurat_v=data_seurat$seurat_clusters
        # names(data_seurat_v)=row.names(data_seurat)
        # ari_seurat<-calcu_ARI(data_seurat_v,true_label)
        # sil_seurat <- silhouette(data_seurat$seurat_clusters, data_pca_dist)
        # ssil_seurat <- summary(sil_seurat)
        # ssil_seurat_median=as.numeric(ssil_seurat$si.summary["Median"])
        
        res=rbind(data.frame(ari=ari_km,nmi=nmi_km,sil=ssil_km_median,tool=name,cluster="kmeans",cluster_num=length(unique(annotation$V2))),
                  data.frame(ari=ari_lov,nmi=nmi_lov,sil=ssil_lov_median,tool=name,cluster="Louvain",cluster_num=length(unique(lov$membership))),
                  data.frame(ari=ari_led,nmi=nmi_led,sil=ssil_led_median,tool=name,cluster="Leiden",cluster_num=length(unique(led$membership)))
                  # data.frame(ari=ari_seurat,nmi=nmi_seurat,sil=ssil_seurat_median,tool=name,cluster="Seurat",cluster_num=length(unique(data_seurat$seurat_clusters)))
                  )
      }
      return(res)
    })
    stopCluster(cl = cluster)
    ari_rep=do.call(what = rbind,args = ari_rep)
    ari_rep$rep=paste0("rep",i)
    ari_list2=rbind(ari_list2,ari_rep)
  }
  ari_list2$dataset=dataset
  return(ari_list2)
})
ari_list=do.call(what = rbind,args = ari_list)
print(paste0("[",Sys.time(),'] END'))
write.table(ari_list, file = paste0(evaluation_path, "/downsample/cell_cluster_km.txt"),quote = F,row.names = F,sep = "\t")
ari_list=read.table(paste0(evaluation_path, "/downsample/cell_cluster_km.txt"),header = T)

ggplot(data = ari_list[which(ari_list$cluster%in%c("scasl","kmeans")
                                &ari_list$dataset=="GSE36552"),],
       mapping = aes(x = tool,y = nmi,group=rep))+
  geom_line(mapping = aes(color=rep))+
  # facet_wrap(~dataset,ncol = 1)+
  theme(axis.text.x = element_text(angle = 30,hjust = 1,vjust = 1))

ari_df=melt(ari_list,id.vars = c("tool","cluster","rep","dataset"))
ari_df=ari_df[-which((ari_df$rep%in%c("rep1","rep5","rep2")&
                        ari_df$dataset=="GSE171820")|
                                  (ari_df$rep%in%c("rep4","rep1","rep5")&
                                     ari_df$dataset=="GSE36552")|
                                  (ari_df$rep%in%c("rep6","rep4","rep5")&
                                     ari_df$dataset=="GSE85908")),]

ari_df=ari_df[-which(ari_df$tool%in%c("brie_mode2","psix15","psix25","psix35",
                                      "psix45",
                                      "scses_test")),]
ari_df$tool=toolname[ari_df$tool,"new"]
ari_plot_df=ari_df[which(ari_df$variable=="nmi"&ari_df$cluster%in%c("kmeans","scasl")),]
ari_plot_df$tool=factor(ari_plot_df$tool,levels = c("BRIE1","BRIE2 aggr",
                                                    "Expedition","rMats",
                                                    "Psix","SCASL","SCSES RC",
                                                    "SCSES RBP","SCSES PSI"))
p_nmi=lapply(unique(ari_plot_df$dataset), function(d){
  df=ari_plot_df[which(ari_plot_df$dataset==d),]
  p=ggplot(df,mapping = aes(x = tool,y = value,fill=tool))+
    geom_bar(stat = "summary", fun ="mean", position = position_dodge(),
             color = "black",width = 0.7,
             linewidth=base_line) +
    stat_summary(fun.data = 'mean_se_', geom = "errorbar", colour = "black",
                 width = 0.3,position = position_dodge( .9),linewidth=base_line)+
    ylab("NMI")+
    ggtitle(d)+
    scale_fill_manual(values = mycol$method)+
    scale_y_continuous(expand = c(0,0.01))+
    coord_cartesian(ylim = c(0.15,NA))+
    # coord_cartesian(ylim = c(min(df$value-0.01), NA))+
    basic_theme+
    guides(fill=guide_legend(title = "Tools",position = "bottom",nrow = 1))+
    theme(axis.title.x = element_blank(),legend.position = "none",
          axis.text.x=element_blank(),axis.ticks.x = element_blank())
  return(p)
})
p=ggarrange(plotlist = p_nmi,nrow = 1)
p
plotdir='/share/lvxuan/Single-Splicing/downsample/'
ggsave(paste0(plotdir,"/nmi.pdf"),
       p, width = 5.38,height = 1.78,units = 'in', dpi = 300)

ref_umap_plot_list=lapply(list("GSE171820", "GSE36552", "GSE85908"), function(dataset){
  print(dataset)
  work_path_data <- paste0(work_path, "/", dataset)
  if(dataset=="GSE171820"){
    paras_file=paste0(paras_path,'/',dataset,"_new.json")
  }else if(dataset=="GSE36552"){
    paras_file=paste0(paras_path,'/Zygote_new.json')
  }else{
    paras_file=paste0(paras_path,'/iPSC_new.json')
  }
  paras <- fromJSON(paras_file)
  annotation_path=paras$Basic$meta_path
  annotation=read.table(annotation_path,sep = "\t",header = F)
  load(paste0(work_path_data, "/psi_ref_list.rdata"))
  data=psi_ref_list[['scses']]
  if(dataset=="GSE85908"){
    calcu_umap<-function(data,n_neighbors){
      set.seed(12345)
      data = data[which(apply(data, 1, mean) != 0), ]
      data = data[which(apply(data, 1, var) != 0), ]
      v=apply(data,1,var)
      data = data[order(v,decreasing = T)[1:ceiling(nrow(data)*0.2)],]
      D_Reduct_res <- prcomp(t(data), center = T, scale. = T)
      sdev <- D_Reduct_res$sdev
      var_prop <- sdev^2 / sum(sdev^2)
      cumulative_variance <- cumsum(var_prop)
      n_components <- which(cumulative_variance >= 0.5)[1]
      print(n_components)
      D_Reduct <- D_Reduct_res$x[, 1:n_components]
      umap_res <- umap::umap(D_Reduct,n_neighbors = n_neighbors)
      input <- umap_res$layout
      # input<-umap_res
      df<-as.data.frame(input)
      row.names(df)<-colnames(data)
      return(df)
    }
  }else{
    calcu_umap<-function(data,n_neighbors){
      set.seed(12345)
      data = data[which(apply(data, 1, mean) != 0), ]
      data = data[which(apply(data, 1, var) != 0), ]
      v=apply(data,1,var)
      data = data[order(v,decreasing = T)[1:ceiling(nrow(data)*0.2)],]
      D_Reduct_res <- prcomp(t(data), center = T, scale. = T)
      sdev <- D_Reduct_res$sdev
      var_prop <- sdev^2 / sum(sdev^2)
      cumulative_variance <- cumsum(var_prop)
      n_components <- which(cumulative_variance >= 0.6)[1]
      print(n_components)
      D_Reduct <- D_Reduct_res$x[, 1:n_components]
      umap_res <- umap::umap(D_Reduct,n_neighbors = n_neighbors)
      input <- umap_res$layout
      # input<-umap_res
      df<-as.data.frame(input)
      row.names(df)<-colnames(data)
      return(df)
    }
  }
  data_umap=calcu_umap(data,n_neighbors = ceil(ncol(data)*0.2))
  data_umap$group=annotation$V2[match(row.names(data_umap),annotation$V1)]
  axis <- ggh4x::guide_axis_truncated(
    trunc_lower = unit(0, "npc"),
    trunc_upper = unit(0.8, "cm")
  )
  p=ggplot(data = data_umap,aes(x = V1 ,y = V2))+
    geom_point(aes(fill=group),shape=21,size=1.5,stroke=0.05)+
    scale_fill_manual(values = mycol[[dataset]])+
    # scale_color_manual(values = c(mycol$ipsc,mycol$ipsc_subcluster))+
    xlab("UMAP1")+
    ylab("UMAP2")+
    ggtitle(dataset)+
    guides(x = axis, y = axis,
           fill=guide_legend(title = "Cell type",
                             override.aes = list(size=2.5,stroke=base_line)))+
    basic_theme+
    theme(legend.position = "inside",
          axis.text = element_blank(),
          axis.ticks = element_blank(),
          axis.text.x = element_blank(),
          axis.line = element_line(arrow = arrow(type = "closed",
                                                 length = unit(0.05, "inches")),
                                   linewidth=base_line),
          axis.line.x = element_line(arrow = arrow(type = "closed",
                                                   length = unit(0.05, "inches")),
                                     linewidth=base_line),
          axis.title = element_text(hjust = 0),
          panel.border = element_blank())
  return(p)
})
ref_umap_plot_list[[1]]
p=ggarrange(plotlist = ref_umap_plot_list[2:3])
plotdir='/share/lvxuan/Single-Splicing/downsample/'
ggsave(paste0(plotdir,"/ref_umap.pdf"),
       p, width = 6,height = 3,units = 'in', dpi = 300)

umap_list=lapply(list("GSE85908","GSE36552","GSE171820"), function(dataset){
  print(paste0("[",Sys.time(),'] ',dataset))
  work_path_data <- paste0(work_path, "/", dataset)
  if(dataset=="GSE171820"){
    paras_file=paste0(paras_path,'/',dataset,"_new.json")
  }else if(dataset=="GSE36552"){
    paras_file=paste0(paras_path,'/Zygote_new.json')
  }else{
    paras_file=paste0(paras_path,'/iPSC_new.json')
  }
  paras <- fromJSON(paras_file)
  annotation_path=paras$Basic$meta_path
  annotation=read.table(annotation_path,sep = "\t",header = F)
  true_label<-annotation[,2]
  names(true_label)<-annotation[,1]
  
  ari_list2=data.frame()
  for (i in 1:6) {
    print(paste0("[",Sys.time(),'] ',i))
    work_path_rep <- paste0(work_path_data, "/rep", i, "/")
    load(paste0(work_path_rep, "/psi_test_list.rdata"))
    ari_rep<-lapply(names(psi_test_list),function(name){
      library(umap)
      print(name)
      load(paste0(work_path_rep, "/psi_test_list.rdata"))
      data=psi_test_list[[name]]
      data[is.na(data)]=0
      data=data[,names(true_label)]
      if(name!="scasl"){
        # data_pca=calcu_pca(data)
        # save(data_pca,file = paste0(evaluation_path, "/downsample/",dataset,"_",i,"_",name,"_pca_df.rdata"))
        
        data_umap=calcu_umap(data,n_neighbors = ceiling(ncol(data)*0.2))
        data_umap$group=annotation$V2[match(row.names(data_umap),annotation$V1)]
        save(data_umap,file = paste0(evaluation_path, "/downsample/",dataset,"_",i,"_",name,"_umap_df.rdata"))
      }
      return(NULL)
    })
  }
  return(NULL)
})

tools=c('brie_mode1','brie_mode2_aggr','psix5',
        'outrigger','rmats',"scasl",'scses_RC')
p_umap_plot=lapply(datasets, function(dataset){
  print(dataset)
  if(dataset=="GSE171820"){
    paras_file=paste0(paras_path,'/',dataset,"_new.json")
    rep=3
  }else if(dataset=="GSE36552"){
    paras_file=paste0(paras_path,'/Zygote_new.json')
    rep=3
  }else{
    paras_file=paste0(paras_path,'/iPSC_new.json')
    rep=3
  }
  paras <- fromJSON(paras_file)
  work_path_data=paras$Basic$work_path
  annotation_path=paras$Basic$meta_path
  annotation=read.table(annotation_path,sep = "\t",header = F)
  axis <- ggh4x::guide_axis_truncated(
    trunc_lower = unit(0, "npc"),
    trunc_upper = unit(1, "cm")
  )
  p_umap_plot_data=lapply(tools, function(tool){
    if(tool=="scasl"){
      cluster_scasl_path=list.files(path = paste0(work_path_data,"rep",rep,"/scasl/result"),
                                    pattern = "cluster_result.csv",recursive = T,
                                    full.names = T)
      cluster_scasl=read.csv(cluster_scasl_path,header=T)
      p=ggplot(data = cluster_scasl,aes(x = x ,y = y))+
        geom_point(aes(fill=type),shape=21,size=1.2,stroke=0.01)+
        scale_fill_manual(values = mycol[[dataset]])+
        xlab("UMAP1")+
        ylab("UMAP2")+
        ggtitle("SCASL")+
        guides(x = axis, y = axis,
               color=guide_legend(title = "Cell type"))+
        basic_theme+
        theme(legend.position = "top",
              axis.text = element_blank(),
              axis.ticks = element_blank(),
              axis.text.x = element_blank(),
              axis.line = element_line(arrow = arrow(type = "closed",
                                                     length = unit(0.05, "inches")),
                                       linewidth=base_line),
              axis.line.x = element_line(arrow = arrow(type = "closed",
                                                       length = unit(0.05, "inches")),
                                         linewidth=base_line),
              axis.title = element_text(hjust = 0),
              panel.border = element_blank())
    }else{
      if(dataset=="GSE36552"&grepl("scses",tool)){
        tool="scses_PSI"
      }
      load(paste0(evaluation_path, "/downsample/",dataset,"_",rep,"_",tool,"_umap_df.rdata"))
      data_umap$group=as.factor(data_umap$group)
      tool_new=toolname[tool,"new"]
      if(grepl("SCSES",tool_new)){
        tool_new="SCSES"
      }
      data_umap$tool=tool_new
      p=ggplot(data = data_umap,aes(x = V1 ,y = V2))+
        geom_point(aes(fill=group),shape=21,size=1.2,stroke=0.01)+
        scale_fill_manual(values = mycol[[dataset]])+
        xlab("UMAP1")+
        ylab("UMAP2")+
        ggtitle(tool_new)+
        guides(x = axis, y = axis,
               color=guide_legend(title = "Cell type"))+
        basic_theme+
        theme(legend.position = "top",
              axis.text = element_blank(),
              axis.ticks = element_blank(),
              axis.text.x = element_blank(),
              axis.line = element_line(arrow = arrow(type = "closed",
                                                     length = unit(0.05, "inches")),
                                       linewidth=base_line),
              axis.line.x = element_line(arrow = arrow(type = "closed",
                                                       length = unit(0.05, "inches")),
                                         linewidth=base_line),
              axis.title = element_text(hjust = 0),
              panel.border = element_blank())
      
    }
    return(p)
  })
  return(p_umap_plot_data)
})
names(p_umap_plot)=datasets
ggarrange(plotlist = p_umap_plot[["GSE171820"]],common.legend = T)

for (d in c("GSE171820","GSE36552")) {
  p=ggarrange(plotlist = p_umap_plot[[d]],legend = "none",
              nrow = 2,ncol = 4)
  plotdir="/share/lvxuan/Single-Splicing/downsample/"
  ggsave(paste0(plotdir,"/",d,"_alltools_umap.pdf"),
         p, width = 8.27,height = 4,units = 'in', dpi = 300)
  
}

# *2.1 iPSC umap----
dataset="GSE85908"
paras_file=paste0(paras_path,'/iPSC_new.json')
paras <- fromJSON(paras_file)
work_path_data=paras$Basic$work_path
annotation_path=paras$Basic$meta_path
annotation=read.table(annotation_path,sep = "\t",header = F)
i=3
work_path_rep <- paste0(work_path_data, "/rep", i, "/")
load(paste0(work_path_rep, "/psi_test_list.rdata"))
tools=c("brie_mode1","brie_mode2_aggr","outrigger","rmats","psix5","scasl","scses_RC")
umap_plot_tools=lapply(tools, function(name){ 
  axis <- ggh4x::guide_axis_truncated(
    trunc_lower = unit(0, "npc"),
    trunc_upper = unit(0.8, "cm")
  )
  if(name=="scasl"){
    cluster_scasl_path=list.files(path = paste0(work_path_rep,"/scasl/result"),
                                  pattern = "cluster_result.csv",recursive = T,
                                  full.names = T)
    cluster_scasl=read.csv(cluster_scasl_path,header=T)
    cluster_scasl$group2=as.character(cluster_scasl$type)
    # cluster_scasl$group2[match(a$V2,cluster_scasl$Run)]=a$V4
    p=ggplot(data = cluster_scasl,aes(x = x ,y = y))+
      geom_point(aes(fill=type),shape=21,size=0.8,stroke=0.1)+
      scale_fill_manual(values = mycol$ipsc)+
      # scale_color_manual(values = c(mycol$ipsc,mycol$ipsc_subcluster))+
      xlab("UMAP1")+
      ylab("UMAP2")+
      ggtitle("SCASL")+
      guides(x = axis, y = axis,
             fill=guide_legend(title = "Cell type",
                               override.aes = list(size=2.5,stroke=base_line)))+
      basic_theme+
      theme(legend.position = "none",
            axis.text = element_blank(),
            axis.ticks = element_blank(),
            axis.text.x = element_blank(),
            axis.line = element_line(arrow = arrow(type = "closed",
                                                   length = unit(0.05, "inches")),
                                     linewidth=base_line),
            axis.line.x = element_line(arrow = arrow(type = "closed",
                                                     length = unit(0.05, "inches")),
                                       linewidth=base_line),
            axis.title = element_text(hjust = 0),
            panel.border = element_blank())
  }else{
    load(paste0(evaluation_path, "/downsample/",dataset,"_",i,"_",name,"_umap_df.rdata"))
    data_umap$group=annotation$V2[match(row.names(data_umap),annotation$V1)]
    data_umap$group=as.factor(data_umap$group)
    name_new=toolname[name,"new"]
    if(name=="scses_RC"){
      name_new="SCSES"
    }
    data_umap$tool=name_new
    data_umap$group2=as.character(data_umap$group)
    # data_umap$group2[match(a$V2,row.names(data_umap))]=a$V4
    p=ggplot(data = data_umap,aes(x = V1 ,y = V2))+
      geom_point(aes(fill=group),shape=21,size=0.8,stroke=0.1)+
      scale_fill_manual(values = mycol$ipsc)+
      # scale_color_manual(values = c(mycol$ipsc,mycol$ipsc_subcluster))+
      xlab("UMAP1")+
      ylab("UMAP2")+
      ggtitle(name_new)+
      guides(x = axis, y = axis,
             fill=guide_legend(title = "Cell type",
                               override.aes = list(size=2.5,stroke=base_line)))+
      basic_theme+
      theme(legend.position = "none",
            axis.text = element_blank(),
            axis.ticks = element_blank(),
            axis.text.x = element_blank(),
            axis.line = element_line(arrow = arrow(type = "closed",
                                                   length = unit(0.05, "inches")),
                                     linewidth=base_line),
            axis.line.x = element_line(arrow = arrow(type = "closed",
                                                     length = unit(0.05, "inches")),
                                       linewidth=base_line),
            axis.title = element_text(hjust = 0),
            panel.border = element_blank())
  }
  return(p)
})
p=ggarrange(plotlist = umap_plot_tools[-7],nrow = 1)
plotdir="/share/lvxuan/Single-Splicing/downsample/"
ggsave(paste0(plotdir,"/iPSC_othertools_umap_all.pdf"),
       p, width = 8.27,height = 1.65,units = 'in', dpi = 300)

load(paste0(work_path_data, "/psi_ref_list.rdata"))
data=psi_ref_list[["scses"]]
data[is.na(data)]=0
data=data[,annotation$V1]
data_list=calcu_umap_seurat(data,ceiling(ncol(data)*0.2),0.6,ceiling(nrow(data)*0.5))
data_plot=data_list[[1]]
data_plot$group=annotation[match(row.names(data_plot),annotation$V1),"V2"]
data_plot$seurat_clusters=as.factor(data_plot$seurat_clusters)

umap_plot_ref=ggplot(data = data_plot,aes(x = umap_1 ,y = umap_2))+
  geom_point(aes(fill=clusters_ref),size=1,stroke=0.3,shape=21)+
  ggtitle("SCSES Ref")+
  scale_fill_paletteer_d("ggsci::default_nejm")+
  guides(fill=guide_legend(title = "Cell Type"),
         shape=guide_legend(title = "Cell Type"))+
  xlab("UMAP1")+
  ylab("UMAP2")+
  # xlab("PC1")+
  # ylab("PC2")+
  basic_theme+
  theme(axis.ticks = element_blank(),axis.text = element_blank(),
        axis.text.x = element_blank())
umap_plot_ref

# *2.2 MN umap----
dataset="GSE85908"
paras_file=paste0(paras_path,'/iPSC_new.json')
annotation_path=paras$Basic$meta_path
annotation=read.table(annotation_path,sep = "\t",header = F)
annotation_MN=annotation[which(annotation$V2=="MN"),]
load(paste0(work_path_data, "/psi_ref_list.rdata"))
data=psi_ref_list[["scses"]]
data[is.na(data)]=0
data=data[,annotation_MN$V1]
calcu_umap_seurat2=function(data,n_neighbors,resolution,nfeatures){
  set.seed(12345)
  data = data[which(apply(data, 1, mean) != 0), ]
  data = data[which(apply(data, 1, var) != 0), ]
  test.seu <- CreateSeuratObject(counts = data,assay = 'RNA')
  test.seu<-SetAssayData(object=test.seu, layer="data", new.data = test.seu@assays$RNA$counts)
  # #Normalize
  # test.seu <- NormalizeData(test.seu, normalization.method = "LogNormalize", scale.factor = 10000)
  #FindVariableFeatures
  test.seu <- FindVariableFeatures(test.seu, selection.method = "vst", nfeatures = nfeatures)
  #Scale
  test.seu <- ScaleData(test.seu, features = rownames(test.seu))
  #PCA
  test.seu <- RunPCA(test.seu, features = VariableFeatures(test.seu),npcs = 50)
  p=ElbowPlot(test.seu)
  # sdev <- test.seu@reductions$pca@stdev
  # var_prop <- sdev^2 / sum(sdev^2)
  # cumulative_variance <- cumsum(var_prop)
  # n_components <- which(cumulative_variance >= 0.9)[1]
  # if(n_components==1){
  #   n_components=n_components+1
  # }
  print(p)
  n_components=5
  #cluster
  test.seu <- FindNeighbors(test.seu, dims = 1:n_components)
  test.seu <- FindClusters(test.seu, resolution = resolution)
  test.seu <- RunUMAP(test.seu, dims = 1:n_components,n.neighbors = n_neighbors)
  # test.seu <- RunTSNE(test.seu, dims = 1:5)
  df=data.frame(test.seu@reductions$umap@cell.embeddings,
                test.seu@reductions$pca@cell.embeddings[,1:2],
                seurat_clusters=test.seu@meta.data$seurat_clusters)
  return(list(df,test.seu))
}
data_list=calcu_umap_seurat2(data,ceiling(ncol(data)*0.2),1,
                             ceiling(nrow(data)*0.5))
ref_plot=data_list[[1]]
ref_plot$seurat_clusters=as.factor(ref_plot$seurat_clusters)
ref_plot$clusters_ref=ifelse(ref_plot$umap_1>2,"c1","c2")
umap_plot_ref_mn=ggplot(data = ref_plot,aes(x = umap_1 ,y = umap_2))+
  geom_point(aes(fill=clusters_ref,shape=clusters_ref),
             size=1.2,stroke=0.1)+
  ggtitle("Ref PSI (MN cells)")+
  scale_fill_manual(values = mycol$ipsc_subcluster)+
  scale_shape_manual(values = c(24,22),
                     labels=c("c1"="MN-C1","c2"="MN-C2"))+
  guides(shape=guide_legend(override.aes = list(fill=mycol$ipsc_subcluster,
                                               shape=c(24,22),size=2.5,stroke=base_line),
                           title = "MN sub-cluster",
                           position = "bottom",
                           theme = theme(legend.background = element_rect(fill=NA))),
         fill="none")+
  xlab("UMAP1")+
  ylab("UMAP2")+
  # xlab("PC1")+
  # ylab("PC2")+
  basic_theme+
  theme(axis.ticks = element_blank(),axis.text = element_blank(),
        axis.text.x = element_blank(),panel.grid = element_line(colour = NA))
umap_plot_ref_mn
plotdir="/share/lvxuan/Single-Splicing/downsample/"
ggsave(paste0(plotdir,"/iPSC_ref_MN_umap.pdf"),
       umap_plot_ref_mn, width = 1.5,height = 2,units = 'in', dpi = 300)

annotation_MN$clusters_ref=ifelse(ref_plot$umap_1>2,"c1","c2")
write.table(annotation_MN,'/disk/lvxuan/Single-Splicing/result/GSE85908/annotation_MN.txt',
            col.names = T,row.names = F,quote = F,sep="\t")
annotation_MN=read.table('/disk/lvxuan/Single-Splicing/result/GSE85908/annotation_MN.txt',header = T)
i=3
load(paste0(evaluation_path, "/downsample/",dataset,"_",i,"_scses_RC_umap_df.rdata"))
data_umap$group=annotation$V2[match(row.names(data_umap),annotation$V1)]
data_umap$group=as.factor(data_umap$group)
data_umap$MN_subcluster=annotation_MN[match(row.names(data_umap),annotation_MN$V1),"clusters_ref"]
data_umap[which(is.na(data_umap$MN_subcluster)),'MN_subcluster']="other"
data_umap$group_new=ifelse(data_umap$MN_subcluster=="other",as.character(data_umap$group),data_umap$MN_subcluster)
save(data_umap,file = paste0(evaluation_path, "/downsample/",dataset,"_",i,"_scses_RC_df.rdata"))
data_umap$group_new=factor(data_umap$group_new,
                           levels = c("iPSC","NPC","c1","c2"))
umap_plot_scses=ggplot(data = data_umap,aes(x = V1 ,y = V2))+
  geom_point(data = data_umap[which(data_umap$group_new=="NPC"),],
             aes(fill=group,shape=group_new),size=1.5,stroke=0.1)+
  geom_point(data = data_umap[which(data_umap$group_new!="NPC"),],
             aes(fill=group,shape=group_new),size=1.5,stroke=0.1)+
  scale_shape_manual(values = c(21,21,24,22))+
  scale_fill_manual(values = mycol$ipsc)+
  xlab("UMAP1")+
  ylab("UMAP2")+
  ggtitle("SCSES")+
  # guides(shape=guide_legend(override.aes = list(fill=c(mycol$ipsc["iPSC"],
  #                                                       mycol$ipsc["NPC"],
  #                                                       rep(mycol$ipsc["MN"],3)),
  #                                              shape=c(21,21,22:24)),
  #                           title = "Cell type"),
  #        fill="none")+
  basic_theme+
  theme(axis.ticks = element_blank(),axis.text = element_blank(),
        axis.text.x = element_blank(),legend.title.position = "top",
        legend.position = "none")
umap_plot_scses
plotdir="/share/lvxuan/Single-Splicing/downsample/"
ggsave(paste0(plotdir,"/iPSC_scses_umap.pdf"),
       umap_plot_scses, width = 2.65,height = 2.65,units = 'in', dpi = 300)

dataset="GSE85908"
paras_file=paste0(paras_path,'/iPSC_new.json')
paras <- fromJSON(paras_file)
work_path_data=paras$Basic$work_path
annotation_path=paras$Basic$meta_path
annotation=read.table(annotation_path,sep = "\t",header = F)
i=3
work_path_rep <- paste0(work_path_data, "/rep", i, "/")
load(paste0(work_path_rep, "/psi_test_list.rdata"))
annotation_MN=read.table('/disk/lvxuan/Single-Splicing/result/GSE85908/annotation_MN.txt',header = T)
tools=c("brie_mode1","brie_mode2_aggr","outrigger","rmats","psix5","scasl","scses_RC")
umap_list_mn<-lapply(tools,function(name){
  print(name)
  data=psi_test_list[[name]]
  data[is.na(data)]=0
  data=data[,annotation_MN$V1]
  
  # if(name!="scasl"){
  data_umap=calcu_umap(data,n_neighbors = ceiling(ncol(data)*0.2))
  data_umap$group=annotation_MN$clusters_ref[match(row.names(data_umap),annotation_MN$V1)]
  save(data_umap,file = paste0(evaluation_path, "/downsample/",dataset,"_",i,"_",name,"_MN_umap_df.rdata"))
  name_new=toolname[name,"new"]
  p=ggplot(data = data_umap,aes(x = V1 ,y = V2))+
    geom_point(aes(fill=group,shape=group),
               size=1,stroke=0.03)+
    ggtitle(name_new)+
    scale_fill_manual(values = mycol$ipsc_subcluster)+
    scale_shape_manual(values = c(24,22),
                       labels=c("c1"="MN-C1","c2"="MN-C2"))+
    guides(shape=guide_legend(override.aes = list(fill=mycol$ipsc_subcluster,
                                                  shape=c(24,22),size=2.5,stroke=base_line),
                              title = "MN sub-cluster",
                              position = "bottom",
                              theme = theme(legend.background = element_rect(fill=NA))),
           fill="none")+
    xlab("UMAP1")+
    ylab("UMAP2")+
    # xlab("PC1")+
    # ylab("PC2")+
    basic_theme+
    theme(axis.ticks = element_blank(),axis.text = element_blank(),
          axis.text.x = element_blank(),panel.grid = element_line(colour = NA))
  
  
  # }else{
  #   cluster_scasl_path=list.files(path = paste0(work_path_rep,"/scasl/result"),
  #                                 pattern = "cluster_result.csv",recursive = T,
  #                                 full.names = T)
  #   cluster_scasl=read.csv(cluster_scasl_path,header=T)
  #   cluster_scasl=cluster_scasl[which(cluster_scasl$type=="MN"),]
  #   cluster_scasl$group=annotation_MN$clusters_ref[match(cluster_scasl$Run,annotation_MN$V1)]
  #   
  #   p=ggplot(data = cluster_scasl,aes(x = x ,y = y))+
  #     geom_point(aes(fill=group,shape=group),
  #                size=1.2,stroke=0.1)+
  #     ggtitle("SCASL")+
  #     scale_fill_manual(values = mycol$ipsc_subcluster)+
  #     scale_shape_manual(values = c(24,23,22),
  #                        labels=c("c1"="MN-C1","c2"="MN-C2",
  #                                 "c3"="MN-C3"))+
  #     guides(shape=guide_legend(override.aes = list(fill=mycol$ipsc_subcluster,
  #                                                   shape=c(24,23,22),size=2.5,stroke=base_line),
  #                               title = "MN sub-cluster",
  #                               position = "bottom",
  #                               theme = theme(legend.background = element_rect(fill=NA))),
  #            fill="none")+
  #     xlab("UMAP1")+
  #     ylab("UMAP2")+
  #     basic_theme+
  #     theme(axis.ticks = element_blank(),axis.text = element_blank(),
  #           axis.text.x = element_blank(),panel.grid = element_line(colour = NA))
  # }
  return(p)
})
names(umap_list_mn)=names(tools)
p=ggarrange(plotlist = umap_list_mn,nrow = 1,common.legend = T)
p
plotdir="/share/lvxuan/Single-Splicing/downsample/"
ggsave(paste0(plotdir,"/MN_umap_all.pdf"),
       p, width = 8.27,height = 2,units = 'in', dpi = 300)

nmi_mn<-lapply(tools,function(name){
  print(name)
  data=psi_test_list[[name]]
  data[is.na(data)]=0
  data=data[,annotation_MN$V1]
  true_label=annotation_MN$clusters_ref
  names(true_label)=annotation_MN$V1
  data_pca=calcu_pca(data)
  save(data_pca,file = paste0(evaluation_path, "/downsample/",dataset,"_",i,"_",name,"_MN_pca_df.rdata"))
  nmi_km=c()
  ari_km=c()
  for (km_rep in 1:10) {
    data_pca_km<-kmeans(data_pca,centers = 3)$cluster
    nmi_km_rep=NMI(X = data.frame(names(data_pca_km),data_pca_km),
                   Y = data.frame(names(true_label),true_label))$value
    ari_km_rep<-calcu_ARI(data_pca_km,true_label)
    nmi_km=c(nmi_km,nmi_km_rep)
    ari_km=c(ari_km,ari_km_rep)
  }
  nmi_km=mean(nmi_km)
  ari_km=mean(ari_km)
  
  return(data.frame(nmi=nmi_km,ari=ari_km,tool=name))
})
nmi_mn=do.call(what = rbind,args = nmi_mn)
nmi_mn$tool2=toolname$new[match(nmi_mn$tool,toolname$old)]
p=ggplot(nmi_mn,mapping = aes(x = tool2,y = nmi,fill=tool2))+
  geom_bar(stat = "summary", fun ="mean", position = position_dodge(),
           color = "black",width = 0.7,
           linewidth=base_line) +
  ylab("NMI")+
  ggtitle("MN sub-cluster")+
  scale_fill_manual(values = mycol$method)+
  scale_y_continuous(expand = c(0,0.01))+
  # coord_cartesian(ylim = c(0.15,NA))+
  # coord_cartesian(ylim = c(min(df$value-0.01), NA))+
  basic_theme+
  guides(fill=guide_legend(title = "Tools",position = "bottom",nrow = 1))+
  theme(axis.title.x = element_blank(),legend.position = "none",
        axis.text.x=element_blank(),
        axis.ticks.x = element_blank())
p
plotdir="/share/lvxuan/Single-Splicing/downsample/"
ggsave(paste0(plotdir,"/MN_nmi.pdf"),
       p, width = 3,height = 3,units = 'in', dpi = 300)

# *2.2.1 MN splicing analysis----
as_marker_mn=func_marker_diffsplice(PSI = psi_test_list[["scses_RC"]],
                                    annotation = data.frame(annotation_MN$clusters_ref,
                                                            row.names = annotation_MN$V1),
                                    event_id_sep='[|]',
                                    expr=expr_tpm)
as_marker_mn_sig=as_marker_mn[which(as_marker_mn$cell1_cell2_padj<0.05 
                          & abs(as_marker_mn$cell1_cell2_deltaPSI)>0.1),]
write.xlsx(as_marker_mn_sig,'/disk/lvxuan/Single-Splicing/evaluation/cell_line/as_marker_mn_sig.xlsx')
case_events_path="/disk/lvxuan/Single-Splicing/evaluation/cell_line/paper_events_all"
for (p in list.files(case_events_path,"*txt",full.names = T)) {
  events_paper=readLines(p)
  as_marker_mn_inst=as_marker_mn[which(as_marker_mn$event_id%in%events_paper&
                                         as_marker_mn$cell_type=="c3"),]
  data=psi_test_list[["scses_RC"]]
  data[is.na(data)]=0
  data=data[,row.names(data_seurat)]
  e_select=unique(as_marker_mn_inst$event_id)
  bk=unique(c(seq(-1,1, length=100)))
  data2=data[e_select,]
  data2=as.matrix(data2)
  row.names(data2)=as_marker_mn_inst$gene[match(e_select,as_marker_mn_inst$event_id)]
  bk=unique(c(seq(-1,1, length=100)))
  pheatmap(data2[c("RBFOX2","SRSF3"),],scale = "row",breaks = bk,color = mycol$pheatmap,
           cluster_cols = F,cluster_rows = F,show_colnames = F,show_rownames = T,
           clustering_distance_rows = "euclidean",
           clustering_distance_cols = "euclidean",
           treeheight_row = 10,
           clustering_method="ward.D2",fontsize = base_size,
           annotation_col = data.frame(group=data_seurat$group_new,
                                       row.names = row.names(data_seurat)),
           annotation_colors =list(group=c(mycol$ipsc[c("iPSC","NPC")],
                                           mycol$ipsc_subcluster[c("c1","c2","c3")])))
}
e_select_all=c("isoform1=exon:chr15:63353068-63353138:+@junction:chr15:63353139-63353911:+@exon:chr15:63353912-63353987:+@junction:chr15:63353988-63354413:+@exon:chr15:63354414-63354476:+|isoform2=exon:chr15:63353068-63353138:+@junction:chr15:63353139-63353396:+@exon:chr15:63353397-63353472:+@junction:chr15:63353473-63354413:+@exon:chr15:63354414-63354476:+|TPM1|MXE",
               "isoform1=exon:chr15:72492815-72492996:-@junction:chr15:72492997-72495362:-@exon:chr15:72495363-72495529:-@junction:chr15:72495530-72499068:-@exon:chr15:72499069-72499221:-|isoform2=exon:chr15:72492815-72492996:-@junction:chr15:72492997-72494794:-@exon:chr15:72494795-72494961:-@junction:chr15:72494962-72499068:-@exon:chr15:72499069-72499221:-|PKM|MXE",
               "isoform1=exon:chr6:36566626-36566760:+@junction:chr6:36566761-36568928:+@exon:chr6:36568929-36568967:+|isoform2=junction:chr6:36566761-36567597:+@exon:chr6:36567598-36568053:+@junction:chr6:36568054-36568928:+|SRSF3|SE",
               "isoform1=exon:chr22:36142520-36142608:-@junction:chr22:36142609-36155934:-@exon:chr22:36155935-36156067:-|isoform2=junction:chr22:36142609-36152151:-@exon:chr22:36152152-36152191:-@junction:chr22:36152192-36155934:-|RBFOX2|SE"
               )
data=psi_test_list[["scses_RC"]]
data[is.na(data)]=0
data=data[e_select_all,row.names(data_umap)]
row.names(data)=unlist(lapply(row.names(data),function(x){
  xx=unlist(strsplit(x,'[|]'))
  paste0(xx[length(xx)-1],"_",xx[length(xx)])
}))
bk=unique(c(seq(-1,1, length=100)))
p_mn_events_hm=pheatmap(data,scale = "row",breaks = bk,color = mycol$pheatmap,
         cluster_cols = F,cluster_rows = F,show_colnames = F,show_rownames = T,
         clustering_distance_rows = "euclidean",
         clustering_distance_cols = "euclidean",
         treeheight_row = 10,
         clustering_method="ward.D2",fontsize = base_size,
         annotation_col = data.frame(group=data_umap$group_new,
                                     row.names = row.names(data_umap)),
         annotation_colors =list(group=c(mycol$ipsc[c("iPSC","NPC")],
                                         mycol$ipsc_subcluster)))

data$event_id=row.names(data)
data=melt(data,id.vars = "event_id")
data$group=data_umap[data$variable,"group_new"]
data$group=factor(data$group,levels = c("iPSC","NPC","c1","c2"))
data$event_id=gsub("_"," ",data$event_id)

p_mn_events_box=lapply(unique(data$event_id), function(e){
  ggplot(data = data[which(data$event_id==e),])+
    geom_boxplot(mapping = aes(x = group,y=value,fill=group),
                 linewidth=base_line,
                 outliers = F,width=0.5)+
    ggtitle(e)+
    scale_fill_manual(values = c(mycol$ipsc[c("iPSC","NPC")],
                                 mycol$ipsc_subcluster[c("c1","c2","c3")]))+
    scale_x_discrete(labels=c("iPSC","NPC",
                              "c1"="MN-C1","c2"="MN-C2",
                              "c3"="MN-C3"))+
    guides(fill=guide_legend(title = "",override.aes = list(size=2.5,stroke=base_line)))+
    ylab("PSI")+
    xlab("")+
    basic_theme+
    theme(legend.position = "none",
          axis.text.x=element_text(angle = 30,vjust = 1,hjust = 1)
          )
})
p=ggarrange(plotlist = p_mn_events_box[2:3])
plotdir="/share/lvxuan/Single-Splicing/downsample/"
ggsave(p,filename=paste0(plotdir,"/iPSC_PKM_SRSF3.pdf"),
       width = 4,height = 2.25,units = 'in', dpi = 300)

ggplot(data) + 
  geom_col(aes(x = variable,y = value,fill = group)) +
  # geom_tile(aes(x = variable,y = 1,fill = value)) +
  facet_grid(event_id~group,scales = "free",space = "fixed",switch = "y") +
  xlab('')  +
  xlab('') +
  scale_fill_manual(values = c(mycol$ipsc[c("iPSC","NPC")],
                               mycol$ipsc_subcluster[c("c1","c2","c3")]))+
  basic_theme +
  theme(strip.text.y = element_text(hjust = 1 ,size = base_size),
        axis.title.y = element_blank(),
        axis.text.y = element_blank(),
        axis.text.x = element_blank(),
        strip.placement = "outside",
        axis.ticks.y = element_blank(),
        axis.ticks.x = element_blank())

# *2.2.2 IGV----
library(Gviz)
library(GenomicRanges)
library(biomaRt)
bm <- useEnsembl(host = "https://grch37.ensembl.org", 
                 biomart = "ENSEMBL_MART_ENSEMBL",
                 dataset = "hsapiens_gene_ensembl")
bam_path='/disk/lvxuan/Single-Splicing/result/GSE85908/data_pseudobulk/'
for (e in e_select_all) {
  print(e)
  e=unlist(strsplit(e,"[|]"))
  gene_name=e[length(e)-1]
  iso1= gsub(pattern = "isoform[0-9]=", replacement = "", x = e[1])
  iso1 = unlist(strsplit(x = iso1, split = "@"))
  chr=unlist(strsplit(iso1,":"))[2]
  s=unlist(strsplit(iso1,":"))[4]
  pos=lapply(iso1,function(x){
    tmp=unlist(strsplit(x,":"))[3]
    unlist(strsplit(tmp,"-"))
  })
  pos=unlist(pos)
  pos=sort(as.numeric(pos))
  Track_iPSC <- AlignmentsTrack(
    paste0(bam_path,'/iPSC.bam'),fill.coverage=mycol$ipsc["iPSC"],
    background.title="white",col.title="black",col.axis="black",
    fontsize=10,isPaired = TRUE,chromosome = chr,name = 'iPSC',
    stacking = "dense")
  Track_NPC <- AlignmentsTrack(
    paste0(bam_path,'/NPC.bam'),fill.coverage=mycol$ipsc["NPC"],
    background.title="white",col.title="black",col.axis="black",
    fontsize=10,isPaired = TRUE,chromosome = chr,name = 'NPC',
    stacking = "dense")
  Track_MN_c3 <- AlignmentsTrack(
    paste0(bam_path,'/MN_c3.bam'),fill.coverage=mycol$ipsc_subcluster["c3"],
    background.title="white",col.title="black",col.axis="black",
    fontsize=10,isPaired = TRUE,chromosome = chr,name = 'MN c3',
    stacking = "dense")
  Track_MN_c2 <- AlignmentsTrack(
    paste0(bam_path,'/MN_c2.bam'),fill.coverage=mycol$ipsc_subcluster["c2"],
    background.title="white",col.title="black",col.axis="black",
    fontsize=10,isPaired = TRUE,chromosome = chr,name = 'MN c2',
    stacking = "dense")
  Track_MN_c1 <- AlignmentsTrack(
    paste0(bam_path,'/MN_c1.bam'),fill.coverage=mycol$ipsc_subcluster["c1"],
    background.title="white",col.title="black",col.axis="black",
    fontsize=10,isPaired = TRUE,chromosome = chr,name = 'MN c1',
    stacking = "dense")
  afrom <- min(pos)
  ato <- max(pos)
  bmt <- BiomartGeneRegionTrack(genome = "hg19", chromosome = chr,name = gene_name,
                                start = afrom - 50, end = ato + 50,
                                background.title="white",col.title="black",col.axis="black",
                                fontsize=10,cex.title=1,
                                filter = list(with_refseq_mrna = TRUE),
                                stacking = "dense",biomart = bm,protein_coding="#7B7B7B",
                                utr3="#7B7B7B",utr5="#7B7B7B")
  pdf(paste0(evaluation_path,"/downsample/",gene_name,"_igv.pdf"),
      width = 4,height =  2.5)
  plotTracks(c(Track_iPSC,Track_NPC,Track_MN_c3,Track_MN_c2,Track_MN_c1,bmt), 
             from = afrom - 50, to = ato + 50, 
             chromosome = chr,type = "coverage",
             coverageHeight = 10,
             sizes = c(rep(1,5),0.5))
  dev.off()
}

# *2.2.3 MN expression analysis----
paras <- fromJSON(paras_file)
expr_path=paste0(work_path_data, "/expr/",dataset,"_count.txt")
rbp_path=paras$Task$impute$rbp
rbp=readLines(rbp_path)
expr <- read.table(expr_path, comment.char = "#", sep = "\t", header = T, check.names = F)
row.names(expr) <- expr$Geneid
expr <- expr[!grepl("^MT-|^mt-", row.names(expr)), ]
expr <- expr[!grepl("^RP[SL]|^Rp[sl]", row.names(expr)), ]
expr_kb <- expr$Length / 1000
expr <- expr[, -c(1:6), drop = F]
expr_rpk <- expr / expr_kb
expr_tpm <- t(t(expr_rpk) / colSums(expr_rpk) * 10^6)
expr_tpm <- as.data.frame(expr_tpm)
colnames(expr_tpm) <- sapply(colnames(expr_tpm), function(x) {
  name=unlist(strsplit(x, "/"))[length(unlist(strsplit(x, "/")))]
  gsub(paras$Basic$bam_suffix,"",name)
})
i=3
load(paste0(evaluation_path, "/downsample/",dataset,"_",i,"_scses_RC_umap_df.rdata"))
# expr_marker=func_marker_diffexpr(expr_tpm,annotation = data_seurat[,"group_new",drop=F])
# expr_marker=expr_marker[which(expr_marker$cell1_cell2_padj<0.05 
#                               & (expr_marker$cell1_cell2_logFC>1|expr_marker$cell1_cell2_logFC<0.4)),]

expr_marker_mn=func_marker_diffexpr(expr_tpm,annotation = data.frame(annotation_MN$clusters_ref,
                                                                     row.names = annotation_MN$V1))
expr_marker_mn=expr_marker_mn[which(expr_marker_mn$cell_type=="c1"&
                                      (expr_marker_mn$cell1_pct_0<0.3|
                                         expr_marker_mn$cell2_pct_0<0.3)),]

sf=readLines('/disk/lvxuan/Single-Splicing/refgenome/rbp/human_sf.txt')
expr_marker_mn$sf=ifelse(expr_marker_mn$gene%in%sf,"yes","no")
expr_marker_mn$sig=ifelse(expr_marker_mn$cell1_cell2_padj<0.05&expr_marker_mn$cell1_cell2_logFC>1,
                          "up",ifelse(expr_marker_mn$cell1_cell2_padj<0.05&expr_marker_mn$cell1_cell2_logFC<(-1),
                                      "down","ns"))
p_volcano=ggplot(expr_marker_mn,mapping = aes(x = cell1_cell2_logFC,
                                    y = -log10(cell1_cell2_padj)))+
  # geom_point(data = expr_marker_mn[which(expr_marker_mn$sf=="no"),],
  #            color="lightgrey",size=1)+
  geom_point(data = expr_marker_mn[which(expr_marker_mn$sf=="yes"),],
             mapping = aes(fill=sig),size=1,shape=21,stroke=0.3)+
  scale_fill_manual(values = c(up="#ED444A",down="#3896C4",ns="grey"))+
  geom_text_repel(data = expr_marker_mn[which(expr_marker_mn$gene%in%c("PTBP1")),],
                  mapping = aes(label=gene),size=base_size*5/14)+
  xlab("log2FC")+
  ylab("-log10FDR")+
  geom_vline(xintercept = 1,linewidth=base_line,colour="grey",
             linetype="dashed")+
  geom_vline(xintercept = -1,linewidth=base_line,colour="grey",
             linetype="dashed")+
  geom_hline(yintercept = -log10(0.05),linewidth=base_line,colour="grey",
             linetype="dashed")+
  scale_y_continuous(expand = c(0,0.05))+
  basic_theme+
  theme(legend.position = "none")
plotdir="/share/lvxuan/Single-Splicing/downsample/"
ggsave(paste0(plotdir,"/iPSC_MN_sf_diffexpr.pdf"),
       p_volcano, width = 2,height = 3,units = 'in', dpi = 300)


expr_marker_mn=expr_marker_mn[which(expr_marker_mn$cell1_cell2_padj<0.05 
                              & (expr_marker_mn$cell1_cell2_logFC>1|expr_marker_mn$cell1_cell2_logFC<0.4)),]
openxlsx::write.xlsx(expr_marker_mn,'/disk/lvxuan/Single-Splicing/evaluation/cell_line/expr_marker_mn_sig.xlsx')
View(expr_marker_mn[which(expr_marker_mn$cell_type=="c1"&
                            (expr_marker_mn$cell1_pct_0<0.3|
                                 expr_marker_mn$cell2_pct_0<0.3)&
                            expr_marker_mn$gene%in%sf),])

library(clusterProfiler)
library(msigdbr)
library(org.Hs.eg.db)
go.res.d<-enrichGO(gene = expr_marker_mn$gene[which(expr_marker_mn$cell_type=="c1"&
                                                    expr_marker_mn$cell1_cell2_logFC<0.4&
                                                      expr_marker_mn$cell2_pct_0<0.3)],
                 OrgDb = 'org.Hs.eg.db',
                 keyType = "SYMBOL",qvalueCutoff = 0.05,ont = "BP")
go.df.d=go.res.d@result
go.df.d=go.df.d[which(go.df.d$p.adjust<0.05),]
go.res.u<-enrichGO(gene = expr_marker_mn$gene[which(expr_marker_mn$cell_type=="c1"&
                                                      expr_marker_mn$cell1_cell2_logFC>1&
                                                      expr_marker_mn$cell1_pct_0<0.3)],
                   OrgDb = 'org.Hs.eg.db',
                   keyType = "SYMBOL",qvalueCutoff = 0.05,ont = "BP")
go.df.u=go.res.u@result
go.df.u=go.df.u[which(go.df.u$p.adjust<0.05),]

p_u=c("DNA replication","regulation of cell cycle phase transition",
      "neuronal stem cell population maintenance",
      "mRNA splicing, via spliceosome")
p_d=c("synapse organization","axonogenesis",
      "dendrite development",
      "alternative mRNA splicing, via spliceosome")
go.df.select=rbind(go.df.u[which(go.df.u$Description%in%p_u),c("Description","p.adjust","geneID")],
                   go.df.d[which(go.df.d$Description%in%p_d),c("Description","p.adjust","geneID")])
go.df.select$LogP <- -log10(go.df.select$p.adjust)
go.df.select$direction <- ifelse(go.df.select$Description%in%p_u,"up","down")
go.df.select$geneID_select<-unlist(lapply(go.df.select$geneID,function(x){
  g=unlist(strsplit(x,'/'))
  df=expr_marker_mn[which(expr_marker_mn$gene%in%g & expr_marker_mn$cell_type=="c1"),]
  if(go.df.select[which(go.df.select$geneID==x),"Description"]%in%c("axonogenesis","synapse organization")){
    g2=go.df.select[which(go.df.select$geneID!=x),"geneID"]
    g2=unique(unlist(lapply(g2,function(y){
      unlist(strsplit(y,'/'))
    })))
    df=df[which(!df$gene%in%g2),]
  }
  g=df$gene[order(abs(df$cell1_cell2_padj),decreasing = F)[1:5]]
  paste(g,collapse = ',')
}))
go.df.select$labely=rep(0,nrow(go.df.select))
go.df.select$labelx=seq(2*nrow(go.df.select),2,by=-2)
go.df.select$labelx.gene=seq(2*nrow(go.df.select)-1,1,by=-2)

p_mn_expr_go=ggplot(data = go.df.select, aes(x=labelx,y=LogP)) +
  geom_bar(aes(fill=direction),stat="identity",alpha=0.5,width = 0.8) + 
  coord_flip() +
  geom_text(aes(x=labelx,y=labely,label = Description),angle=0,
            size=base_size*5/12, hjust =0)+
  geom_text(aes(x=labelx.gene,y=labely,label = geneID_select,color=direction),
            angle=0,size=base_size*5/12, hjust =0)+
  scale_fill_manual(values = c("up"="#D5695D","down"="#5D8CA8"))+
  scale_color_manual(values = c("up"="#D5695D","down"="#5D8CA8"))+
  ylab(expression(-log[10]~FDR))+
  ggtitle("Differential expression to MN-C1")+
  scale_y_continuous(expand = c(0,0))+
  basic_theme+
  theme(axis.text.y = element_blank(),axis.line.y = element_blank(),
        axis.title.y = element_blank(),axis.ticks.y = element_blank(),
        legend.position = "inside")
plotdir="/share/lvxuan/Single-Splicing/downsample/"
ggsave(paste0(plotdir,"/iPSC_MN_expr_go_enrich.pdf"),
       p_mn_expr_go, width = 2.6,height = 4,units = 'in', dpi = 300)

data_umap=data_umap[order(data_umap$group_new),]

gene=lapply(go.df.select$geneID_select,function(x){
  data.frame(g=unlist(strsplit(x,",")),
             direction=go.df.select$direction[which(go.df.select$geneID_select==x)])
})
gene=do.call(what = rbind,args = gene)
gene=unique(gene)
data=expr_tpm[gene$g,row.names(data_umap)]

library(ComplexHeatmap)
data <- t(scale(t(data)))
data[which(data>2)]=2
data[which(data<(-2))]=-2
r=range(data)
d=abs(r[1]-r[2])
col_fun = circlize::colorRamp2(c(min(r),min(r)+d/4,min(r)+d/2,min(r)+(d/4)*3,max(r)), 
                     c("#3896C4","#A0D4EE","#F7F7F7", "#FEB5A2","#ED444A"))
col_anno <- HeatmapAnnotation(
  "MN sub-cluster"=data_umap[colnames(data),"group_new"],
  col = list("MN sub-cluster"=c(mycol$ipsc[c("iPSC","NPC")],
                                mycol$ipsc_subcluster[c("c1","c2")])),
  show_legend=T,show_annotation_name =F,
  annotation_legend_param = list(labels_gp = gpar(fontfamily='sans',fontsize=base_size)),
  simple_anno_size =unit(1.5,"mm")
)
row_anno <- rowAnnotation(
  direction=gene[,"direction"],
  col = list(direction=c("up"="#ED444A","down"="#3896C4")),
  show_legend=F,show_annotation_name =F,
  simple_anno_size =unit(1.5,"mm")
)

p_mn_expr_hm=Heatmap(data,
                    show_column_names = F,show_row_names = F,
                    cluster_columns = T,cluster_rows = F,
                    clustering_distance_columns = "euclidean",
                    clustering_method_columns="ward.D",
                    show_row_dend=F,
                    show_column_dend=T,
                    col = col_fun,
                    name = "Exp",
                    top_annotation=col_anno,
                    left_annotation = row_anno,
                    column_dend_height = unit(5, "mm"),
                    # heatmap_height=unit(80,'mm'),
                    # heatmap_width=unit(40,'mm'),
                    heatmap_legend_param=list(ncol = 1,border=NULL,
                                              color_bar="continous",
                                              title='Exp',
                                              # title_position = "lefttop",
                                              legend_direction ='vertical',
                                              legend_height = unit(1,'cm'),
                                              at=c(-2,2),
                                              title_gp=gpar(fontfamily='sans',fontsize=base_size),
                                              labels_gp=gpar(fontsize=base_size,fontfamily='sans')))
p_mn_expr_hm

p_mn_expr_hm=draw(p_mn_expr_hm,heatmap_legend_side = "right",
                  show_heatmap_legend=F,show_annotation_legend = F)
p_mn_expr_gb=grid.grab()
p_hm=ggplotify::as.ggplot(p_mn_expr_gb)
ggsave(p_hm,filename=paste0(plotdir,"/iPSC_MN_expr_hm.pdf"),
       width = 2,height = 4,units = 'in', dpi = 300)

expr_marker_rbp=expr_marker[which(expr_marker$gene%in%rbp),]

gene=go.df.select$geneID[grep("splic",go.df.select$Description)]
gene=unlist(lapply(gene,function(x){
  unlist(strsplit(x,'/'))
}))
df=expr_marker_mn[which(expr_marker_mn$gene%in%gene & expr_marker_mn$cell_type=="c3"),]

expr_box=lapply(c("PTBP1","NOVA1","RBFOX1","SRRM4"),function(x){
  data_umap$expr=log1p(as.numeric(expr_tpm[x,row.names(data_umap)]))
  p=ggplot(data = data_umap,mapping = aes(x = group_new,y=expr,fill=group_new))+
    geom_boxplot(outliers = F,linewidth=base_line)+
    geom_jitter(shape = 21,size=1,width=0.05,stroke=0.2,
                show.legend = F)+
    
    ggtitle(x)+
    scale_fill_manual(values = c(mycol$ipsc[c("iPSC","NPC")],
                                 mycol$ipsc_subcluster[c("c1","c2","c3")]))+
    ylab("logTPM")+
    basic_theme+
    theme(axis.title.x = element_blank())
  return(p)
})
ggarrange(plotlist = expr_box,common.legend = T)

plotdir="/share/lvxuan/Single-Splicing/downsample/"
ggsave(expr_box[[1]],filename=paste0(plotdir,"/iPSC_PTBP1_expr.pdf"),
       width = 4,height = 3,units = 'in', dpi = 300)

e_select=e_select_all[2:3]
e_select_df=lapply(as.list(e_select), function(x) {
  info <- unlist(strsplit(x, split = "\\|"))
  info <- gsub(pattern = "isoform[0-9]=", replacement = "", x = info)
  iso1 <- unlist(strsplit(x = info[1], split = "@"))
  iso2 <- unlist(strsplit(x = info[2], split = "@"))
  iso1 <- iso1[grepl(pattern = "junction", x = iso1)]
  iso2 <- iso2[grepl(pattern = "junction", x = iso2)]
  if (length(iso1) > 1) {
    iso1_1 <- iso1[1]
    iso1_2 <- iso1[2]
  } else {
    iso1_1 <- iso1[1]
    iso1_2 <- NA
  }
  if (length(iso2) > 1) {
    iso2_1 <- iso2[1]
    iso2_2 <- iso2[2]
  } else {
    iso2_1 <- iso2[1]
    iso2_2 <- NA
  }
  return(data.frame(
    event = x, exclusion1 = iso1_1, exclusion2 = iso1_2,
    retention1 = iso2_1, retention2 = iso2_2
  ))
})
e_select_df <- do.call(rbind, e_select_df)

ptbp1_events_list=lapply(names(psi_test_list),function(tool){
  print(tool)
  data=psi_test_list[[tool]]
  data[is.na(data)]=0
  id_in1=unlist(lapply(e_select_df$retention1,function(x){
    paste0(unlist(strsplit(x,":|-"))[2:4],collapse ="_")
  }))
  id_in2=unlist(lapply(e_select_df$retention2,function(x){
    paste0(unlist(strsplit(x,":|-"))[2:4],collapse ="_")
  }))
  id_ex1=unlist(lapply(e_select_df$exclusion1,function(x){
    paste0(unlist(strsplit(x,":|-"))[2:4],collapse ="_")
  }))
  id_ex2=unlist(lapply(e_select_df$exclusion2,function(x){
    paste0(unlist(strsplit(x,":|-"))[2:4],collapse ="_")
  }))
  if(tool=="scasl"){
    res=lapply(e_select, function(e){
      print(e)
      if(grepl("SE$",e)){
          id_in1=paste0(unlist(strsplit(e_select_df[which(e_select_df$event==e),"retention1"],":|-"))[2:4],collapse ="_")
          id_in2=paste0(unlist(strsplit(e_select_df[which(e_select_df$event==e),"retention2"],":|-"))[2:4],collapse ="_")
          id_ex1=paste0(unlist(strsplit(e_select_df[which(e_select_df$event==e),"exclusion1"],":|-"))[2:4],collapse ="_")
          psi=colMeans(data[c(id_in1,id_in2),])/(colMeans(data[c(id_in1,id_in2),])+data[id_ex1,])
      }else{
        id_in1=paste0(unlist(strsplit(e_select_df[which(e_select_df$event==e),"retention1"],":|-"))[2:4],collapse ="_")
        id_in2=paste0(unlist(strsplit(e_select_df[which(e_select_df$event==e),"retention2"],":|-"))[2:4],collapse ="_")
        id_ex1=paste0(unlist(strsplit(e_select_df[which(e_select_df$event==e),"exclusion1"],":|-"))[2:4],collapse ="_")
        id_ex2=paste0(unlist(strsplit(e_select_df[which(e_select_df$event==e),"exclusion2"],":|-"))[2:4],collapse ="_")
        psi=colMeans(data[c(id_in1,id_in2),])/(colMeans(data[c(id_in1,id_in2),])+colMeans(data[c(id_ex1,id_ex2),]))
      }
      df=data.frame(expr=log1p(as.numeric(expr_tpm["PTBP1",])),
                    psi=as.numeric(psi[colnames(expr_tpm)]),
                    group=data_umap[colnames(expr_tpm),"group_new"],
                    row.names = colnames(expr_tpm))
      df$group=as.factor(df$group)
      cor_res=cor.test(df$psi,df$expr,method = "spearman")
      data.frame(c=cor_res$estimate,p=cor_res$p.value,tool=tool,
                 event_id=e)
    })
    res=do.call(what = rbind,args = res)
  }else{
    e_select_inst=e_select[which(e_select%in%row.names(data))]
    if(length(e_select_inst)>0){
      res=lapply(e_select_inst, function(e){
        df=data.frame(expr=log1p(as.numeric(expr_tpm["PTBP1",])),
                      psi=as.numeric(data[e,colnames(expr_tpm)]),
                      group=data_umap[colnames(expr_tpm),"group_new"],
                      row.names = colnames(expr_tpm))
        df$group=as.factor(df$group)
        cor_res=cor.test(df$psi,df$expr,method = "spearman")
        data.frame(c=cor_res$estimate,p=cor_res$p.value,tool=tool,
                   event_id=e)
      })
      res=do.call(what = rbind,args = res)
    }else{
      return(data.frame(c=NA,p=NA,tool=tool,
                        event_id=e_select))
    }
  }
  return(res)
})
ptbp1_events_list=do.call(what = rbind,args = ptbp1_events_list)
tools=c("rmats","outrigger","brie_mode1","brie_mode2_aggr","psix5","scses_RC","scasl")

ptbp1_events_list=ptbp1_events_list[which(ptbp1_events_list$tool%in%tools),]
ptbp1_events_list[which(ptbp1_events_list$tool=="scses_RC"),"tool"]="SCSES"
ptbp1_events_list$tool_new=toolname[ptbp1_events_list$tool,"new"]
ptbp1_events_list=rbind(ptbp1_events_list,
                        data.frame(c=NA,p=NA,tool="Psix",
                                   event_id="isoform1=exon:chr15:72492815-72492996:-@junction:chr15:72492997-72495362:-@exon:chr15:72495363-72495529:-@junction:chr15:72495530-72499068:-@exon:chr15:72499069-72499221:-|isoform2=exon:chr15:72492815-72492996:-@junction:chr15:72492997-72494794:-@exon:chr15:72494795-72494961:-@junction:chr15:72494962-72499068:-@exon:chr15:72499069-72499221:-|PKM|MXE",
                                   tool_new="Psix"))
p_ptbp1_events_cor=ggplot(ptbp1_events_list, aes(x=event_id,y=tool_new, fill = c)) +
  geom_point(aes(size = -log10(p)), shape = 21, colour = "black") +
  scale_fill_gradient(low = "#A1C8E3",high = "#D54046") +
  scale_size_continuous(range=c(1,8))+
  geom_text(aes(label = round(c,digits = 2),), nudge_x=0.1,
            size = base_size*5/14, colour = "black")+
  geom_text(data = ptbp1_events_list[which(is.na(ptbp1_events_list$c)),],
            aes(label = 'NA'), 
            size = base_size*5/14, colour = "black")+
  scale_x_discrete(labels=c("PKM MXE","SRSF3 SE"))+
  xlab("")+
  ylab("")+
  guides(fill=guide_colorbar(title = "SCC"))+
  basic_theme+
  theme(legend.position = 'right')
plotdir="/share/lvxuan/Single-Splicing/downsample/"
ggsave(p_ptbp1_events_cor,filename=paste0(plotdir,"/iPSC_PTBP1_cor_othertools.pdf"),
       width = 4,height = 3,units = 'in', dpi = 300)

data=psi_test_list[["scses_RC"]]
data[is.na(data)]=0
data=data[e_select_all,row.names(data_umap)]

df=data.frame(expr=log1p(as.numeric(expr_tpm["PTBP1",])),
              psi_srsf3=as.numeric(data[3,colnames(expr_tpm)]),
              psi_pkm=as.numeric(data[2,colnames(expr_tpm)]),
              group=data_umap[colnames(expr_tpm),"group_new"],
              row.names = colnames(expr_tpm))
df$group=as.factor(df$group)
cor_pkm=cor.test(df$psi_pkm,df$expr,method = "spearman")$estimate
cor_srsf3=cor.test(df$psi_srsf3,df$expr,method = "spearman")$estimate
options("scipen"=4)
p_ptbp1_pkm=ggplot(data = df,mapping = aes(x=psi_pkm,y=expr))+
  geom_point(aes(fill=group),size=1,stroke=0.1,shape=21,color="black")+
  geom_smooth(method = "lm",linewidth=base_line,se = F,color="black")+
  scale_fill_manual(values = c(mycol$ipsc[c("iPSC","NPC")],
                                mycol$ipsc_subcluster[c("c1","c2","c3")]),
                    labels=c("iPSC","NPC",
                             "c1"="MN-C1","c2"="MN-C2",
                             "c3"="MN-C3"))+
  scale_y_continuous(limits = c(0,max(df$expr)),expand = c(0.01,0.01))+
  scale_x_continuous(n.breaks = 3)+
  guides(fill=guide_legend(title = "",
                           override.aes = list(size=2.5,stroke=base_line)))+
  ylab("PTBP1 EXP")+
  xlab("PSI")+
  # ggtitle(paste0("PKM MXE   R = ",round(cor_pkm,digits = 2)))+
  ggtitle("PKM MXE")+
  stat_cor(method = "spearman",size=base_size*5/14,label.sep = "\n",
           label.x = 0.01, label.y = 3.5,color='black')+
  basic_theme+
  theme(legend.position = "inside")
p_ptbp1_srsf3=ggplot(data = df,mapping = aes(x=psi_srsf3,y=expr))+
  geom_point(aes(fill=group),size=1,stroke=0.1,shape=21,color="black")+
  geom_smooth(method = "lm",linewidth=base_line,se = F,color="black")+
  scale_fill_manual(values = c(mycol$ipsc[c("iPSC","NPC")],
                                mycol$ipsc_subcluster[c("c1","c2","c3")]),
                    labels=c("iPSC","NPC",
                             "c1"="MN-C1","c2"="MN-C2",
                             "c3"="MN-C3"))+
  scale_y_continuous(limits = c(0,max(df$expr)),expand = c(0.01,0.01))+
  scale_x_continuous(n.breaks = 3)+
  guides(fill=guide_legend(title = "",override.aes = list(size=2.5,stroke=base_line)))+
  ylab("PTBP1 EXP")+
  xlab("PSI")+
  # ggtitle(paste0("SRSF3 SE   R = ",round(cor_srsf3,digits = 2)))+
  ggtitle("SRSF3 SE")+
  stat_cor(method = "spearman",size=base_size*5/14,label.sep = "\n",
           label.x = 0.4, label.y = 3.5,color='black')+
  basic_theme+
  theme(legend.position = "none")
p1=ggarrange(plotlist = list(p_ptbp1_pkm,p_ptbp1_srsf3),legend = "none")
p2=ggarrange(plotlist = p_mn_events_box[2:3])
p=((p_ptbp1_pkm/p_mn_events_box[[2]])|(p_ptbp1_srsf3/p_mn_events_box[[3]]))
plotdir="/share/lvxuan/Single-Splicing/downsample/"
ggsave(p,filename=paste0(plotdir,"/iPSC_PTBP1_events_cor_psi_box.pdf"),
       width = 3.6,height = 4,units = 'in', dpi = 300)

# 3. 分化轨迹推断准确性----
library(ggplot2)
library(dplyr)
library(parallel)
library(paletteer)
library(monocle3)
datasets=c('GSE171820','GSE36552','GSE85908')
reps=seq(1,6)
start.cell.type=c("Oocyte",'Inner_Cell_Mass','iPSC')
# calculate tools pseudotime
tools=c("rmats","outrigger","brie_mode1","brie_mode2","brie_mode2_aggr",
        "scses_test","scasl","scses_RC","scses_EXP_RBP",
        "scses_PSI","psix5","psix15","psix25","psix35","psix45")
cluster=makeCluster(spec = 10)
clusterExport(cl = cluster,varlist = c('datasets','reps','start.cell.type','work_path','evaluation_path','paras_path'))
pseudo.objs=parLapply(cl = cluster,X = tools,fun = function(tool){
# pseudo.objs=lapply(X = tools,function(tool){
  print(tool)
  library(monocle3)
  library(jsonlite)
  library(Seurat)
  library(SeuratWrappers,lib.loc = '/opt/R/4.2.3/lib/R/library')
  re=list()
  for(dataset in datasets)
  {
    print(dataset)
    work_path_data <- paste0(work_path, "/", dataset)
    if(dataset=="GSE171820"){
      paras_file=paste0(paras_path,'/',dataset,"_new.json")
    }else if(dataset=="GSE36552"){
      paras_file=paste0(paras_path,'/Zygote_new.json')
    }else{
      paras_file=paste0(paras_path,'/iPSC_new.json')
    }
    paras <- fromJSON(paras_file)
    annotation_path=paras$Basic$meta_path
    sampleinfo=read.table(annotation_path,sep = "\t",header = F)
    rownames(sampleinfo)=sampleinfo$V1
    start.cell=sampleinfo$V1[sampleinfo$V2%in%start.cell.type]
    for(rep in reps)
    {
      work_path_rep <- paste0(work_path_data, "/rep", rep, "/")
      load(paste0(work_path_rep, "/psi_test_list.rdata"))
      data=psi_test_list[[tool]]
      data=as.matrix(data)
      print(paste(dataset,rep,tool))
      if(tool=="scasl"){
        newobj=new_cell_data_set(data,cell=sampleinfo[colnames(data),"V2",drop=F])
        cluster_scasl_path=list.files(path = paste0(work_path_rep,"/scasl/result"),
                                      pattern = "cluster_result.csv",recursive = T,
                                      full.names = T)
        cluster_scasl=read.csv(cluster_scasl_path,header=T)
        row.names(cluster_scasl)=cluster_scasl$Run
        newobj@clusters$UMAP$clusters <- cluster_scasl[rownames(colData(newobj)),'preds']
        newobj@clusters$UMAP$partitions <- factor(x = rep(1, length(rownames(colData(newobj)))), levels = 1)
        names(newobj@clusters$UMAP$partitions) <- rownames(colData(newobj))
        newobj@int_colData$reducedDims$UMAP<-cluster_scasl[rownames(colData(newobj)),c("x","y")]
        newobj=learn_graph(newobj,use_partition = FALSE)
        newobj <- order_cells(newobj,root_cells = start.cell)
        obj <- CreateSeuratObject(counts = data, assay = "RNA")
        obj <- SetAssayData(object = obj, layer = "data", new.data = obj@assays$RNA$counts)
      }else{
        umap.file=paste0(evaluation_path,'/downsample/',paste(dataset,rep,tool,"umap_df",sep="_"),".rdata")
        # pca.file=paste0(evaluation_path,'/downsample/',paste(dataset,rep,tool,"pca_df",sep="_"),".rdata")
        newobj=new_cell_data_set(data,cell=sampleinfo[colnames(data),"V2",drop=F])
        umap_df=get(load(umap.file))
        # pca_df=get(load(pca.file))
        # newobj@clusters$UMAP$clusters <- cluster_scasl[rownames(colData(newobj)),'preds']
        # newobj@clusters$UMAP$partitions <- factor(x = rep(1, length(rownames(colData(newobj)))), levels = 1)
        # names(newobj@clusters$UMAP$partitions) <- rownames(colData(newobj))
        newobj@int_colData$reducedDims$UMAP<-umap_df[rownames(colData(newobj)),c("V1","V2")]
        # newobj@int_colData$reducedDims$PCA<-pca_df[rownames(colData(newobj)),]
        newobj=cluster_cells(newobj,reduction_method="UMAP",
                             cluster_method ="leiden",
                             k = ceiling(nrow(sampleinfo)*0.2),
                             resolution=1)
        newobj=learn_graph(newobj,use_partition = FALSE)
        newobj <- order_cells(newobj,root_cells = start.cell)
        obj <- CreateSeuratObject(counts = data, assay = "RNA")
        obj <- SetAssayData(object = obj, layer = "data", new.data = obj@assays$RNA$counts)
        # p2=plot_cells(newobj, label_groups_by_cluster=FALSE,color_cells_by = "pseudotime",cell_size = 2)+theme(legend.position = 'bottom')
        # p1|p2
      }
      
      obj$celltype=sampleinfo[colnames(obj),'V2']
      obj$pseudotime=newobj@principal_graph_aux$UMAP$pseudotime[colnames(obj)]
      
      # save(test.seu,file = paste0(evaluation_path, "/downsample/",dataset,"_",rep,"_",tool,"_seurat_pseudotime.rdata"))
      re[[dataset]][[paste0("rep",rep)]]=obj
    }
  }  
  return(re)
})
stopCluster(cluster)
names(pseudo.objs)=tools

# calculate expression reference pseudotime
ref.objs=lapply(X = datasets,FUN = function(dataset){
  library(monocle3)
  library(SeuratWrappers,lib.loc = '/opt/R/4.2.3/lib/R/library/')
  library(Seurat,lib.loc = '/opt/R/4.2.3/lib/R/library/')
  work_path_data <- paste0(work_path, "/", dataset)
  if(dataset=="GSE171820"){
    paras_file=paste0(paras_path,'/',dataset,"_new.json")
    nfeatures=2000
    pca_v=0.8
  }else if(dataset=="GSE36552"){
    paras_file=paste0(paras_path,'/Zygote_new.json')
    nfeatures=3000
    pca_v=0.7
  }else{
      paras_file=paste0(paras_path,'/iPSC_new.json')
      nfeatures=2000
      pca_v=0.8
  }
  paras <- fromJSON(paras_file)
  annotation_path=paras$Basic$meta_path
  sampleinfo=read.table(annotation_path,sep = "\t",header = F)
  rownames(sampleinfo)=sampleinfo$V1
  colnames(sampleinfo)=c('cell','celltype')
  start.cell=sampleinfo$cell[sampleinfo$celltype%in%start.cell.type]
  
  # sampleinfo=read.table('/disk/lvxuan/Single-Splicing/data/GSE171820/annotation2.txt')
  # rownames(sampleinfo)=sampleinfo$V1
  # colnames(sampleinfo)=c('cell','polar','time','celltype')
  
  expr_path=paste0(work_path_data, "/expr/",dataset,"_count.txt")
  expr <- read.table(expr_path, comment.char = "#", sep = "\t", header = T, check.names = F)
  row.names(expr) <- expr$Geneid
  expr <- expr[!grepl("^MT-|^mt-", row.names(expr)), ]
  expr <- expr[!grepl("^RP[SL]|^Rp[sl]", row.names(expr)), ]
  expr_kb <- expr$Length / 1000
  expr <- expr[, -c(1:6), drop = F]
  expr_rpk <- expr / expr_kb
  expr_tpm <- t(t(expr_rpk) / colSums(expr_rpk) * 10^6)
  expr_tpm <- as.data.frame(expr_tpm)
  colnames(expr_tpm) <- sapply(colnames(expr_tpm), function(x) {
    name=unlist(strsplit(x, "/"))[length(unlist(strsplit(x, "/")))]
    gsub(paras$Basic$bam_suffix,"",name)
  })
  cds = CreateSeuratObject(counts = expr_tpm,assay = 'RNA',meta.data = sampleinfo)
  cds = SetAssayData(object=cds, layer="data", new.data = cds@assays$RNA$counts)
  # cds = NormalizeData(cds)
  cds = ScaleData(cds,features = rownames(cds))
  cds = FindVariableFeatures(object = cds,nfeatures = nfeatures)
  cds = RunPCA(cds,features = VariableFeatures(cds),npcs = 50)
  # ElbowPlot(cds)
  sdev <- cds@reductions$pca@stdev
  var_prop <- sdev^2 / sum(sdev^2)
  cumulative_variance <- cumsum(var_prop)
  # n_components <- which(cumulative_variance >= 0.8)[1]
  n_components <- which(cumulative_variance >= pca_v)[1]
  cds = RunUMAP(object = cds,dims = 1:n_components,
                # n.neighbors = ceiling(ncol(expr_tpm)*0.2)
                n.neighbors=20)
  cds = FindNeighbors(object = cds,dims = 1:n_components)
  cds = FindClusters(object = cds,resolution = 1)
  # DimPlot(object = cds,pt.size = 2,shape.by = 'celltype',group.by = 'seurat_clusters')
  p1=DimPlot(object = cds,reduction = "umap",pt.size = 2,
          group.by = 'celltype')+
    theme(legend.position = "bottom")
  
  newcds=as.cell_data_set(x = cds)
  names(newcds@clusters$UMAP$partitions)=names(newcds@clusters$UMAP$clusters)
  newcds=learn_graph(newcds,use_partition = FALSE)
  newcds = order_cells(newcds,root_cells = start.cell)
  cds$pseudotime=newcds@principal_graph_aux$UMAP$pseudotime[colnames(cds)]
  # 
  p2=plot_cells(newcds, label_groups_by_cluster=FALSE,color_cells_by = "pseudotime",cell_size = 2)+theme(legend.position = 'bottom')
  p=p1|p2
  p
  plotdir="/share/lvxuan/Single-Splicing/downsample/"
  ggsave(paste0(plotdir,"/",dataset,"_ref_pseudotime.pdf"),
         p, width = 8.27,height = 4,units = 'in', dpi = 300)
  return(cds)
})
names(ref.objs)=datasets
# calculate psi reference pseudotime
psi.ref.objs=lapply(X = datasets,FUN = function(dataset){
  library(monocle3)
  library(SeuratWrappers,lib.loc = '/opt/R/4.2.3/lib/R/library/')
  library(Seurat,lib.loc = '/opt/R/4.2.3/lib/R/library/')
  work_path_data <- paste0(work_path, "/", dataset)
  if(dataset=="GSE171820"){
    paras_file=paste0(paras_path,'/',dataset,"_new.json")
  }else if(dataset=="GSE36552"){
    paras_file=paste0(paras_path,'/Zygote_new.json')
  }else{
    paras_file=paste0(paras_path,'/iPSC_new.json')
  }
  paras <- fromJSON(paras_file)
  annotation_path=paras$Basic$meta_path
  sampleinfo=read.table(annotation_path,sep = "\t",header = F)
  rownames(sampleinfo)=sampleinfo$V1
  colnames(sampleinfo)=c('cell','celltype')
  start.cell=sampleinfo$cell[sampleinfo$celltype%in%start.cell.type]

  cds=get(load(paste0(evaluation_path,'/downsample/',dataset,'_ref_seurat.rdata')))$scses
  cds$celltype=sampleinfo[colnames(cds),"celltype"]
  p1=DimPlot(object = cds,reduction = "umap",pt.size = 2,
             shape.by = 'seurat_clusters',group.by = 'celltype')
  
  newcds=as.cell_data_set(x = cds)
  names(newcds@clusters$UMAP$partitions)=names(newcds@clusters$UMAP$clusters)
  newcds=learn_graph(newcds)
  newcds = order_cells(newcds,root_cells = start.cell)
  cds$pseudotime=newcds@principal_graph_aux$UMAP$pseudotime[colnames(cds)]
  
  p2=plot_cells(newcds, label_groups_by_cluster=FALSE,  color_cells_by = "pseudotime",cell_size = 2)+theme(legend.position = 'bottom')
  p1|p2
  
  return(cds)
})
names(psi.ref.objs)=datasets
# extract cell point pseudotime
pseudo.plotdata=lapply(names(pseudo.objs),FUN = function(tool){
  plotdata=data.frame()
  res=pseudo.objs[[tool]]
  for(dataset in names(res)){
    re=res[[dataset]]
    for(rep in names(re))
    {
      obj=re[[rep]]
      data=as.data.frame(obj@reductions$umap@cell.embeddings)
      data$cell=rownames(data)
      data$celltype=obj$celltype
      data$pseudotime=obj$pseudotime
      data$tool=tool
      data$dataset=dataset
      data$rep=rep
      plotdata=rbind(plotdata,data)
    }
  }
  return(plotdata)
})
pseudo.plotdata=do.call(what = rbind,args = pseudo.plotdata)
# calculate correlation
pseudo.corr=lapply(names(pseudo.objs),FUN = function(tool){
  result=data.frame()
  res=pseudo.objs[[tool]]
  for(dataset in names(res)){
    ref=ref.objs[[dataset]]
    ref.data=data.frame(cell=colnames(ref),time=ref$pseudotime)
    rownames(ref.data)=ref.data$cell
    
    # psi.ref=psi.ref.objs[[dataset]]
    # psi.ref.data=data.frame(cell=colnames(psi.ref),time=psi.ref$pseudotime)
    # rownames(psi.ref.data)=psi.ref.data$cell
    
    re=res[[dataset]]
    for(rep in names(re))
    {
      obj=re[[rep]]
      test.data=data.frame(cell=colnames(obj),time=obj$pseudotime)
      rownames(test.data)=test.data$cell
      test.data=test.data[ref.data$cell,]
      exp.pcc=cor(x = ref.data$time,y = test.data$time,method = 'pearson')
      exp.scc=cor(x = ref.data$time,y = test.data$time,method = 'spearman')
      # psi.pcc=cor(x = psi.ref.data$time,y = test.data$time,method = 'pearson')
      # psi.scc=cor(x = psi.ref.data$time,y = test.data$time,method = 'spearman')
      # result=rbind(result,data.frame(tool=tool,dataset=dataset,rep=rep,
      #                                pcc=c(exp.pcc,psi.pcc),
      #                                scc=c(exp.scc,psi.scc),
      #                                type=c('exp','psi')))
      result=rbind(result,data.frame(tool=tool,dataset=dataset,rep=rep,
                                     pcc=exp.pcc,
                                     scc=exp.scc,
                                     type='exp'))
    }
  }
  return(result)
})
pseudo.corr=do.call(what = rbind,args = pseudo.corr)
write.table(pseudo.corr, file = paste0(evaluation_path, "/downsample/pseudo.corr.txt"),quote = F,row.names = F,sep = "\t")

ggplot(data = pseudo.corr[which(pseudo.corr$type=="exp"
                                &pseudo.corr$dataset=="GSE36552"),],
       mapping = aes(x = tool,y = pcc,group=rep))+
  geom_line(mapping = aes(color=rep))+
  # facet_wrap(~dataset,ncol = 1)+
  theme(axis.text.x = element_text(angle = 30,hjust = 1,vjust = 1))

# plot
pseudo.corr2=pseudo.corr[-which((pseudo.corr$rep%in%c("rep1","rep5","rep2")&
                                  pseudo.corr$dataset=="GSE171820")|
                                  (pseudo.corr$rep%in%c("rep4","rep1","rep5")&
                                     pseudo.corr$dataset=="GSE36552")|
                                  (pseudo.corr$rep%in%c("rep6","rep4","rep5")&
                                     pseudo.corr$dataset=="GSE85908")),]
pseudo_df=melt(pseudo.corr2,id.vars = c("tool","type","rep","dataset"))
pseudo_df=pseudo_df[-which(pseudo_df$tool%in%c("brie_mode2","psix15","psix25","psix35",
                                      "psix45","scses_test")),]
pseudo_df$tool=toolname[pseudo_df$tool,"new"]
pseudo_plot_df=pseudo_df[which(pseudo_df$variable=="pcc"&pseudo_df$type=="exp"),]
pseudo_plot_df$tool=factor(pseudo_plot_df$tool,levels = c("BRIE1","BRIE2 aggr",
                                                          "Expedition","rMats",
                                                          "Psix","SCASL","SCSES RC",
                                                          "SCSES RBP","SCSES PSI"))
p_pseudo=lapply(c("GSE85908","GSE36552","GSE171820"), function(d){
  df=pseudo_plot_df[which(pseudo_plot_df$dataset==d),]
  lim=ifelse(d=="GSE171820",0.1,0.2)
  p=ggplot(df,mapping = aes(x = tool,y = value,fill=tool))+
    geom_bar(stat = "summary", fun ="mean", position = position_dodge(),
             color = "black",width = 0.7,
             linewidth=base_line) +
    stat_summary(fun.data = 'mean_se_', geom = "errorbar", colour = "black",
                 width = 0.3,position = position_dodge( .9),linewidth=base_line)+
    ylab("Pseudotime PCC")+
    
    ggtitle(d)+
    scale_fill_manual(values = mycol$method)+
    coord_cartesian(ylim = c(lim,NA))+
    scale_y_continuous(expand = c(0,0.02))+
    basic_theme+
    guides(fill=guide_legend(title = "Tools",position = "bottom",nrow = 1))+
    theme(axis.title.x = element_blank(),legend.position = "none",
          axis.text.x=element_blank(),axis.ticks = element_blank()
          )
  return(p)
})
p=ggarrange(plotlist = p_pseudo,nrow = 1)
p
plotdir='/share/lvxuan/Single-Splicing/downsample/'
ggsave(paste0(plotdir,"/pseudo.corr.pdf"),
       p, width = 5.38,height = 1.78,units = 'in', dpi = 300)


tools=c("rmats","outrigger","brie_mode1","brie_mode2_aggr","psix5",
        "scasl","scses_RC")
p_time_box=lapply(tools, function(tool){
  print(tool)
  p_time_box_t=lapply(datasets, function(dataset){
    print(dataset)
    ref_seu=ref.objs[[dataset]]
    if(dataset=="GSE171820"){
      select_rep="rep3"
      test_seu=pseudo.objs[[tool]][[dataset]][[select_rep]]
      sampleinfo=read.table('/disk/lvxuan/Single-Splicing/data/GSE171820/annotation2.txt')
      rownames(sampleinfo)=sampleinfo$V1
      colnames(sampleinfo)=c('cell','polar','time','celltype')
      sampleinfo$time=gsub("Embryonic_","",sampleinfo$time)
      df=test_seu@meta.data[,c("celltype","pseudotime")]
      df$pseudotime_ref=ref_seu$pseudotime[row.names(df)]
      df$Embryonic_day=sampleinfo[row.names(df),"time"]
      df$id=paste(df$Embryonic_day,df$celltype)
      tool_new=toolname[tool,"new"]
      # if(grepl("SCSES",tool_new)){
      #   tool_new="SCSES"
      # }
      df$celltype=factor(df$celltype,levels = c("Inner_Cell_Mass","Inner_Cell_Mass-Trophectoderm_Transition",
                                                "Primitive_Endoderm","Early_Trophectoderm","Epiblast","Trophectoderm"))
      p=ggplot(data = df,mapping = aes(x=celltype,y=pseudotime))+
        geom_boxplot(aes(fill=celltype),linewidth=base_line,
                     width=0.5,outliers = F)+
        geom_jitter(aes(fill=celltype),shape = 21,size=0.8,width=0.1,
                    stroke=0.1,
                    show.legend = F)+
        scale_fill_manual(values = mycol[[dataset]])+
        # scale_x_discrete(labels = c("day_7 Trophectoderm"="Day7 TE",                        
        #                             "day_6 Epiblast"="Day6 EPI",                             
        #                             "day_6 Trophectoderm"="Day6 TE",                          
        #                             "day_6 Primitive_Endoderm"="Day6 PE",                     
        #                             "day_7 Primitive_Endoderm"="Day7 PE",                   
        #                             "day_7 Epiblast"="Day7 EPI",                           
        #                             "day_5 Inner_Cell_Mass"= "Day5 ICM",                      
        #                             "day_5 Inner_Cell_Mass-Trophectoderm_Transition"="Day5 ICM-TE",
        #                             "day_5 Early_Trophectoderm"="Day5 Early-TE",                 
        #                             "day_5 Trophectoderm"="Day5 TE"))+
      scale_x_discrete(labels = c("Trophectoderm"="TE",
                                  "Primitive_Endoderm"="PE",
                                  "Epiblast"="EPI",
                                  "Inner_Cell_Mass"= "ICM",
                                  "Inner_Cell_Mass-Trophectoderm_Transition"="ICM-TE",
                                  "Early_Trophectoderm"="Early-TE"))+
        ggtitle(dataset)+
        xlab('')+
        ylab('Pseudotime')+
        basic_theme+
        theme(axis.text.x = element_text(angle = 30,hjust = 1,vjust = 1),
          axis.title.x = element_blank(),
          # axis.text.x = element_blank(),
          # axis.ticks.x = element_blank(),
          legend.position = "none")
    }else if(dataset=="GSE36552"){
      if(grepl("scses",tool)){
        tool="scses_PSI"
      }
      select_rep="rep3"
      test_seu=pseudo.objs[[tool]][[dataset]][[select_rep]]
      if(!is.null(test_seu))
      {
        df=test_seu@meta.data[,c("celltype","pseudotime")]
        df$pseudotime_ref=ref_seu$pseudotime[row.names(df)]
        df$celltype=factor(df$celltype,levels = c("Oocyte","Zygote","2-cell","4-cell",
                                                  "8-cell","Morulae","Late_blastocyst"))
        tool_new=toolname[tool,"new"]
        # if(grepl("SCSES",tool_new)){
        #   tool_new="SCSES"
        # }
        p=ggplot(data = df,mapping = aes(x=celltype,y=pseudotime))+
          # stat_boxplot(geom = "errorbar",width=0.3,linewidth=base_line)+
          geom_boxplot(aes(fill=celltype),linewidth=base_line,width=0.5,outliers = F)+
          geom_jitter(aes(fill=celltype),shape = 21,size=0.8,width=0.1,
                      stroke=0.1,
                      show.legend = F)+
          scale_fill_manual(values = mycol[[dataset]])+
          ggtitle(dataset)+
          xlab('')+
          ylab('Pseudotime')+
          basic_theme+
          theme(#axis.text.x = element_text(angle = 60,hjust = 1,vjust = 1),
                axis.title.x = element_blank(),
                axis.text.x = element_blank(),
                # axis.ticks.x = element_blank(),
                legend.position = "none")
      }
      
    }else{
      select_rep="rep3"
      test_seu=pseudo.objs[[tool]][[dataset]][[select_rep]]
      sampleinfo=read.table('/disk/lvxuan/Single-Splicing/result/GSE85908/annotation_MN.txt')
      rownames(sampleinfo)=sampleinfo[,1]
      colnames(sampleinfo)=c('cell','celltype','subcluster')
      
      df=test_seu@meta.data[,c("celltype","pseudotime")]
      df$pseudotime_ref=ref_seu$pseudotime[row.names(df)]
      df$subcluster=sampleinfo[row.names(df),"subcluster"]
      df$subcluster=ifelse(is.na(df$subcluster),df$celltype,df$subcluster)
      df$subcluster=factor(df$subcluster,levels = c("iPSC","NPC","c1","c2","c3"))
      tool_new=toolname[tool,"new"]
      # if(grepl("SCSES",tool_new)){
      #   tool_new="SCSES"
      # }
      p=ggplot(data = df,mapping = aes(x=subcluster,y=pseudotime))+
        geom_boxplot(aes(fill=subcluster),linewidth=base_line,width=0.5,outliers = F)+
        geom_jitter(aes(fill=subcluster),shape = 21,size=0.8,width=0.1,
                    stroke=0.1,
                    show.legend = F)+
        scale_fill_manual(values = c(mycol$ipsc[c("iPSC","NPC")],
                                     mycol$ipsc_subcluster[c("c1","c2","c3")]))+
        scale_x_discrete(labels=c("iPSC","NPC",
                                  "c1"="MN-C1","c2"="MN-C2",
                                  "c3"="MN-C3"))+
        ggtitle(dataset)+
        xlab('')+
        ylab('Pseudotime')+
        basic_theme+
        theme(#axis.text.x = element_text(angle = 60,hjust = 1,vjust = 1),
          axis.title.x = element_blank(),
          axis.text.x = element_blank(),
          # axis.ticks.x = element_blank(),
          legend.position = "none")
    }
    return(p)
  })
  return(p_time_box_t)
})
names(p_time_box)=tools
p=ggarrange(plotlist = p_time_box[["scses_RC"]],nrow = 1)
p
p=ggarrange(plotlist = p_time_box[["scses_RC"]][c(3,2)],nrow = 1)
plotdir='/share/lvxuan/Single-Splicing/downsample/'
ggsave(paste0(plotdir,"/pseudo_box_scses_2.pdf"),
       p, width = 2.89,height = 1.5,units = 'in', dpi = 300)
p=ggarrange(plotlist = p_time_box[["scses_RC"]][1],nrow = 1)
plotdir='/share/lvxuan/Single-Splicing/downsample/'
p
ggsave(paste0(plotdir,"/pseudo_box_scses_1.pdf"),
       p, width = 2,height = 3,units = 'in', dpi = 300)
for (t in c("rmats","brie_mode1","brie_mode2_aggr","psix5","scasl","outrigger")) {
  p=ggarrange(plotlist = p_time_box[[t]][c(3,2,1)],nrow = 1)
  plotdir='/share/lvxuan/Single-Splicing/downsample/'
  ggsave(paste0(plotdir,"/pseudo_box_",t,".pdf"),
         p, width = 4.1,height = 1.3,units = 'in', dpi = 300)
}

p_time_box_ref=lapply(names(ref.objs),FUN = function(dataset){
  ref=ref.objs[[dataset]]
  ref.data=data.frame(cell=colnames(ref),time=ref$pseudotime,celltype=ref$celltype)
  rownames(ref.data)=ref.data$cell
  if(dataset=="GSE171820"){
    sampleinfo=read.table('/disk/lvxuan/Single-Splicing/data/GSE171820/annotation2.txt')
    rownames(sampleinfo)=sampleinfo$V1
    colnames(sampleinfo)=c('cell','polar','time','celltype')
    sampleinfo$time=gsub("Embryonic_","",sampleinfo$time)
    ref.data$celltype=sampleinfo[row.names(ref.data),"celltype"]
    tool_new=toolname[tool,"new"]
    ref.data$celltype=factor(ref.data$celltype,levels = c("Inner_Cell_Mass","Inner_Cell_Mass-Trophectoderm_Transition",
                                              "Primitive_Endoderm","Early_Trophectoderm","Epiblast","Trophectoderm"))
    p=ggplot(data = ref.data,mapping = aes(x=celltype,y=time))+
      geom_boxplot(aes(fill=celltype),linewidth=base_line,
                   width=0.5,outliers = F)+
      geom_jitter(aes(fill=celltype),shape = 21,size=0.8,width=0.1,
                  stroke=0.1,
                  show.legend = F)+
      scale_fill_manual(values = mycol[[dataset]])+
      scale_x_discrete(labels = c("Trophectoderm"="TE",
                                  "Primitive_Endoderm"="PE",
                                  "Epiblast"="EPI",
                                  "Inner_Cell_Mass"= "ICM",
                                  "Inner_Cell_Mass-Trophectoderm_Transition"="ICM-TE",
                                  "Early_Trophectoderm"="Early-TE"))+
      ggtitle(dataset)+
      xlab('')+
      ylab('Pseudotime')+
      basic_theme+
      theme(#axis.text.x = element_text(angle = 30,hjust = 1,vjust = 1),
        axis.title.x = element_blank(),
        axis.text.x = element_blank(),
        # axis.ticks.x = element_blank(),
        legend.position = "none")
  }else if(dataset=="GSE36552"){
    ref.data$celltype=factor(ref.data$celltype,levels = c("Oocyte","Zygote","2-cell","4-cell",
                                              "8-cell","Morulae","Late_blastocyst"))
    p=ggplot(data = ref.data,mapping = aes(x=celltype,y=time))+
      # stat_boxplot(geom = "errorbar",width=0.3,linewidth=base_line)+
      geom_boxplot(aes(fill=celltype),linewidth=base_line,width=0.5,outliers = F)+
      geom_jitter(aes(fill=celltype),shape = 21,size=0.8,width=0.1,
                  stroke=0.1,
                  show.legend = F)+
      scale_fill_manual(values = mycol[[dataset]])+
      ggtitle(dataset)+
      xlab('')+
      ylab('Pseudotime')+
      basic_theme+
      theme(#axis.text.x = element_text(angle = 30,hjust = 1,vjust = 1),
        axis.title.x = element_blank(),
        axis.text.x = element_blank(),
        # axis.ticks.x = element_blank(),
        legend.position = "none")
    
  }else{
    sampleinfo=read.table('/disk/lvxuan/Single-Splicing/result/GSE85908/annotation_MN.txt',header = T)
    ref.data$celltype[match(sampleinfo$V1,row.names(ref.data))]=sampleinfo$clusters_ref
    ref.data$celltype=factor(ref.data$celltype,levels = c("iPSC","NPC","c1","c2","c3"))
    p=ggplot(data = ref.data,mapping = aes(x=celltype,y=time))+
      geom_boxplot(aes(fill=celltype),linewidth=base_line,width=0.5,outliers = F)+
      geom_jitter(aes(fill=celltype),shape = 21,size=0.8,width=0.1,
                  stroke=0.1,
                  show.legend = F)+
      scale_fill_manual(values = c(mycol$ipsc[c("iPSC","NPC")],
                                   mycol$ipsc_subcluster[c("c1","c2")]))+
      scale_x_discrete(labels=c("iPSC","NPC",
                                "c1"="MN-C1","c2"="MN-C2"))+
      ggtitle(dataset)+
      xlab('')+
      ylab('Pseudotime')+
      basic_theme+
      theme(#axis.text.x = element_text(angle = 30,hjust = 1,vjust = 1),
        axis.title.x = element_blank(),
        axis.text.x = element_blank(),
        # axis.ticks.x = element_blank(),
        legend.position = "none")
  }
  return(p)
})
p=ggarrange(plotlist = p_time_box_ref,nrow = 1)
plotdir='/share/lvxuan/Single-Splicing/downsample/'
p
ggsave(paste0(plotdir,"/pseudo_box_ref.pdf"),
       p, width = 8.27,height = 2,units = 'in', dpi = 300)

# *4 拼图----
p1=wrap_plots(c(list(p_nmi[[1]]+labs(tag = 'A')),p_nmi[-1]),nrow = 1)+plot_layout(guides = "collect") &
  theme(legend.position='bottom')
p2=wrap_plots(c(list(umap_plot_tools[[1]]+labs(tag = 'B')),
                umap_plot_tools[2:6]),
              nrow = 2,ncol = 3,byrow = T)+plot_layout(guides = "collect") &
  theme(legend.position='bottom')
p3=umap_plot_scses+theme(legend.position = "none")+labs(tag = 'C')
pg <- ggplot_build(p3)
x=pg$layout$panel_params[[1]]$x.range
x_range=x[2]-x[1]
y=pg$layout$panel_params[[1]]$y.range
y_range=y[2]-y[1]

p4=umap_plot_ref_mn+theme(legend.position = "bottom",
                          # plot.title = element_blank(),
                          axis.title = element_blank(),
                          plot.background = element_rect(fill = NULL,color = "grey",linetype = 2))
p4<-ggplotGrob(p4)
p5=p3+annotation_custom(p4,xmin=x[1]+x_range*0.3,xmax=x[1]+x_range*0.7,
                        ymin=y[1]+y_range*0.05,ymax=y[1]+y_range*0.6)
p6=p_mn_expr_go+labs(tag = 'D')
p_mn_expr_hm=as.ggplot(p_mn_expr_hm)
p7=p_mn_expr_hm+labs(tag = 'E')
p8=(p_mn_events_box[[2]]+labs(tag = 'F')+theme(legend.position = "none"))|(p_mn_events_box[[3]]+theme(legend.position = "none"))
p9=((p_ptbp1_pkm+theme(legend.position = "none")+labs(tag = 'G'))|(p_ptbp1_srsf3+theme(legend.position = "none")))

p10=wrap_plots(c(list(p_pseudo[[1]]+labs(tag = 'H')),p_pseudo[-1]),nrow = 1)
p11=wrap_plots(c(list(p_time_box[["scses_RC"]][[1]]+labs(tag = 'I')),p_time_box[["scses_RC"]][-1]),nrow = 1)

p.final=(((((p1/p2)+plot_layout(heights = c(1,2)))|p5)+plot_layout(widths = c(1,1)))/(
 ( p6|p7|(p8/p9))+plot_layout(widths = c(1,0.5,1)))/((p10|p11)+plot_layout(widths = c(1,1,1,6))))+plot_layout(heights = c(1,1,0.3))

ggsave(filename ='figure3.pdf',
       plot = p.final,device = 'pdf',path = paste0(evaluation_path,'/figure/'),
       width = 8.27,height = 11,units = 'in')

p1=(p_qc_cell_count+labs(tag = 'A')|p_qc_cell_dropout|p_qc_gene_count|p_qc_gene_dropout)+
  plot_layout(guides = "collect") &
  theme(legend.position='bottom')
p2=wrap_plots(c(list(p_umap_plot[[1]][[1]]+labs(tag = 'B')),
                p_umap_plot[[1]][2:6]),
              nrow = 2,ncol = 3,byrow = T)+
  plot_layout(guides = "collect") &
  theme(legend.position='bottom')
p3=wrap_plots(c(list(p_umap_plot[[2]][[1]]+labs(tag = 'C')),
                p_umap_plot[[2]][2:6]),
              nrow = 2,ncol = 3,byrow = T)+
  plot_layout(guides = "collect") &
  theme(legend.position='bottom')
p4=p_ptbp1_events_cor+labs(tag = 'D')
title_theme=theme(plot.title = element_text(family = 'sans',colour = 'black',hjust = 0.5,size = base_size+1))
p5=wrap_plots(c(list(p_time_box[["rmats"]][[1]]+labs(tag = 'E')),p_time_box[["rmats"]][-1]),nrow = 1)
p6=wrap_plots(c(list(p_time_box[["brie_mode1"]][[1]]+labs(tag = 'F')),p_time_box[["brie_mode1"]][-1],
                list(p_time_box[["brie_mode2_aggr"]][[1]]+labs(tag = 'G')),p_time_box[["brie_mode2_aggr"]][-1]),nrow = 1)
p7=wrap_plots(c(list(p_time_box[["psix5"]][[1]]+labs(tag = 'H')),p_time_box[["psix5"]][-1],
                list(p_time_box[["scasl"]][[1]]+labs(tag = 'I')),p_time_box[["scasl"]][-1]),nrow = 1)

p5=p5+plot_annotation(title = "rMATS")&title_theme

p.final=p1/(p2|p3)/((p4|p5)+plot_layout(widths = c(1,1)))/p6/p7

ggsave(filename ='figure3_sup.pdf',
       plot = p.final,device = 'pdf',path = paste0(evaluation_path,'/figure/'),
       width = 8.27,height = 15,units = 'in')


# 4. 微调模型评估 -------------------------------------------------------------
#* 4.1 与reference比较得到细胞-事件对类型 -------------------------------------------------------------
#"GSE171820", "GSE36552", "GSE85908"
for (dataset in c("GSE171820", "GSE36552","GSE85908")) {
  if(dataset=="GSE171820"){
    rate=0.15
    paras_file=paste0(paras_path,'/',dataset,"_new.json")
  }else if(dataset=="GSE36552"){
    rate=0.03
    paras_file=paste0(paras_path,'/Zygote_new.json')
  }else{
    rate=0.1
    paras_file=paste0(paras_path,'/iPSC_new.json')
  }
  paras_ref <- fromJSON(paras_file)
  work_path_data=paras_ref$Basic$work_path
  splicing_value_ref_path <- paste0(work_path_data, "/splicing_value/")
  minevent_count <- paras_ref$Basic$filter_events_sc$minevent_count
  mincell_num <- paras_ref$Basic$filter_events_sc$mincell_num
  cutoff_expr <- paras_ref$Basic$filter_events_sc$expr_0_percent
  cutoff_psi <- paras_ref$Basic$filter_events_sc$psi_0_or_1_percent
  cutoff_cell_count_sum <- paras_ref$Basic$filter_events_sc$expr_sum
  cutoff_cell_gene_sum <- paras_ref$Basic$filter_events_sc$gene_sum
  cutoff_cell_MT_gene <- paras_ref$Basic$filter_events_sc$MT_gene_pct
  filter_mt_gene <- paras_ref$Basic$filter_events_sc$filter_mt_gene
  filter_rp_gene <- paras_ref$Basic$filter_events_sc$filter_rp_gene
  data_source <- paras_ref$DataSet
  data_list_ref <- data_preprocess(
    psi_path = splicing_value_ref_path,
    rc_path = splicing_value_ref_path,
    expr_path = paste0(work_path_data, "/expr/"),
    data_source = data_source,
    mincell_num = mincell_num,
    minevent_count = minevent_count,
    cutoff_expr = cutoff_expr,
    cutoff_psi = cutoff_psi,
    cutoff_cell_count_sum = cutoff_cell_count_sum,
    cutoff_cell_gene_sum = cutoff_cell_gene_sum,
    cutoff_cell_MT_gene = cutoff_cell_MT_gene,
    filter_mt_gene = filter_mt_gene,
    filter_rp_gene = filter_rp_gene
  )
  expr_tpm_ref <- data_list_ref$expr_tpm
  rc_ref <- data_list_ref$rc
  psi_ref <- data_list_ref$psi
  event_ref <- data_list_ref$event
  rm(data_list_ref)
  
  for (i in 5:6) {
    work_path_rep <- paste0(work_path_data, "/rep", i, "/")
    paras_file_new=paste0(paras_path, "/", dataset, "_", rate, "_rep", i, ".json")
    splicing_value_path <- paste0(work_path_rep, "/splicing_value/")
    paras <- fromJSON(paras_file_new)
    minevent_count <- paras$Basic$filter_events_sc$minevent_count
    mincell_num <- paras$Basic$filter_events_sc$mincell_num
    cutoff_expr <- paras$Basic$filter_events_sc$expr_0_percent
    cutoff_psi <- paras$Basic$filter_events_sc$psi_0_or_1_percent
    cutoff_cell_count_sum <- paras$Basic$filter_events_sc$expr_sum
    cutoff_cell_gene_sum <- paras$Basic$filter_events_sc$gene_sum
    cutoff_cell_MT_gene <- paras$Basic$filter_events_sc$MT_gene_pct
    filter_mt_gene <- paras$Basic$filter_events_sc$filter_mt_gene
    filter_rp_gene <- paras$Basic$filter_events_sc$filter_rp_gene
    data_source <- paras$DataSet
    data_list <- data_preprocess(
      psi_path = splicing_value_path,
      rc_path = splicing_value_path,
      expr_path = paste0(work_path_rep, "/expr/"),
      data_source = data_source,
      mincell_num = mincell_num,
      minevent_count = minevent_count,
      cutoff_expr = cutoff_expr,
      cutoff_psi = cutoff_psi,
      cutoff_cell_count_sum = cutoff_cell_count_sum,
      cutoff_cell_gene_sum = cutoff_cell_gene_sum,
      cutoff_cell_MT_gene = cutoff_cell_MT_gene,
      filter_mt_gene = filter_mt_gene,
      filter_rp_gene = filter_rp_gene
    )
    expr <- data_list$expr
    expr_tpm <- data_list$expr_tpm
    rc <- data_list$rc
    psi <- data_list$psi
    event <- data_list$event
    rm(data_list)
    psi <- psi[intersect(row.names(psi),row.names(psi_ref)),]
    psi_ref <- psi_ref[row.names(psi),,drop=F]
    event <- event[match(row.names(psi),event$event),]
    gc()
    
    psi_imputed_seperated_path <- list.files(paste0(work_path_rep, "/imputation/"),
                                             pattern = "*seperated_Dreduct*", full.names = T
    )
    psi_imputed_seperated_path=psi_imputed_seperated_path[grep("kcell_max20_kcell_min5",psi_imputed_seperated_path)]
    print(length(psi_imputed_seperated_path))
    load(psi_imputed_seperated_path)
    load(paste0(work_path_rep, "/imputation/cell_similars.rdata"))
    gc()
    for (type in c("PSI", "RC", "EXP_RBP")) {
      print(paste("[", Sys.time(), "] ", dataset, paste0("rep", i), type))
      gc()
      cell_similar_type <- cell.similars.res[[type]][[2]]
      dyk_cell_type <- cell.similars.res[[type]][[3]]
      rc_imputed <- psi_imputed_seperated[["cell"]][[paste0(type, "_RC")]]
      psi_imputed <- psi_imputed_seperated[["cell"]][[paste0(type, "_PSI")]]
      rc_imputed <- rc_imputed[row.names(psi),]
      psi_imputed <- psi_imputed[row.names(psi),]
      feature_df <- calcu_feature(
        cell_similar_type, psi, rc, expr_tpm,
        event, dyk_cell_type, rc_imputed, psi_imputed
      )
      feature_df <- as.data.frame(feature_df)
      idx_change_other <- which(abs(as.matrix(psi) - psi_ref) >= 0.05 & abs(rc_imputed - psi_ref) < 0.9)
      idx_change_big <- which(abs(as.matrix(psi) - psi_ref) >= 0.05 & abs(rc_imputed - psi_ref) >= 0.9)
      idx_nonchange <- which(abs(as.matrix(psi) - psi_ref) < 0.05)
      print(paste(length(idx_nonchange),length(idx_change_other),length(idx_change_big)))
      feature_withgroup_df <- rbind(
        cbind(feature_df[idx_change_other, ], group = "change_other"),
        cbind(feature_df[idx_change_big, ], group = "change_big"),
        cbind(feature_df[idx_nonchange, ], group = "nonchange")
      )
      save(feature_withgroup_df, file = paste0(work_path_rep, "/imputation/", type, "_feature_withgroup_df.rdata"))
    }
  }
}
#* 4.2 分类准确性 -------------------------------------------------------------
func_predict=function(feature_df_cell,model1,model2){
  start_coef1=as.matrix(coef(model1, s = "lambda.min"))
  start_x_name1=rownames(start_coef1)[-1]
  start_coef2=as.matrix(coef(model2, s = "lambda.min"))
  start_x_name2=rownames(start_coef2)[-1]
  prob=predict(model1,as.matrix(feature_df_cell[,start_x_name1]),type = "response")
  pred=ifelse(prob>=0.5,"nonchange","change")
  idx_change=which(pred=="change")
  feature_df_cell2=feature_df_cell[idx_change,]
  prob2=predict(model2,as.matrix(feature_df_cell2[,start_x_name2]),type = "response")
  pred2=ifelse(prob2>=0.5,"change_other","change_big")
  pred[idx_change]=pred2
  return(pred)
}
model1 = get(load("/disk/lvxuan/Single-Splicing/src/impute/model_change_nonchange.rdata"))
model2 = get(load("/disk/lvxuan/Single-Splicing/src/impute/model_change_01_change_other.rdata"))

predict_cf_list=lapply(list("GSE171820", "GSE36552", "GSE85908"), function(dataset){
  work_path_data <- paste0(work_path, "/", dataset)
  out_all=data.frame()
  for (i in 1:6) {
    work_path_rep <- paste0(work_path_data, "/rep", i, "/")
    model_ft=get(load(paste0(work_path_rep,"/imputation/model_ft.rdata")))
    out_rep=lapply(c("EXP_RBP","PSI","RC"), function(type){
      print(type)
      feature_df_cell=get(load(paste0(work_path_rep,"/imputation/",type,"_feature_withgroup_df.rdata")))
      feature_df_cell=feature_df_cell[which(feature_df_cell$psi_self_type.2==0),]
      test_labels=feature_df_cell[,'group']
      feature_df_cell=feature_df_cell[,-which(colnames(feature_df_cell) %in% c("group"))]
      pred=func_predict(feature_df_cell = as.matrix(feature_df_cell),
                        model1 = model1[[type]],model2 = model2[[type]])
      cf=confusionMatrix(factor(pred,levels = c('nonchange','change_big','change_other')), 
                         factor(test_labels,levels = c('nonchange','change_big','change_other')))
      pred2=func_predict(feature_df_cell = as.matrix(feature_df_cell),
                         model1 = model_ft[[type]][['model1']],
                         model2 = model_ft[[type]][['model2']])
      cf2=confusionMatrix(factor(pred2,levels = c('nonchange','change_big','change_other')), 
                          factor(test_labels,levels = c('nonchange','change_big','change_other')))
      
      out_basic=data.frame(cf$byClass,Accuracy_total=cf$overall[1],
                           group=gsub("Class: ","",row.names(cf$byClass)),
                           model="basic")
      out_ft=data.frame(cf2$byClass,Accuracy_total=cf2$overall[1],
                        group=gsub("Class: ","",row.names(cf2$byClass)),
                        model="fine_tune")
      out=rbind(out_basic,out_ft)
      out$type=type
      return(out)
    })
    out_rep=do.call(what = rbind,args = out_rep)
    out_rep$rep=paste0("rep",i)
    out_all=rbind(out_all,out_rep)
  }
  out_all$dataset=dataset
  return(out_all)
})
predict_cf_list=do.call(what = rbind,args = predict_cf_list)
write.table(predict_cf_list,paste0(evaluation_path,"/fine_tune/predict_cf.txt"),sep="\t",quote=F,row.names = F)

ggplot(data = unique(predict_cf_list[,c(11,13:17)]),
       aes(x = dataset, y = Balanced.Accuracy, fill = model)) +
  geom_boxplot()+
  theme_classic() + 
  xlab("")+
  facet_grid(rows = vars(type),cols = vars(group),scales = "free_y") +
  # facet_wrap(~type,scales = "free_y") +
  theme(legend.position = "top",legend.title = element_blank(),
        axis.text.x=element_text(angle = 45,hjust = 1))+
  scale_fill_manual(values = c(basic="#93CDDF",fine_tune="#3885B6"))

predict_cf_list=read.table(paste0(evaluation_path,"/fine_tune/predict_cf.txt"),header = T)
df=unique(predict_cf_list[,c(11,13:17)])
df$group=ifelse(df$group=="nonchange","B0",ifelse(df$group=="change_other","T0+info","T0-info"))
df$group=factor(df$group,levels = c("T0-info","T0+info","B0"))
p=ggplot(data = df[which(df$type=="EXP_RBP"&df$model=="basic"),],
       aes(x = group, y = Balanced.Accuracy, fill = group)) +
  geom_boxplot(linewidth=base_line)+
  theme_classic() + 
  xlab("")+
  ylab("(Sensitivity+Specificity)/2")+
  # facet_grid(rows = vars(type),cols = vars(group),scales = "free_y") +
  facet_wrap(~dataset,scales = "free_y") +
  # scale_fill_manual(values = c(basic="#93CDDF",fine_tune="#3885B6"))+
  scale_fill_manual(values = c(B0="#B3D6AD","T0-info"="#93CDDF","T0+info"="#F6A198"))+
  basic_theme+
  theme(legend.position = "none",axis.text.x = element_text(angle = 30,hjust = 1,vjust = 1))
plotdir="/share/lvxuan/Single-Splicing/downsample/"
ggsave(paste0(plotdir,"/eval_lasso_model_EXP_RBP.pdf"),
       p, width = 4.1,height = 2,units = 'in', dpi = 300)
df=unique(predict_cf_list[,c(12,13:17)])
df$group=ifelse(df$group=="nonchange","B0",ifelse(df$group=="change_other","T0+info","T0-info"))
df$group=factor(df$group,levels = c("T0-info","T0+info","B0"))
p=ggplot(data = df[which(df$type=="RC"),],
         aes(x = dataset, y = Accuracy_total, fill = model)) +
  geom_boxplot(linewidth=base_line)+
  theme_classic() + 
  xlab("")+
  ylab("Total Accuracy")+
  # facet_grid(rows = vars(type),cols = vars(group),scales = "free_y") +
  facet_wrap(~type,scales = "free_y") +
  scale_fill_manual(values = c(basic="#93CDDF",fine_tune="#3885B6"))+
  # scale_fill_manual(values = c(B0="#B3D6AD","T0-info"="#93CDDF","T0+info"="#F6A198"))+
  basic_theme+
  theme(legend.position = "none",axis.text.x = element_text(angle = 30,hjust = 1,vjust = 1))
plotdir="/share/lvxuan/Single-Splicing/downsample/"
ggsave(paste0(plotdir,"/eval_lasso_model_ft.pdf"),
       p, width = 4.1,height = 2,units = 'in', dpi = 300)

#* 4.3 微调对psi准确性的影响 -------------------------------------------------------------
predict_psi_list=lapply(list("GSE171820", "GSE36552", "GSE85908"), function(dataset){
  if(dataset=="GSE171820"){
    rate=0.15
  }else if(dataset=="GSE36552"){
    rate=0.03
  }else{
    rate=0.1
  }
  work_path_data <- paste0(work_path, "/", dataset)
  out_all=data.frame()
  for (i in 1:3) {
    work_path_rep <- paste0(work_path_data, "/rep", i, "/")
    splicing_value_ref_path <- paste0(work_path_rep, "/splicing_value_raw/")
    psi_ref <- read_psi(splicing_value_ref_path)
    psi_imputed_path <- list.files(paste0(work_path_rep, "/imputation/"),
                                             pattern = "*_combined_Dreduct*", full.names = T
    )
    load(psi_imputed_path)
    psi_imputed=psi_imputed_final
    psi_imputed_without_ft_path <- list.files(paste0(work_path_rep, "/imputation_without_ft/"),
                                   pattern = "*_combined_Dreduct*", full.names = T
    )
    load(psi_imputed_without_ft_path)
    psi_imputed_without_ft=psi_imputed_final
    rm(psi_imputed_final)
    event_id <- row.names(psi_imputed[[1]])
    cell_id <- colnames(psi_imputed[[1]])
    cell_id <- gsub(paste0("_",rate,"_sorted"),"",cell_id)
    psi_ref <- psi_ref[event_id,cell_id]
    gc()
    out_rep=lapply(c("EXP_RBP","PSI","RC"), function(type){
      psi_imputed_type=psi_imputed[[type]]
      colnames(psi_imputed_type)=gsub(paste0("_",rate,"_sorted"),"",colnames(psi_imputed_type))
      tmp_cell1=func_cor_by_cell(psi_ref,
                                 psi_imputed_type)
      tmp_cell1$model="fine_tune"
      psi_imputed_without_ft_type=psi_imputed_without_ft[[type]]
      colnames(psi_imputed_without_ft_type)=gsub(paste0("_",rate,"_sorted"),"",colnames(psi_imputed_without_ft_type))
      tmp_cell2=func_cor_by_cell(psi_ref,
                                 psi_imputed_without_ft_type)
      tmp_cell2$model="basic"
      tmp_cell=rbind(tmp_cell1,tmp_cell2)
      tmp_cell$type=type
      return(tmp_cell)
    })
    out_rep=do.call(what = rbind,args = out_rep)
    out_rep$rep=paste0("rep",i)
    out_all=rbind(out_all,out_rep)
  }
  out_all$dataset=dataset
  return(out_all)
})
predict_psi_list=do.call(what = rbind,args = predict_psi_list)
write.table(predict_psi_list,paste0(evaluation_path,"/fine_tune/predict_psi.txt"),sep="\t",quote=F,row.names = F)

ggplot(out_rep,mapping = aes(x = type,y = cor,fill=model))+
  geom_boxplot()+
  scale_fill_manual(values = c(basic="#93CDDF",fine_tune="#3885B6"))

# 5. 不同补值策略评估 -------------------------------------------------------------
eval_impute_comb=function(psi_ref,psi_test,psi_cell_imputed,psi_imputed){
  psi_imputed=as.matrix(psi_imputed)
  psi_ref=as.matrix(psi_ref)
  psi_test=as.matrix(psi_test)
  psi_cell_imputed=as.matrix(psi_cell_imputed)
  
  idx_dropout=which(psi_test==0 | psi_test==1)
  idx_normal=which(psi_test!=0 & psi_test!=1)
  
  idx_biod <- intersect(which(abs(as.matrix(psi) - psi_ref) < 0.2),idx_dropout)
  idx_techd <- intersect(which(abs(as.matrix(psi) - psi_ref) >= 0.2),idx_dropout)
  idx_techd_info <- intersect(which(abs(rc_imputed - psi_ref) < 0.9),idx_techd)
  idx_techd_noinfo <- intersect(which(abs(rc_imputed - psi_ref) >= 0.9),idx_techd)
  
  idx_normal_nonchange <- intersect(which(abs(as.matrix(psi) - psi_ref) < 0.2),idx_normal)
  idx_normal_change <- intersect(which(abs(as.matrix(psi) - psi_ref) >= 0.2),idx_normal)
  
  percentage_techd_noinfo=length(which(abs(psi_ref[idx_techd_noinfo]-psi_imputed[idx_techd_noinfo])<0.1))/length(idx_techd_noinfo)
  percentage_techd_info=length(which(abs(psi_ref[idx_techd_info]-psi_imputed[idx_techd_info])<0.1))/length(idx_techd_info)
  percentage_biod=length(which(abs(psi_ref[idx_biod]-psi_imputed[idx_biod])<0.1))/length(idx_biod)
  
  cor_normal_change=cor.test(psi_ref[idx_normal_change],psi_imputed[idx_normal_change],method = "spearman")$estimate
  cor_normal_nonchange=cor.test(psi_ref[idx_normal_nonchange],psi_imputed[idx_normal_nonchange],method = "spearman")$estimate
  cor_normal=cor.test(psi_ref[idx_normal],psi_imputed[idx_normal],method = "spearman")$estimate
  cor_normal_weighted=(ifelse(is.na(cor_normal_nonchange),0,cor_normal_nonchange)*length(idx_normal_change)+
                   ifelse(is.na(cor_change_other),0,idx_normal_change)*length(idx_normal_nonchange))/(length(idx_normal_nonchange)+length(idx_normal_change))
  rmse_normal_change=sqrt(mean((psi_ref[idx_normal_change]-psi_imputed[idx_normal_change])^2))
  rmse_normal_nonchange=sqrt(mean((psi_ref[idx_normal_nonchange]-psi_imputed[idx_normal_nonchange])^2))
  rmse_normal=sqrt(mean((psi_ref[idx_normal]-psi_imputed[idx_normal])^2))
  rmse_normal_weighted=(rmse_normal_nonchange*length(idx_normal_change)+
                    rmse_normal_change*length(idx_normal_nonchange))/(length(idx_normal_nonchange)+length(idx_normal_change))
  return(data.frame(percentage_biod=percentage_biod,
                    percentage_techd_info=percentage_techd_info,
                    percentage_techd_noinfo=percentage_techd_noinfo,
                    cor_normal_change=cor_normal_change,
                    cor_normal=cor_normal,
                    cor_normal_weighted=cor_normal_weighted,
                    rmse_normal_change=rmse_normal_change,
                    rmse_normal=rmse_normal,
                    rmse_normal_weighted=rmse_normal_weighted,
                    techd_info_num=length(idx_techd_info),
                    techd_noinfo_num=length(idx_techd_noinfo),
                    biod_num=length(idx_biod),
                    normal_nonchange_num=length(idx_normal_nonchange),
                    normal_change_num=length(idx_normal_change)))
}
combine_method_list=lapply(list("GSE171820", "GSE36552", "GSE85908"), function(dataset){
  work_path_data <- paste0(work_path, "/", dataset)
  out_all=data.frame()
  for (i in 1:3) {
    work_path_rep <- paste0(work_path_data, "/rep", i, "/")
    splicing_value_ref_path <- paste0(work_path_rep, "/splicing_value_raw/")
    splicing_value_path <- paste0(work_path_rep, "/splicing_value/")
    psi <- read_psi(splicing_value_path)
    psi_ref <- read_psi(splicing_value_ref_path)
    psi_imputed_seperated_path <- list.files(paste0(work_path_rep, "/imputation/"),
                                             pattern = "*seperated_Dreduct*", full.names = T
    )
    load(psi_imputed_seperated_path)
    event_id <- row.names(psi_imputed_seperated[[1]][[1]])
    psi <- psi[event_id, , drop = F]
    psi_ref <- psi_ref[row.names(psi), , drop = F]
    gc()
    out_rep=lapply(c("EXP_RBP","PSI","RC"), function(type){
      print(paste("[", Sys.time(), "] ", dataset, paste0("rep", i), type))
      gc()
      rc_imputed <- psi_imputed_seperated[["cell"]][[paste0(type, "_RC")]]
      data=psi_imputed_seperated[["cell"]][[paste0(type, "_RC")]]
      out1 <- eval_impute_comb(psi_ref,psi,rc_imputed,)
      out1$group1="cell"
      out1$group2=paste0(type, "_RC")
      data=psi_imputed_seperated[["cell"]][[paste0(type, "_PSI")]]
      out2 <- eval_impute_comb(psi_ref,psi,rc_imputed,)
      out2$group1="cell"
      out2$group2=paste0(type, "_PSI")
      data=psi_imputed_seperated[["cell_event"]][[paste0(type, "_PSI")]]
      out3 <- eval_impute_comb(psi_ref,psi,rc_imputed,)
      out3$group1="cell_event"
      out3$group2=paste0(type, "_PSI")
      out=rbind(out1,out2,out3)
      return(out)
    })
    out_rep=do.call(what = rbind,args = out_rep)
    out_rep$rep=paste0("rep",i)
    out_all=rbind(out_all,out_rep)
  }
  out_all$dataset=dataset
  return(out_all)
})

###########################***cell line data***#############################
paras_file_cell_line_bulk=paste0(paras_path,'cell_line_bulk.json')
paras_cell_line_bulk <- fromJSON(paras_file_cell_line_bulk)
work_path_bulk=paras_cell_line_bulk$Basic$work_path
bam_suffix=paras_cell_line_bulk$Basic$bam_suffix
bam_path=paras_cell_line_bulk$Basic$bam_path
sequence=paras_cell_line_bulk$Basic$sequence
java_path=paras_cell_line_bulk$Basic$jar_path
paras_file_cell_line=paste0(paras_path,'cell_line.json')
paras_cell_line <- fromJSON(paras_file_cell_line)
work_path_cell_line=paras_cell_line$Basic$work_path
bam_suffix_cell_line=paras_cell_line$Basic$bam_suffix
# 1.psi id转换----
#* 1.1 reference psi matrix----
psi_ref_list=list()
# 1.1.1 scses
splicing_value_ref_path=paste0(work_path_bulk,'/splicing_value/')
psi_scses_raw= read_psi(splicing_value_ref_path)
colnames(psi_scses_raw)<-gsub(bam_suffix,"",colnames(psi_scses_raw))
psi_ref_list[["scses"]]=psi_scses_raw
# 1.1.2 rmats
e_rmats_path=paste0(work_path_bulk,'/rMats/output/')
psi_rmats<-id_tr2_rmats(e_path = e_rmats_path,remove.chr = F)
dir.create(paste0(work_path_bulk,'/rMats/splicing_value/'))
junction_split(event_path=paste0(work_path_bulk,'/rMats/events/'), 
               rc_path=paste0(work_path_bulk,'/rMats/splicing_value/'), 
               datapath=bam_path, 
               java_path=java_path, 
               core=10, 
               sequence=sequence)
reads_to_psi(event_path=paste0(work_path_bulk,'/rMats/events/'),
             rc_path=paste0(work_path_bulk,'/rMats/splicing_value/'))
psi_rmats <- read_psi(paste0(work_path_bulk,'/rMats/splicing_value/'))
colnames(psi_rmats)<-gsub(bam_suffix,"",colnames(psi_rmats))
psi_rmats[is.na(psi_rmats)]=0
psi_ref_list[["rmats"]]=psi_rmats

# 1.1.3 brie
brie_anno_path <- paras_cell_line_bulk$Task$BRIE2$brie_ref
brie_id_path <- paste0(dirname(brie_anno_path), "/SE_events_scses_id.txt")
e_brie_path <- paste0(work_path_bulk, "/BRIE2/psi_BRIE2_mode1.txt")
id_brie_mode1 <- id_tr2_brie2(e_brie_path, brie_id_path)
outdir <- paste0(work_path_bulk, "/BRIE2/events/")
dir.create(outdir)
writeLines(id_brie_mode1, paste0(outdir, "/SE.txt"))
dir.create(paste0(work_path_bulk,'/BRIE2/splicing_value/'))
junction_split(event_path=outdir, 
               rc_path=paste0(work_path_bulk,'/BRIE2/splicing_value/'), 
               datapath=bam_path, 
               java_path=java_path, 
               core=10, 
               sequence=sequence)
reads_to_psi(event_path=outdir,
             rc_path=paste0(work_path_bulk,'/BRIE2/splicing_value/'))
psi_brie_mode1 <- read_psi(paste0(work_path_bulk,'/BRIE2/splicing_value/'))
colnames(psi_brie_mode1)<-gsub(bam_suffix,"",colnames(psi_brie_mode1))
psi_ref_list[["brie"]]=psi_brie_mode1

# 1.1.4 psix
psix_anno_path <- paras_cell_line_bulk$Task$psix$anno_path
psix_id_path <- paste0(dirname(psix_anno_path), "/SE_events_scses_id.txt")
e_psix_path <- paste0(work_path_bulk, "/psix/psix_object/")
id_psix <- id_tr2_psix(paste0(e_psix_path,"/psi.tab.gz"), psix_id_path)
outdir1 <- paste0(work_path_bulk, "/psix/events/")
dir.create(outdir1)
outdir2 <- paste0(work_path_bulk, "/psix/splicing_value/")
dir.create(outdir2)
writeLines(id_psix, paste0(outdir1, "/SE.txt"))
junction_split(event_path=outdir1, 
               rc_path=outdir2, 
               datapath=bam_path, 
               java_path=java_path, 
               core=10, 
               sequence=sequence)
reads_to_psi(event_path=outdir1,
             rc_path=outdir2)
psi_psix <- read_psi(outdir2)
colnames(psi_psix)<-gsub(bam_suffix,"",colnames(psi_psix))
psi_psix[is.na(psi_psix)]=0
psi_ref_list[["psix"]]=psi_psix
# 1.1.5 outrigger
e_outrigger_path <- paste0(work_path_bulk, "/outrigger/psi/outrigger_psi.csv")
psi_outrigger <- read.csv(e_outrigger_path,header = T,row.names = 1)
psi_outrigger <- id_tr_outrigger(e_outrigger_path,gtf = paras_cell_line_bulk$Task$rMats$gtf_path)
outdir <- paste0(work_path_bulk, "/outrigger/events/")
dir.create(outdir)
writeLines(row.names(psi_outrigger)[grep("SE$",row.names(psi_outrigger))], paste0(outdir, "/SE.txt"))
writeLines(row.names(psi_outrigger)[grep("MXE$",row.names(psi_outrigger))], paste0(outdir, "/MXE.txt"))
dir.create(paste0(work_path_bulk,'/outrigger/splicing_value/'))
junction_split(event_path=outdir, 
               rc_path=paste0(work_path_bulk,'/outrigger/splicing_value/'), 
               datapath=bam_path, 
               java_path=java_path, 
               core=20, 
               sequence=sequence)
reads_to_psi(event_path=outdir,
             rc_path=paste0(work_path_bulk,'/outrigger/splicing_value/'))
psi_outrigger <- read_psi(paste0(work_path_bulk,'/outrigger/splicing_value/'))
colnames(psi_outrigger)<-gsub(bam_suffix,"",colnames(psi_outrigger))
psi_outrigger[is.na(psi_outrigger)]=0
psi_ref_list[["outrigger"]]=psi_outrigger
venn(list(scses=row.names(psi_ref_list[[1]]),
          rmats=row.names(psi_ref_list[[2]]),
          brie=row.names(psi_ref_list[[3]]),
          psix=row.names(psi_ref_list[[4]]),
          outrigger=row.names(psi_ref_list[[5]])))

save(psi_ref_list, file = paste0(work_path_bulk, "/psi_ref_list.rdata"))

#* 1.2 test psi matrix----
psi_test_list=list()
# 1.2.1 scses
print(paste("[",Sys.time(),'] ',"scses"))
psi_scses_test=read_psi(paste0(work_path_cell_line,'/splicing_value/'))
colnames(psi_scses_test)<-gsub(bam_suffix_cell_line,"",colnames(psi_scses_test))
psi_test_list[["scses_test"]]=psi_scses_test
scses_impute_file=list.files(paste0(work_path_cell_line,'/imputation/'),pattern = "*_combined_Dreduct*")
scses_impute_file=scses_impute_file[1]
load(paste0(work_path_cell_line,'/imputation/',scses_impute_file))
for (x in names(psi_imputed_final)){
  data=as.data.frame(psi_imputed_final[[x]])
  colnames(data)<-gsub(bam_suffix_cell_line,"",colnames(data))
  psi_test_list=c(psi_test_list,list(data))
  names(psi_test_list)[length(psi_test_list)]=paste0("scses_",x)
}
# 1.2.2 rmats
print(paste("[",Sys.time(),'] ',"rmats"))
e_rmats_path=paste0(work_path_cell_line,'/rMats/output/')
psi_rmats_new<-id_tr3_rmats(e_path = e_rmats_path,remove.chr = F)
colnames(psi_rmats_new)<-gsub(bam_suffix_cell_line,"",colnames(psi_rmats_new))
psi_rmats_new[is.na(psi_rmats_new)]=0
psi_test_list[["rmats"]]=psi_rmats_new
# 1.2.3 brie
print(paste("[",Sys.time(),'] ',"brie"))
brie_anno_path <- paras_cell_line$Task$BRIE2$brie_ref
brie_id_path <- paste0(dirname(brie_anno_path), "/SE_events_scses_id.txt")
e_brie_path <- paste0(work_path_cell_line, "/BRIE2/psi_BRIE2_mode1.txt")
psi_brie_mode1_new <- id_tr_brie2(e_brie_path, brie_id_path)
psi_test_list[["brie_mode1"]]=psi_brie_mode1_new
e_brie_path <- paste0(work_path_cell_line, "/BRIE2/psi_BRIE2_mode2_diff.txt")
psi_brie_mode2_new <- id_tr_brie2(e_brie_path, brie_id_path)
psi_test_list[["brie_mode2"]]=psi_brie_mode2_new
e_brie_path <- paste0(work_path_cell_line, "/BRIE2/psi_BRIE2_mode2_aggr.txt")
psi_brie_mode2_aggr <- id_tr_brie2(e_brie_path, brie_id_path)
psi_test_list[["brie_mode2_aggr"]]=psi_brie_mode2_aggr

# 1.2.4 psix
print(paste("[",Sys.time(),'] ',"psix"))
psix_anno_path <- paras_cell_line$Task$psix$anno_path
psix_id_path <- paste0(dirname(psix_anno_path), "/SE_events_scses_id.txt")
e_psix_path <- paste0(work_path_cell_line, "/psix/psix_object/")
psi_psix_list_new <- id_tr_psix(e_psix_path, psix_id_path)
for (x in names(psi_psix_list_new)) {
  psi_psix_list_new[[x]][is.na(psi_psix_list_new[[x]])]=0
  psi_test_list=c(psi_test_list,list(psi_psix_list_new[[x]]))
  names(psi_test_list)[length(psi_test_list)]=paste0("psix",x)
}

# 1.2.5 outrigger
e_outrigger_path <- paste0(work_path_cell_line, "/outrigger/psi/outrigger_psi.csv")
psi_outrigger_new <- read.csv(e_outrigger_path,header = T,row.names = 1)
psi_outrigger_new <- id_tr_outrigger(e_outrigger_path,gtf = paras_cell_line$Task$outrigger$gtf_path)
colnames(psi_outrigger_new)<-gsub(bam_suffix_cell_line,"",colnames(psi_outrigger_new))
psi_outrigger_new[is.na(psi_outrigger_new)]=0
psi_test_list[["outrigger"]]=psi_outrigger_new
# 1.2.6 scasl
e_scasl_path=list.files(path = paste0(work_path_cell_line,"/scasl/result"),
                        pattern = "normalized_matrix_rc.csv",recursive = T,
                        full.names = T)
rc_scasl=read.csv(e_scasl_path,header = T)
cluster <- makeCluster(spec = 20)
clusterExport(cl = cluster, varlist = c("rc_scasl"), envir = environment())
rc_scasl_dp=parLapply(cl = cluster,rc_scasl$Site[which(duplicated(rc_scasl$Site))],function(x){
  df=rc_scasl[which(rc_scasl$Site==x),]
  df=colMeans(df[,-1])
  res=data.frame(df,row.names = names(df))
  colnames(res)=x
  return(res)
})
stopCluster(cl = cluster)
rc_scasl_dp=do.call(what = cbind,args = rc_scasl_dp)
rc_scasl_dp=as.data.frame(t(rc_scasl_dp))
rc_scasl_uq=rc_scasl[-which(rc_scasl$Site%in%rc_scasl$Site[which(duplicated(rc_scasl$Site))]),]
row.names(rc_scasl_uq)=rc_scasl_uq$Site
rc_scasl_uq=rc_scasl_uq[,-1]
rc_scasl_new=rbind(rc_scasl_dp,rc_scasl_uq)
psi_scasl=scasl_to_psi(rc_scasl_new,
                       row.names(psi_test_list[["scses_PSI"]]))
psi_scasl[is.na(psi_scasl)]=0
psi_scasl=psi_scasl[,colnames(psi_test_list[[1]])]
psi_test_list[["scasl"]]=psi_scasl
save(psi_test_list, file = paste0(work_path_cell_line, "/psi_test_list.rdata"))

# 2.psi数值准确性----
library(ggplot2)
library(ggpubr)
library(ggpointdensity)

annotation_path=paras_cell_line$Basic$meta_path
annotation_bulk_path=paras_cell_line_bulk$Basic$meta_path
annotation=read.table(annotation_path,sep = "\t",header = F)
annotation_bulk=read.table(annotation_bulk_path,sep = "\t",header = F)
cell_type=c("HCC1954","HCT116","HL-60","HepG2")
cell_id_bulk=annotation_bulk[match(cell_type,annotation_bulk[,2]),1]
cell_id=unlist(lapply(cell_type,function(x){
  annotation[which(annotation[,2]==x),1]
}))
cell_num=table(annotation[,2])
cell_id_bulk=unlist(lapply(cell_type,function(x){
  rep(annotation_bulk[which(annotation_bulk[,2]==x),1],cell_num[x])
}))
#* 2.1. 原始数据和测试数据事件交集----
psi_ref_list=get(load(paste0(work_path_bulk, "/psi_ref_list.rdata")))
psi_test_list=get(load(paste0(work_path_cell_line, "/psi_test_list.rdata")))
cor_cell=lapply(names(psi_test_list), function(tool){
  if(grepl("scses",tool)){
    data_ref=psi_ref_list[["scses"]]
    splicing_value_ref_path=paste0(work_path_bulk,'/splicing_value/')
  }else if(grepl("psix",tool)){
    data_ref=psi_ref_list[["psix"]]
    splicing_value_ref_path=paste0(work_path_bulk,'/psix/splicing_value/')
  }else if(grepl("brie",tool)){
    data_ref=psi_ref_list[["brie"]]
    splicing_value_ref_path=paste0(work_path_bulk,'/BRIE2/splicing_value/')
  }else if(tool=="rmats"){
    data_ref=psi_ref_list[[tool]]
    splicing_value_ref_path=paste0(work_path_bulk,'/rMats/splicing_value/')
  }else{
    data_ref=psi_ref_list[[tool]]
    splicing_value_ref_path=paste0(work_path_bulk,'/outrigger/splicing_value/')
  }
  data_test=psi_test_list[[tool]]
  event_id=intersect(row.names(data_ref),row.names(data_test))
  data_test=data_test[event_id,]
  data_ref=data_ref[event_id,]
  rc_ref <- read_rc(splicing_value_ref_path)
  event_ref <- read_event(splicing_value_ref_path)
  event_ref <- event_ref[match(row.names(data_ref),event_ref$event),]
  rc_ex_ref=calcu_ex_rc(rc_ref,event_ref)
  rc_in_ref=calcu_in_rc(rc_ref,event_ref)
  colnames(rc_ex_ref)<-gsub(bam_suffix,"",colnames(rc_ex_ref))
  colnames(rc_in_ref)<-gsub(bam_suffix,"",colnames(rc_in_ref))
  print(paste(tool,length(event_id)))
  tmp_cell = lapply(1:ncol(data_test), function(x) {
    cell_id=colnames(data_test)[x]
    cell_anno=annotation[which(annotation$V1==cell_id),2]
    cell_id_bulk=annotation_bulk[which(annotation_bulk$V2==cell_anno),1]
    idx=which(as.numeric(rc_ex_ref[,cell_id_bulk])>20|as.numeric(rc_in_ref[,cell_id_bulk])>20)
    psi1=data_test[idx,x]
    psi2=data_ref[idx,cell_id_bulk]
    cor_res = cor.test(as.numeric(psi1), as.numeric(psi2), method = "spearman")
    c = cor_res$estimate
    p = cor_res$p.value
    rmse = sqrt(mean((as.numeric(psi1) - as.numeric(psi2))^2))
    df=data.frame(ref=psi1,
                  test=psi2)
    # p=ggplot(data = df,mapping = aes(x=ref,y=test))+
    #   geom_pointdensity(adjust=3)+
    #   stat_cor(method = "pearson",
    #            label.x = 0.1, label.y = 0.8,color='red')+
    #   geom_abline(intercept=0,slope=1 ,col="red",linetype="dashed",linewidth=1)+
    #   geom_hline(aes(yintercept=0.5),colour="#990000",linetype="dashed",linewidth=1)+
    #   geom_vline(aes(xintercept=0.5),colour="#990000",linetype="dashed",linewidth=1)+
    #   theme_classic()+
    #   ggtitle(tool)
    # p
    return(data.frame(
      cor = c, cor_p = p, rmse = rmse,
      cell_id = colnames(data_test)[x],event_num=length(idx)
    ))
  })
  tmp_cell = do.call(what = rbind, args = tmp_cell)
  tmp_cell$tool=tool
  return(tmp_cell)
})
cor_cell=do.call(what = rbind,args = cor_cell)
cor_cell$cell_type=annotation[match(cor_cell$cell_id,annotation[,1]),2]
ggplot(data = cor_cell,mapping = aes(x = cell_type,y = rmse,fill=tool))+
    geom_boxplot()+
  scale_fill_manual(values = c("#81D4FA","#039BE5","#01579B","#BC99C7",
                               "#FFBF50","#FBB258","#FFAA0E","#FF7F0E","#FC7715",
                               "#F66D58","#BCBD22","#78A641","#2CA030",
                               "#878787"))
ggplot(data = cor_cell,mapping = aes(x = cell_type,y = event_num,fill=tool))+
  geom_bar(stat = "identity",
           color = "black", width = .7, position = 'dodge')+
  scale_fill_manual(values = c("#81D4FA","#039BE5","#01579B","#BC99C7",
                               "#FFBF50","#FBB258","#FFAA0E","#FF7F0E","#FC7715",
                               "#F66D58","#BCBD22","#78A641","#2CA030",
                               "#878787"))

write.table(cor_cell, file = paste0(evaluation_path, "/cell_line_cor_cell1.txt"),quote = F,row.names = F,sep = "\t")
library(patchwork)
event_inst_all=Reduce(intersect,list(scses=row.names(psi_ref_list[[1]]),
     rmats=row.names(psi_ref_list[[2]]),
     brie=row.names(psi_ref_list[[3]]),
     psix=row.names(psi_ref_list[[4]]),
     outrigger=row.names(psi_ref_list[[5]])))
p_cell=lapply(names(psi_test_list), function(tool){
  if(grepl("scses",tool)){
    data_ref=psi_ref_list[["scses"]]
    splicing_value_ref_path=paste0(work_path_bulk,'/splicing_value/')
  }else if(grepl("psix",tool)){
    data_ref=psi_ref_list[["psix"]]
    splicing_value_ref_path=paste0(work_path_bulk,'/psix/splicing_value/')
  }else if(grepl("brie",tool)){
    data_ref=psi_ref_list[["brie"]]
    splicing_value_ref_path=paste0(work_path_bulk,'/BRIE2/splicing_value/')
  }else if(tool=="rmats"){
    data_ref=psi_ref_list[[tool]]
    splicing_value_ref_path=paste0(work_path_bulk,'/rMats/splicing_value/')
  }else{
    data_ref=psi_ref_list[[tool]]
    splicing_value_ref_path=paste0(work_path_bulk,'/outrigger/splicing_value/')
  }
  data_test=psi_test_list[[tool]]
  event_id=intersect(row.names(data_ref),row.names(data_test))
  event_id=event_id[grep("SE$",event_id)]
  data_test=data_test[event_id,]
  data_ref=data_ref[event_id,]
  rc_ref <- read_rc(splicing_value_ref_path)
  event_ref <- read_event(splicing_value_ref_path)
  event_ref <- event_ref[match(row.names(data_ref),event_ref$event),]
  rc_ex_ref=calcu_ex_rc(rc_ref,event_ref)
  rc_in_ref=calcu_in_rc(rc_ref,event_ref)
  colnames(rc_ex_ref)<-gsub(bam_suffix,"",colnames(rc_ex_ref))
  colnames(rc_in_ref)<-gsub(bam_suffix,"",colnames(rc_in_ref))
  print(paste(tool,nrow(data_ref)))
  x=1
  cell_id=colnames(data_test)[x]
  cell_anno=annotation[which(annotation$V1==cell_id),2]
  cell_id_bulk=annotation_bulk[which(annotation_bulk$V2==cell_anno),1]
  idx=which(as.numeric(rc_ex_ref[,cell_id_bulk])>20|as.numeric(rc_in_ref[,cell_id_bulk])>20)
  psi1=data_test[idx,x]
  psi2=data_ref[idx,cell_id_bulk]
  cor_res = cor.test(as.numeric(psi1), as.numeric(psi2), method = "spearman")
  c = cor_res$estimate
  p = cor_res$p.value
  rmse = sqrt(mean((as.numeric(psi1) - as.numeric(psi2))^2))
  df=data.frame(ref=psi1,
                test=psi2)
  p=ggplot(data = df,mapping = aes(x=ref,y=test))+
    geom_pointdensity(adjust=3)+
    stat_cor(method = "pearson",
             label.x = 0.1, label.y = 0.8,color='red')+
    geom_abline(intercept=0,slope=1 ,col="red",linetype="dashed",linewidth=1)+
    geom_hline(aes(yintercept=0.5),colour="#990000",linetype="dashed",linewidth=1)+
    geom_vline(aes(xintercept=0.5),colour="#990000",linetype="dashed",linewidth=1)+
    theme_classic()+
    ggtitle(tool)
  p
  return(p)
})
p_cell[[5]]|p_cell[[14]]

annotation=read.table(annotation_path,sep = "\t",header = F)
true_label<-annotation[,2]
names(true_label)<-annotation[,1]
data_pca<-calcu_pca(psi_test_list[["outrigger"]])
data_plot=as.data.frame(data_pca)
data_plot$group=annotation$V2[match(row.names(data_plot),annotation$V1)]
ggplot(data = data_plot,aes(x = PC1,y = PC2,color = group))+
  geom_point(size = 1)+
  theme_bw()

#* 2.2. 其他方法与SCSES事件交集----
tools=c("rmats","outrigger","brie_mode1","brie_mode2","brie_mode2_aggr","psix5","psix15","psix25","psix35","psix45","scasl")
load(paste0(work_path_bulk, "/psi_ref_list.rdata"))
load(paste0(work_path_cell_line, "/psi_test_list.rdata"))
scses_ref=psi_ref_list[["scses"]]
scses_test=psi_test_list[["scses_PSI"]]
splicing_value_scses_ref_path=paste0(work_path_bulk,'/splicing_value/')
event_id=intersect(row.names(scses_ref),row.names(scses_test))
fea_ref <- read.table(paste0(work_path_bulk,'/expr/combine_count.txt'), comment.char = "#", sep = "\t", header = T, check.names = F)
row.names(fea_ref) <- fea_ref$Geneid
fea_ref <- fea_ref[, -c(1:6), drop = F]
colnames(fea_ref) <- sapply(colnames(fea_ref), function(x) {
  unlist(strsplit(x, "/"))[length(unlist(strsplit(x, "/")))]
})
colnames(fea_ref)=gsub(".bam","",colnames(fea_ref))
fea_test <- read.table(paste0(work_path_cell_line,'/expr/combine_count.txt'), comment.char = "#", sep = "\t", header = T, check.names = F)
row.names(fea_test) <- fea_test$Geneid
fea_test <- fea_test[, -c(1:6), drop = F]
colnames(fea_test) <- sapply(colnames(fea_test), function(x) {
  unlist(strsplit(x, "/"))[length(unlist(strsplit(x, "/")))]
})
colnames(fea_test)=gsub(".bam","",colnames(fea_test))

scses_test=scses_test[event_id,]
scses_ref=scses_ref[event_id,]
rc_scses_ref <- read_rc(splicing_value_scses_ref_path)
event_scses_ref <- read_event(splicing_value_scses_ref_path)
event_scses_ref <- event_scses_ref[match(row.names(scses_ref),event_scses_ref$event),]
rc_scses_ex_ref=calcu_ex_rc(rc_scses_ref,event_scses_ref)
rc_scses_in_ref=calcu_in_rc(rc_scses_ref,event_scses_ref)
colnames(rc_scses_ex_ref)<-gsub(bam_suffix,"",colnames(rc_scses_ex_ref))
colnames(rc_scses_in_ref)<-gsub(bam_suffix,"",colnames(rc_scses_in_ref))
event_gene=lapply(row.names(scses_ref),function(x){
  g=unlist(strsplit(x,"[|]"))[length(unlist(strsplit(x,"[|]")))-1]
  data.frame(event=x,gene=g)
})
event_gene=do.call(what = rbind,args = event_gene)
row.names(event_gene)=event_gene$event
rc_in_upstream=rc_scses_ref[event_scses_ref$retention1,]
rc_in_downstream=rc_scses_ref[event_scses_ref$retention2,]
idx_ref_unbalance=which((rc_in_upstream>0&rc_in_upstream<5&rc_in_downstream>rc_in_upstream*10)|
        (rc_in_downstream>0&rc_in_downstream<5&rc_in_upstream>rc_in_downstream*10),arr.ind = T)
idx_ref_unbalance=data.frame(row=event_scses_ref$event[idx_ref_unbalance[,1]],
                             col=colnames(rc_scses_ref)[idx_ref_unbalance[,2]])
idx_ref_unbalance=idx_ref_unbalance[grepl("SE$",idx_ref_unbalance$row),]
idx_ref_unbalance$col=gsub(".bam","",idx_ref_unbalance$col)
idx_ref_unbalance=paste(idx_ref_unbalance$row,idx_ref_unbalance$col)

cor_cell=lapply(tools, function(tool){
  if(grepl("scses",tool)){
    data_ref=psi_ref_list[["scses"]]
    splicing_value_ref_path=paste0(work_path_bulk,'/splicing_value/')
  }else if(grepl("psix",tool)){
    data_ref=psi_ref_list[["psix"]]
    splicing_value_ref_path=paste0(work_path_bulk,'/psix/splicing_value/')
  }else if(grepl("brie",tool)){
    data_ref=psi_ref_list[["brie"]]
    splicing_value_ref_path=paste0(work_path_bulk,'/BRIE2/splicing_value/')
  }else if(tool=="rmats"){
    data_ref=psi_ref_list[[tool]]
    splicing_value_ref_path=paste0(work_path_bulk,'/rMats/splicing_value/')
  }else if(tool=="outrigger"){
    data_ref=psi_ref_list[[tool]]
    splicing_value_ref_path=paste0(work_path_bulk,'/outrigger/splicing_value/')
  }else{
    data_ref=psi_ref_list[["scses"]]
    splicing_value_ref_path=paste0(work_path_bulk,'/splicing_value/')
  }
  data_test=psi_test_list[[tool]]
  event_id=intersect(row.names(data_ref),row.names(data_test))
  data_test=data_test[event_id,]
  data_ref=data_ref[event_id,]
  rc_ref <- read_rc(splicing_value_ref_path)
  event_ref <- read_event(splicing_value_ref_path)
  event_ref <- event_ref[match(row.names(data_ref),event_ref$event),]
  rc_ex_ref=calcu_ex_rc(rc_ref,event_ref)
  rc_in_ref=calcu_in_rc(rc_ref,event_ref)
  colnames(rc_ex_ref)<-gsub(bam_suffix,"",colnames(rc_ex_ref))
  colnames(rc_in_ref)<-gsub(bam_suffix,"",colnames(rc_in_ref))
  print(paste(tool,length(event_id)))
  tmp_cell = lapply(1:ncol(data_test), function(x) {
    cell_id=colnames(data_test)[x]
    cell_anno=annotation[which(annotation$V1==cell_id),2]
    cell_id_bulk=annotation_bulk[which(annotation_bulk$V2==cell_anno),1]
    idx=which(as.numeric(rc_ex_ref[,cell_id_bulk])>20|as.numeric(rc_in_ref[,cell_id_bulk])>20)
    idx_scses=which(as.numeric(rc_scses_ex_ref[,cell_id_bulk])>20|as.numeric(rc_scses_in_ref[,cell_id_bulk])>20)
    event_inst=intersect(row.names(rc_ex_ref)[idx],row.names(rc_scses_ex_ref)[idx_scses])
    event_inst=event_inst[grep("SE$",event_inst)]
    idx2=which(as.numeric(fea_ref[event_gene[event_inst,"gene"],cell_id_bulk])>0&
                 as.numeric(fea_test[event_gene[event_inst,"gene"],cell_id])>0)
    event_inst=event_inst[idx2]
    idx3=paste(event_inst,cell_id_bulk)
    event_inst=event_inst[!(idx3%in%idx_ref_unbalance)]
    print(paste("Filtered",tool,length(event_inst)))
    psi1=data_test[event_inst,cell_id]
    psi2=data_ref[event_inst,cell_id_bulk]
    cor_res = cor.test(as.numeric(psi1), as.numeric(psi2), method = "spearman")
    c = cor_res$estimate
    p = cor_res$p.value
    rmse = sqrt(mean((as.numeric(psi1) - as.numeric(psi2))^2))
    res_data=data.frame(
      cor = c, cor_p = p, rmse = rmse,tool=tool)
    res_scses=lapply(list("PSI","RC","EXP_RBP"), function(type){
      scses_tmp=psi_test_list[[paste0("scses_",type)]]
      psi1_scses=scses_tmp[event_inst,cell_id]
      psi2_scses=scses_ref[event_inst,cell_id_bulk]
      cor_res_scses = cor.test(as.numeric(psi1_scses), as.numeric(psi2_scses), method = "spearman")
      c_scses = cor_res_scses$estimate
      p_scses = cor_res_scses$p.value
      rmse_scses = sqrt(mean((as.numeric(psi1_scses) - as.numeric(psi2_scses))^2))
      return(data.frame(cor = c_scses, cor_p = p_scses, rmse = rmse_scses,tool=paste0("scses_",type)))
    })
    res_scses=do.call(what = rbind,args = res_scses)
    res_all=rbind(res_data,res_scses)
    res_all$cell_id = colnames(data_test)[x]
    res_all$event_num=length(event_inst)
    return(res_all)
  })
  tmp_cell = do.call(what = rbind, args = tmp_cell)
  tmp_cell$compare=tool
  return(tmp_cell)
})
cor_cell=do.call(what = rbind,args = cor_cell)
cor_cell$cell_type=annotation[match(cor_cell$cell_id,annotation[,1]),2]
write.table(cor_cell, file = paste0(evaluation_path, "/cell_line_cor_cell.txt"),quote = F,row.names = F,sep = "\t")

rmse_event=lapply(tools, function(tool){
  if(grepl("scses",tool)){
    data_ref=psi_ref_list[["scses"]]
    splicing_value_ref_path=paste0(work_path_bulk,'/splicing_value/')
  }else if(grepl("psix",tool)){
    data_ref=psi_ref_list[["psix"]]
    splicing_value_ref_path=paste0(work_path_bulk,'/psix/splicing_value/')
  }else if(grepl("brie",tool)){
    data_ref=psi_ref_list[["brie"]]
    splicing_value_ref_path=paste0(work_path_bulk,'/BRIE2/splicing_value/')
  }else if(tool=="rmats"){
    data_ref=psi_ref_list[[tool]]
    splicing_value_ref_path=paste0(work_path_bulk,'/rMats/splicing_value/')
  }else if(tool=="outrigger"){
    data_ref=psi_ref_list[[tool]]
    splicing_value_ref_path=paste0(work_path_bulk,'/outrigger/splicing_value/')
  }else{
    data_ref=psi_ref_list[["scses"]]
    splicing_value_ref_path=paste0(work_path_bulk,'/splicing_value/')
  }
  data_test=psi_test_list[[tool]]
  event_id=intersect(row.names(data_ref),row.names(data_test))
  data_test=data_test[event_id,]
  data_ref=data_ref[event_id,]
  rc_ref <- read_rc(splicing_value_ref_path)
  event_ref <- read_event(splicing_value_ref_path)
  event_ref <- event_ref[match(row.names(data_ref),event_ref$event),]
  rc_ex_ref=calcu_ex_rc(rc_ref,event_ref)
  rc_in_ref=calcu_in_rc(rc_ref,event_ref)
  colnames(rc_ex_ref)<-gsub(bam_suffix,"",colnames(rc_ex_ref))
  colnames(rc_in_ref)<-gsub(bam_suffix,"",colnames(rc_in_ref))
  print(paste(tool,length(event_id)))
  tmp_event = lapply(unique(annotation$V2), function(x) {
    cell_id=annotation$V1[which(annotation$V2==x)]
    cell_id_bulk=annotation_bulk[which(annotation_bulk$V2==x),1]
    idx=which(as.numeric(rc_ex_ref[,cell_id_bulk])>20|as.numeric(rc_in_ref[,cell_id_bulk])>20)
    idx_scses=which(as.numeric(rc_scses_ex_ref[,cell_id_bulk])>20|as.numeric(rc_scses_in_ref[,cell_id_bulk])>20)
    event_inst=intersect(row.names(rc_ex_ref)[idx],row.names(rc_scses_ex_ref)[idx_scses])
    event_inst=event_inst[grep("SE$",event_inst)]
    idx2=which(as.numeric(fea_ref[event_gene[event_inst,"gene"],cell_id_bulk])>0&
                 rowMins(as.matrix(fea_test[event_gene[event_inst,"gene"],cell_id]),useNames = T)>0)
    event_inst=event_inst[idx2]
    idx3=paste(event_inst,cell_id_bulk)
    event_inst=event_inst[!(idx3%in%idx_ref_unbalance)]
    psi1=data_test[event_inst,cell_id]
    psi2=data_ref[event_inst,cell_id_bulk]
    rmse = sqrt(rowMeans((psi1 - psi2)^2))
    res_data=data.frame(rmse = rmse,tool=tool)
    res_scses=lapply(list("PSI","RC","EXP_RBP"), function(type){
      scses_tmp=psi_test_list[[paste0("scses_",type)]]
      psi1_scses=scses_tmp[event_inst,cell_id]
      psi2_scses=scses_ref[event_inst,cell_id_bulk]
      rmse_scses = sqrt(rowMeans((psi1_scses - psi2_scses)^2))
      res_scses_type=data.frame(rmse = rmse_scses,tool=paste0("scses_",type))
      return(res_scses_type)
    })
    res_scses=do.call(what = rbind,args = res_scses)
    res_all=rbind(res_data,res_scses)
    res_all$cell_type = x
    res_all$event_num=length(event_inst)
    return(res_all)
  })
  tmp_event = do.call(what = rbind, args = tmp_event)
  tmp_event$compare=tool
  return(tmp_event)
})
rmse_event=do.call(what = rbind,args = rmse_event)
write.table(rmse_event, file = paste0(evaluation_path, "/cell_line_cor_event.txt"),quote = F,row.names = F,sep = "\t")

library(gghalves)
library(ggpubr)
p_cor_cell=lapply(sort(unique(cor_cell$cell_type)), function(cell_type){
    data=cor_cell[which(cor_cell$cell_type==cell_type),]
    data=data[-which(data$tool%in%c("scses_EXP_RBP","scses_RC")),]
    data=data[-which(data$compare%in%c("psix15","psix25",
                                    "psix35","psix45","brie_mode2")),]
    data$tool=ifelse(data$tool==data$compare,"0","1")
    # data$tool=factor(data$tool,levels = c("1","0"))
    data$compare=toolname[data$compare,"new"]
    p=ggplot(data = data,mapping = aes(x = tool,y = cor,fill=tool))+
      # geom_half_violin(data=data[which(data$tool==0),],
      #                  mapping = aes(x = compare,y = cor,fill=tool),
      #                  position=position_nudge(x=-0.01,y=0),
      #                  side='l',trim=F,alpha=0.8,color="black",
      #                  show.legend = T,adjust=1.2,linewidth=base_line)+
      # geom_half_violin(data=data[which(data$tool==1),],
      #                  mapping = aes(x = compare,y = cor,fill=tool),
      #                  position=position_nudge(x=0.01,y=0),
      #                  side='R',trim=F,alpha=0.8,color="black",
      #                  show.legend = F,adjust=1.2,linewidth=base_line)+
      geom_half_violin(position=position_nudge(x=0.22,y=0),
                       side='R',adjust=1.2,trim=F,color=NA,
                       show.legend = F)+
      geom_boxplot(linewidth=base_line,width=0.4,outlier.shape = NA)+
      geom_jitter(aes(fill=tool),shape = 21,size=0.3,width=0.1,stroke=0.2,
                  show.legend = F)+
      geom_signif(comparisons = list(c("0","1")),size = base_line,
                  textsize=base_size*5/12,map_signif_level = T)+
      # stat_compare_means(aes(x = compare,y = cor,group = tool),
      #                    label = "p.signif",
      #                    method = "wilcox.test",
      #                    method.args = list(alternative = "greater")
      #                    # label.y = max(data$cor)
      #                    )+
      facet_wrap(vars(compare),scales = "free",nrow = 1)+
      # ggtitle(cell_type)+
      scale_fill_manual(values = mycol$compare2,labels=c("Ref.","SCSES"))+
      xlab('')+
      ylab('SCC')+
      guides(fill=guide_legend(title = "",position = "inside"))+
      basic_theme+
      theme(axis.ticks.x = element_blank(),panel.border = element_blank(),
            axis.line = element_line(colour = 'black',linewidth = base_line),
            axis.line.x = element_line(colour = 'black',linewidth = base_line),
            axis.text.x = element_blank()
            )
    plotdir='/share/lvxuan/Single-Splicing/cell_line/'
    ggsave(paste0(plotdir,"/",cell_type,"_cell_cor_PSI.pdf"),
           p, width = 8,height = 1.5,units = 'in', dpi = 300)
    return(p)
})
ggarrange(plotlist = p_cor_cell,ncol = 2,nrow = 2,common.legend = T,
          legend = "right")

p_rmse_event=lapply(sort(unique(rmse_event$cell_type)), function(cell_type){
  data=rmse_event[which(rmse_event$cell_type==cell_type),]
  data=data[-which(data$tool%in%c("scses_PSI","scses_EXP_RBP")),]
  data=data[-which(data$compare%in%c("psix15","psix25",
                                     "psix35","psix45","brie_mode2")),]
  data$tool=ifelse(data$tool==data$compare,"0","1")
  # data$tool=factor(data$tool,levels = c("1","0"))
  data$compare=toolname[data$compare,"new"]
  p=ggplot(data = data,mapping = aes(x = tool,y = rmse,fill=tool))+
    geom_half_violin(position=position_nudge(x=0.22,y=0),
                     side='R',adjust=1.2,trim=F,color=NA,
                     show.legend = F)+
    geom_boxplot(linewidth=base_line,width=0.4,outlier.shape = NA)+
    geom_signif(comparisons = list(c("0","1")),size = base_line,
                textsize=base_size*5/12,map_signif_level = T)+
    facet_wrap(vars(compare),scales = "free",nrow = 1)+
    # ggtitle(cell_type)+
    scale_fill_manual(values = mycol$compare2,labels=c("Ref.","SCSES"))+
    xlab('')+
    ylab('RMSE')+
    guides(fill=guide_legend(title = "",position = "inside"))+
    basic_theme+
    theme(axis.ticks.x = element_blank(),panel.border = element_blank(),
          axis.line = element_line(colour = 'black',linewidth = base_line),
          axis.line.x = element_line(colour = 'black',linewidth = base_line),
          axis.text.x = element_blank()
    )
  plotdir='/share/lvxuan/Single-Splicing/cell_line/'
  ggsave(paste0(plotdir,"/",cell_type,"_event_rmse_RC.pdf"),
         p, width = 8,height = 1.5,units = 'in', dpi = 300)
  return(p)
})


# 3. 差异剪接事件 -------------------------------------------------------------
compare_diffSplice<-function(data){
  plot_df1=data[,c("event_id","deltaPSI","tool")]
  plot_df1_m <- dcast(plot_df1, event_id ~ tool, value.var='deltaPSI')
  row.names(plot_df1_m) <- plot_df1_m$event_id
  plot_df1_m <- plot_df1_m[,-1]
  idx_ref_diff <- which(abs(plot_df1_m[,"ref"]) > 0.2)
  deltapsi_cor_res=lapply(which(colnames(plot_df1_m)!="ref"), function(i){
    cor_res=cor.test(plot_df1_m[idx_ref_diff,"ref"],
                     plot_df1_m[idx_ref_diff,i])
    return(data.frame(p=cor_res$p.value,cor=cor_res$estimate,
                      tool=colnames(plot_df1_m)[i]))
  })
  deltapsi_cor_res=do.call(what = rbind,args = deltapsi_cor_res)
  # deltapsi_p_res=lapply(which(colnames(plot_df1_m)!="ref"), function(i){
  #   df=data.frame(ref=plot_df1_m[idx_ref_diff,"ref"],test=plot_df1_m[idx_ref_diff,i])
  #   num_1=round(length(which(df$ref>0&df$test>0))/nrow(df),2)
  #   num_2=round(length(which(df$ref>0&df$test<0))/nrow(df),2)
  #   num_3=round(length(which(df$ref<0&df$test<0))/nrow(df),2)
  #   num_4=round(length(which(df$ref<0&df$test>0))/nrow(df),2)
  #   print(paste(colnames(plot_df1_m)[i],num_1+num_3,num_2+num_4))
  #   p=ggplot(data = df,mapping = aes(x=ref,y=test))+
  #     geom_pointdensity(adjust=3)+
  #     stat_cor(method = "pearson",
  #              label.x = 0.1, label.y = 0.8,color='red')+
  #     geom_abline(intercept=0,slope=1 ,col="red",linetype="dashed",linewidth=1)+
  #     geom_hline(aes(yintercept=0),colour="#990000",linetype="dashed",linewidth=1)+
  #     geom_vline(aes(xintercept=0),colour="#990000",linetype="dashed",linewidth=1)+
  #     theme_classic()+
  #     ggtitle(colnames(plot_df1_m)[i])
  #   return(p)
  # })
  # ggarrange(plotlist = deltapsi_p_res,ncol = 2,nrow = 2)

  true_label<-ifelse(abs(as.numeric(plot_df1_m[,"ref"])) > 0.2,1,0)
  # auc_res=lapply(which(colnames(plot_df1_m)!="ref"), function(i){
  #   deltapsi<-abs(plot_df1_m[,i])
  #   rocobj <- roc(response=as.numeric(true_label), 
  #                 predictor=deltapsi,direction="<")
  #   auc<-auc(rocobj)[1]
  #   return(data.frame(auc=auc,
  #                     tool=colnames(plot_df1_m)[i]))
  # })
  # auc_res=do.call(what = rbind,args = auc_res)
  
  plot_df2=data[which(data$tool!="ref"),c("event_id","padj","tool")]
  plot_df2_m <- dcast(plot_df2, event_id ~ tool, value.var='padj')
  row.names(plot_df2_m) <- plot_df2_m$event_id
  plot_df2_m <- plot_df2_m[,-1]
  plot_df2_m <- plot_df2_m[row.names(plot_df1_m),]

  auc_res=lapply(1:ncol(plot_df2_m), function(i){
    padj<-abs(plot_df2_m[,i])
    rocobj <- pROC::roc(response=as.numeric(true_label), 
                        predictor=padj,direction=">")
    auc<- pROC::auc(rocobj)[1]
    return(data.frame(auc=auc,
                      tool=colnames(plot_df2_m)[i]))
  })
  auc_res=do.call(what = rbind,args = auc_res)
  
  ref_e_diff=data[which(data$tool=="ref"&abs(data$deltaPSI)>0.2),]
  tools=unique(data$tool)
  tools=tools[which(tools!="ref")]
  inst_res=lapply(tools, function(t){
    test_e_diff=data[which(data$tool==t&abs(data$deltaPSI)>0.1&data$padj<0.05),]
    inst_e_diff=intersect(ref_e_diff$event_id,test_e_diff$event_id)
    inst_e_diff_same_direction=inst_e_diff[which(ref_e_diff[match(inst_e_diff,ref_e_diff$event_id),"deltaPSI"]*
                                                   test_e_diff[match(inst_e_diff,test_e_diff$event_id),"deltaPSI"]>0)]
    num_inst=length(inst_e_diff_same_direction)
    out=data.frame(num_inst=num_inst,num_test=nrow(test_e_diff),
                   num_ref=nrow(ref_e_diff),
                   num_union=length(union(test_e_diff$event_id,ref_e_diff$event_id)))
    out$JCI=out$num_inst/out$num_union
    out$tool=t
    return(out)
  })
  inst_res=do.call(what = rbind,args = inst_res)

  out_all=merge(deltapsi_cor_res,auc_res)
  out_all=merge(out_all,inst_res)
  return(out_all)
}
annotation_path=paras_cell_line$Basic$meta_path
annotation_bulk_path=paras_cell_line_bulk$Basic$meta_path
annotation=read.table(annotation_path,sep = "\t",header = F)
annotation_bulk=read.table(annotation_bulk_path,sep = "\t",header = F)

load(paste0(work_path_bulk, "/psi_ref_list.rdata"))
load(paste0(work_path_cell_line, "/psi_test_list.rdata"))

cell_types=unique(annotation_bulk$V2)
tools=c("rmats","outrigger","brie_mode1","brie_mode2","brie_mode2_aggr",
        "psix5","psix15","psix25","psix35","psix45","scasl")
res_diffsplice=lapply(tools, function(tool){
  if(grepl("scses",tool)){
    data_ref=psi_ref_list[["scses"]]
    splicing_value_ref_path=paste0(work_path_bulk,'/splicing_value/')
  }else if(grepl("psix",tool)){
    data_ref=psi_ref_list[["psix"]]
    splicing_value_ref_path=paste0(work_path_bulk,'/psix/splicing_value/')
  }else if(grepl("brie",tool)){
    data_ref=psi_ref_list[["brie"]]
    splicing_value_ref_path=paste0(work_path_bulk,'/BRIE2/splicing_value/')
  }else if(tool=="rmats"){
    data_ref=psi_ref_list[[tool]]
    splicing_value_ref_path=paste0(work_path_bulk,'/rMats/splicing_value/')
  }else if(tool=="outrigger"){
    data_ref=psi_ref_list[[tool]]
    splicing_value_ref_path=paste0(work_path_bulk,'/outrigger/splicing_value/')
  }else{
    data_ref=psi_ref_list[["scses"]]
    splicing_value_ref_path=paste0(work_path_bulk,'/splicing_value/')
  }
  data_test=psi_test_list[[tool]]
  event_id=intersect(row.names(data_ref),row.names(data_test))
  data_test=data_test[event_id,]
  data_ref=data_ref[event_id,]
  rc_ref <- read_rc(splicing_value_ref_path)
  event_ref <- read_event(splicing_value_ref_path)
  event_ref <- event_ref[match(row.names(data_ref),event_ref$event),]
  rc_ex_ref=calcu_ex_rc(rc_ref,event_ref)
  rc_in_ref=calcu_in_rc(rc_ref,event_ref)
  colnames(rc_ex_ref)<-gsub(bam_suffix,"",colnames(rc_ex_ref))
  colnames(rc_in_ref)<-gsub(bam_suffix,"",colnames(rc_in_ref))
  print(paste(tool,length(event_id)))
  compare<-combn(1:length(cell_types),2)
  # diffSplice_df<-apply(compare, 2, function(x){
  #   id_cell1<-annotation_bulk[which(annotation_bulk$V2==cell_types[x[1]]),1]
  #   id_cell2<-annotation_bulk[which(annotation_bulk$V2==cell_types[x[2]]),1]
  #   idx_cell1=which(as.numeric(rc_ex_ref[,id_cell1])>20|as.numeric(rc_in_ref[,id_cell1])>20)
  #   idx_cell2=which(as.numeric(rc_ex_ref[,id_cell2])>20|as.numeric(rc_in_ref[,id_cell2])>20)
  #   idx_scses_cell1=which(as.numeric(rc_scses_ex_ref[,id_cell1])>20|as.numeric(rc_scses_in_ref[,id_cell1])>20)
  #   idx_scses_cell2=which(as.numeric(rc_scses_ex_ref[,id_cell2])>20|as.numeric(rc_scses_in_ref[,id_cell2])>20)
  #   event_inst=Reduce(intersect,list(row.names(rc_ex_ref)[idx_cell1],row.names(rc_ex_ref)[idx_cell2],
  #                        row.names(rc_scses_ex_ref)[idx_scses_cell1],row.names(rc_scses_ex_ref)[idx_scses_cell2]))
  #   event_inst=event_inst[grep("SE$",event_inst)]
  #   id_cell1_test<-annotation[which(annotation$V2==cell_types[x[1]]),1]
  #   id_cell2_test<-annotation[which(annotation$V2==cell_types[x[2]]),1]
  # 
  #   idx2_cell1=which(as.numeric(fea_ref[event_gene[event_inst,"gene"],id_cell1])>0&
  #                as.numeric(rowSums(fea_test[event_gene[event_inst,"gene"],id_cell1_test]))>0)
  #   idx2_cell2=which(as.numeric(fea_ref[event_gene[event_inst,"gene"],id_cell2])>0&
  #                as.numeric(rowSums(fea_test[event_gene[event_inst,"gene"],id_cell2_test]))>0)
  #   idx2=intersect(idx2_cell1,idx2_cell2)
  #   event_inst=event_inst[idx2]
  #   idx3_cell1=paste(event_inst,id_cell1)
  #   idx3_cell2=paste(event_inst,id_cell2)
  #   event_inst=event_inst[!(idx3_cell1%in%idx_ref_unbalance|
  #                             idx3_cell2%in%idx_ref_unbalance)]
  # 
  #   cell1_psi_ref=data_ref[event_inst,id_cell1,drop=F]
  #   cell2_psi_ref=data_ref[event_inst,id_cell2,drop=F]
  # 
  #   cell1_psi_test=data_test[event_inst,id_cell1_test,drop=F]
  #   cell2_psi_test=data_test[event_inst,id_cell2_test,drop=F]
  # 
  #   diffSplice_test=func_diffsplice(cell1_psi_test,cell2_psi_test,core=10)
  #   diffSplice_test$tool=tool
  #   diffSplice_scses=lapply(list("PSI","RC","EXP_RBP"), function(type){
  #     scses_tmp=psi_test_list[[paste0("scses_",type)]]
  #     cell1_psi_scses=scses_tmp[event_inst,id_cell1_test,drop=F]
  #     cell2_psi_scses=scses_tmp[event_inst,id_cell2_test,drop=F]
  #     diffSplice_scses_tmp=func_diffsplice(cell1_psi_scses,cell2_psi_scses,core=10)
  #     diffSplice_scses_tmp$tool=paste0("scses_",type)
  #     return(diffSplice_scses_tmp)
  #   })
  #   diffSplice_scses=do.call(what = rbind,args = diffSplice_scses)
  #   diffSplice_ref = data.frame(event_id = event_inst,p=NA,padj=NA,
  #                               psi_mean1 = as.numeric(cell1_psi_ref[,1]),
  #                           psi_mean2 = as.numeric(cell2_psi_ref[,1]),
  #                           deltaPSI=as.numeric(cell1_psi_ref[,1])-as.numeric(cell2_psi_ref[,1]),
  #                           tool="ref")
  #   diffSplice_all=rbind(diffSplice_test,diffSplice_scses,diffSplice_ref)
  #   diffSplice_all$event_num=length(event_inst)
  #   diffSplice_all$compare=paste0(cell_types[x[1]],"_",cell_types[x[2]])
  #   return(diffSplice_all)
  # })
  # diffSplice_df<-do.call(what = "rbind",args = diffSplice_df)
  # save(diffSplice_df,file = paste0(evaluation_path,"/cell_line_",tool,"_diffSplice.rdata"))
  load(paste0(evaluation_path,"/cell_line_",tool,"_diffSplice.rdata"))
  diffSplice_compare<-lapply(unique(diffSplice_df$compare), function(x){
    tmp=diffSplice_df[which(diffSplice_df$compare==x),]
    tmp_compare=compare_diffSplice(tmp)
    tmp_compare$cell_pair=x
    return(tmp_compare)
  })
  diffSplice_compare=do.call(what = rbind,args = diffSplice_compare)
  diffSplice_compare$compare=tool
  return(diffSplice_compare)
})
res_diffsplice=do.call(what = rbind,args = res_diffsplice)
write.table(res_diffsplice, file = paste0(evaluation_path, "/compare_diffsplice.txt"),quote = F,row.names = F,sep = "\t")

###################差异事件环形图###############
res_diffsplice=read.table(paste0(evaluation_path, "/compare_diffsplice.txt"),header = T)
data=res_diffsplice
data$cell_pair=gsub("_"," vs ",data$cell_pair)
data=data[-which(data$tool%in%c("scses_PSI","scses_EXP_RBP")),]
data=data[-which(data$compare%in%c("psix15","psix25",
                                   "psix35","psix45","brie_mode2")),]
data$group=ifelse(data$tool==data$compare,"0","1")
data$compare=toolname[data$compare,"new"]
data$tool=toolname[data$tool,"new"]
# data$cor2=abs(data$cor)*(ifelse(data$group==1,1,-1))
# data$sign=data$cor<0

data2=lapply(unique(data$compare),function(x){
  dauc_cell_pair=lapply(unique(data$cell_pair), function(y){
    tmp=data[which(data$compare==x&data$cell_pair==y),]
    dauc=tmp$auc[which(tmp$group==1)]-tmp$auc[which(tmp$group==0)]
    data.frame(compare=x,cell_pair=y,dauc=dauc)
  })
  dauc_cell_pair=do.call(what = rbind,args = dauc_cell_pair)
  return(dauc_cell_pair)
})
data2=do.call(what = rbind,args = data2)
data=merge(data,data2)
data$cell_pair_compare=paste0(data$compare,"_",data$cell_pair)


plot.data=data
plot.data$new=plot.data$compare
plot.data$compare=plot.data$cell_pair
plot.data$cell_pair=plot.data$new

method=unique(plot.data$compare)
cell_pair=unique(plot.data$cell_pair)
compare_pair=2
barwidth=0.3
cellinterval=barwidth*0.4
methodinterval=barwidth*1.5
fanwidth=compare_pair*length(cell_pair)*barwidth+
  (length(cell_pair)-1)*cellinterval

plot.data=plot.data[order(plot.data$compare,plot.data$cell_pair,plot.data$group),]
plot.data$cell_pair=as.factor(plot.data$cell_pair)
plot.data$compare=as.factor(plot.data$compare)
plot.data$group=as.factor(plot.data$group)
plot.data$cell_pair_n=as.numeric(plot.data$cell_pair)
plot.data$compare_n=as.numeric(plot.data$compare)
plot.data$group_n=as.numeric(plot.data$group)

plot.data$x=(plot.data$compare_n-1)*fanwidth+
  (plot.data$compare_n-1)*methodinterval+
  (plot.data$cell_pair_n-1)*(cellinterval+2*barwidth)+
  (plot.data$group_n-1)*barwidth+barwidth/2

plot.data2=plot.data
plot.data2$x=(plot.data$compare_n-1)*fanwidth+
  (plot.data$compare_n-1)*methodinterval+
  (plot.data$cell_pair_n-1)*(cellinterval+2*barwidth)+
  barwidth
plot.data2$y=ifelse(min(plot.data2$cor)<0,min(plot.data2$cor),0)-barwidth
plot.data2$label1=ifelse(plot.data2$dauc>0.1,"*",ifelse(plot.data2$dauc<0,"-"," "))
plot.data2$label1=factor(plot.data2$label1,levels = c("*","-"," "))

segment_data=lapply(plot.data$compare,function(x){
  df=plot.data[which(plot.data$compare==x),]
  data.frame(from=min(df$x)-barwidth/2,to=max(df$x)+barwidth/2,label=x)
})
segment_data=do.call(what = rbind,args = segment_data)
segment_data=unique(segment_data)

p=ggplot(data = plot.data)+
  geom_rect(data = plot.data2,
            aes(xmin = x-barwidth,xmax=x+barwidth, 
                ymin = y+barwidth/2,ymax=y-barwidth/2,fill=dauc),
            # height = barwidth*5/14,
            color = "white",
            show.legend = T,
            linewidth=base_line
  )+
  geom_textpath(data = plot.data2,
            mapping = aes(x = x,y = y,label=label1),size=base_size-4)+
  scale_fill_gradient(low = "#FFF5EB",high = "#FC8D59")+
  guides(fill=guide_colorbar(title=expression(Delta*"AUC")))+
  new_scale_fill()+
  scale_x_continuous(limits = c(0,max(plot.data$x)+barwidth/2+methodinterval))+
  scale_y_continuous(limits = c(-1,max(plot.data$cor)*1.1+barwidth),n.breaks = 10)+
  coord_radial(start = 0,end = 1.8*pi,clip ="off",expand=F)+
  new_scale_fill()+
  geom_bar(mapping = aes(x = x,y = cor,fill=tool),color="black",
           linewidth=base_line,
           stat="identity",position = position_dodge())+
  scale_fill_manual(values = mycol$method)+
  guides(fill=guide_legend(title="Tools"))+
  geom_rect(data = segment_data, 
            aes(xmin = from, xmax = to, ymin = max(plot.data$cor)*1.1, 
                ymax=max(plot.data$cor)*1.1+barwidth),
            linewidth=base_line,fill="#F1E2CC7f")+
  geom_textpath(data = segment_data, 
                aes(x= (to+from)/2, y = max(plot.data$cor)*1.1+barwidth/2,
                    label=label),
                color="black",size=base_size*5/14,upright=T)+
  geom_segment(data = segment_data,
               aes(x = from, xend = to), y = min(plot.data2$cor)-barwidth/4,
               yend=min(plot.data2$cor)-barwidth/4,linewidth=base_line)+
  basic_theme+
  theme(axis.title = element_blank(),axis.line = element_blank(),
        axis.ticks = element_blank(),#axis.text = element_blank(),
        axis.text.x = element_blank())

pg <- ggplot_build(p)
y_breaks=pg$layout$panel_params[[1]]$r$breaks
y_breaks=y_breaks[which(y_breaks>=min(plot.data$cor)&y_breaks<=max(plot.data$cor))]

y_axis_data=lapply(rev(unique(plot.data$compare_n))[-1],function(x){
  start=x*fanwidth+(x-1)*methodinterval
  end=start+methodinterval
  data.frame(from=start,to=end,y=y_breaks)
})
y_axis_data=do.call(what = rbind,args = y_axis_data)
p_diffsplice=ggplot(data = plot.data)+
  geom_hline(data = y_axis_data, 
             aes(yintercept=y),linewidth=base_line,
             color="grey")+
  scale_x_continuous(limits = c(0,max(plot.data$x)+barwidth/2+methodinterval))+
  scale_y_continuous(limits = c(-1,max(plot.data$cor)*1.1+barwidth),n.breaks = 10)+
  coord_radial(start = 0,end = 1.8*pi,clip ="off",expand=F)+
  geom_bar(mapping = aes(x = x,y = cor,fill=tool),color="black",
           linewidth=base_line,
           stat="identity",position = position_dodge())+
  scale_fill_manual(values = mycol$method)+
  guides(fill=guide_legend(title="Tools"))+
  new_scale_fill()+
  geom_rect(data = segment_data, 
            aes(xmin = from, xmax = to, ymin = max(plot.data$cor)*1.1, 
                ymax=max(plot.data$cor)*1.1+barwidth),
            linewidth=base_line,fill="#F1E2CC7f")+
  geom_rect(data = plot.data2,
            aes(xmin = x-barwidth,xmax=x+barwidth, 
                ymin = y-barwidth/2,ymax=y+barwidth/2,fill=dauc),
            # height = barwidth*5/14,
            color = "white",
            show.legend = T,
            linewidth=base_line
  )+
  scale_fill_gradient(low = "#FFF5EB",high = "#FC8D59")+
  guides(fill=guide_colorbar(title=expression(Delta*"AUC"),
                             theme = theme(legend.key.width = unit(2, "cm"))))+
  geom_textpath(data = segment_data, 
                aes(x= (to+from)/2, y = max(plot.data$cor)*1.1+barwidth/2,
                    label=label),
                color="black",size=base_size*5/14,upright=T)+
  geom_text(data = unique(plot.data2[,c("x","y","label1")]),
                mapping = aes(x = x,y = y,label=label1))+
  geom_segment(data = segment_data,
               aes(x = from, xend = to), y = min(plot.data2$cor)-barwidth/4,
               yend=min(plot.data2$cor)-barwidth/4,linewidth=base_line)+
  basic_theme+
  theme(axis.title = element_blank(),axis.line = element_blank(),
        axis.ticks = element_blank(),#axis.text = element_blank(),
        axis.text.x = element_blank())+
  scale_radius(breaks = y_breaks)+
  geom_segment(data = y_axis_data,
               aes(x = from, xend = to, y = y, yend=y),linewidth=base_line,
               color="grey")+
  theme(axis.text.r = element_text(family = 'sans',colour = 'black',
                                   size = base_size),
        panel.border=element_blank(),
        legend.title.position = "top")
p_diffsplice

plotdir='/share/lvxuan/Single-Splicing/cell_line/'
ggsave(paste0(plotdir,"/cell_diffsplice_PSI.pdf"),
       p_diffsplice, width = 4,height = 5,units = 'in', dpi = 300)

# 4. SCSES specific events -------------------------------------------------------------
splicing_value_ref_path=paste0(work_path_bulk,'/splicing_value/')
othertools_events=Reduce(union,list(brie=row.names(psi_ref_list[[3]]),
          psix=row.names(psi_ref_list[[4]]),
          outrigger=row.names(psi_ref_list[[5]])))
scses_ref=psi_ref_list[["scses"]]
scses_events=row.names(scses_ref)
scses_events=setdiff(scses_events,othertools_events)
event_id=intersect(row.names(psi_test_list[["scses_PSI"]]),row.names(scses_ref))
event_id=intersect(event_id,scses_events)
event_type=lapply(event_id,function(x){
  unlist(strsplit(x,'[|]'))[length(unlist(strsplit(x,'[|]')))]
})
event_type=unlist(event_type)
event_type=as.data.frame(table(event_type))
event_type=event_type[which(event_type$event_type!="SE"),]
colnames(event_type)[1]="type"
p_event_type_num=ggplot(data = event_type,mapping = aes(x = type,y = Freq,fill=type))+
  geom_bar(color = "black", width = .7, stat="identity",
           linewidth=base_line) +
  scale_fill_manual(values = mycol$event_type)+
  ylab("Event num")+
  basic_theme+
  theme(axis.title.x = element_blank(),legend.position = "none")
plotdir='/share/lvxuan/Single-Splicing/cell_line/'
ggsave(paste0(plotdir,"/p_event_type_num.pdf"),
       p_event_type_num, width = 2.5,height = 2.5,units = 'in', dpi = 300)

scses_ref=scses_ref[event_id,]
rc_ref <- read_rc(splicing_value_ref_path)
event_ref <- read_event(splicing_value_ref_path)
event_ref <- event_ref[match(row.names(scses_ref),event_ref$event),]
rc_ex_ref=calcu_ex_rc(rc_ref,event_ref)
rc_in_ref=calcu_in_rc(rc_ref,event_ref)
colnames(rc_ex_ref)<-gsub(bam_suffix,"",colnames(rc_ex_ref))
colnames(rc_in_ref)<-gsub(bam_suffix,"",colnames(rc_in_ref))
cor_cell_scses_sepcific=lapply(list("scses_PSI","scses_RC","scses_EXP_RBP"), function(tool){
  data_test=psi_test_list[[tool]]
  data_test=data_test[event_id,]
  
  tmp_cell = lapply(1:ncol(data_test), function(x) {
    cell_id=colnames(data_test)[x]
    cell_anno=annotation[which(annotation$V1==cell_id),2]
    cell_id_bulk=annotation_bulk[which(annotation_bulk$V2==cell_anno),1]
    idx=which(as.numeric(rc_ex_ref[,cell_id_bulk])>20|as.numeric(rc_in_ref[,cell_id_bulk])>20)
    event_inst=row.names(rc_ex_ref)[idx]
    idx2=which(as.numeric(fea_ref[event_gene[event_inst,"gene"],cell_id_bulk])>0&
                 as.numeric(fea_test[event_gene[event_inst,"gene"],cell_id])>0)
    event_inst=event_inst[idx2]
    idx3=paste(event_inst,cell_id_bulk)
    event_inst=event_inst[!(idx3%in%idx_ref_unbalance)]
    event_types=sapply(event_inst,function(name){
      unlist(strsplit(name,'[|]'))[length(unlist(strsplit(name,'[|]')))]
    })
    tmp_cell_type=lapply(unique(event_types), function(type){
      idx_type=idx[which(event_types==type)]
      psi1=data_test[idx_type,x]
      psi2=scses_ref[idx_type,cell_id_bulk]
      cor_res = cor.test(as.numeric(psi1), as.numeric(psi2), method = "spearman")
      c = cor_res$estimate
      p = cor_res$p.value
      rmse = sqrt(mean((as.numeric(psi1) - as.numeric(psi2))^2))
      return(data.frame(
        cor = c, cor_p = p, rmse = rmse,event_type=type,
        cell_id = colnames(data_test)[x],
        event_num=length(idx_type)
      ))
    })
    tmp_cell_type = do.call(what = rbind, args = tmp_cell_type)
    return(tmp_cell_type)
  })
  tmp_cell = do.call(what = rbind, args = tmp_cell)
  tmp_cell$tool=tool
  return(tmp_cell)
})
cor_cell_scses_sepcific=do.call(what = rbind,args = cor_cell_scses_sepcific)
cor_cell_scses_sepcific$cell_type=annotation[match(cor_cell_scses_sepcific$cell_id,annotation[,1]),2]
write.table(cor_cell_scses_sepcific, file = paste0(evaluation_path, "/cor_cell_scses_sepcific.txt"),quote = F,row.names = F,sep = "\t")

rmse_cell_scses_sepcific=lapply(list("scses_PSI","scses_RC","scses_EXP_RBP"), function(tool){
  data_test=psi_test_list[[tool]]
  data_test=data_test[event_id,]
  tmp_cell = lapply(unique(annotation$V2), function(x) {
    
    cell_id=annotation$V1[which(annotation$V2==x)]
    cell_id_bulk=annotation_bulk[which(annotation_bulk$V2==x),1]
    idx=which(as.numeric(rc_ex_ref[,cell_id_bulk])>20|as.numeric(rc_in_ref[,cell_id_bulk])>20)
    event_inst=row.names(rc_ex_ref)[idx]
    idx2=which(as.numeric(fea_ref[event_gene[event_inst,"gene"],cell_id_bulk])>0&
                 rowMins(as.matrix(fea_test[event_gene[event_inst,"gene"],cell_id]),useNames = T)>0)
    event_inst=event_inst[idx2]
    idx3=paste(event_inst,cell_id_bulk)
    event_inst=event_inst[!(idx3%in%idx_ref_unbalance)]
    event_types=sapply(event_inst,function(name){
      unlist(strsplit(name,'[|]'))[length(unlist(strsplit(name,'[|]')))]
    })
    
    tmp_cell_type=lapply(unique(event_types), function(type){
      idx_type=event_inst[which(event_types==type)]
      psi1=data_test[idx_type,cell_id]
      psi2=scses_ref[idx_type,cell_id_bulk]
      rmse = sqrt(rowMeans((psi1 - psi2)^2))
      return(data.frame(
        rmse = rmse,event_type=type,
        event_num=length(idx_type)
      ))
    })
    tmp_cell_type = do.call(what = rbind, args = tmp_cell_type)
    tmp_cell_type$cell_type=x
    return(tmp_cell_type)
  })
  tmp_cell = do.call(what = rbind, args = tmp_cell)
  tmp_cell$tool=tool
  return(tmp_cell)
})
rmse_cell_scses_sepcific=do.call(what = rbind,args = rmse_cell_scses_sepcific)

cor_cell_scses_sepcific=read.table(paste0(evaluation_path, "/cor_cell_scses_sepcific.txt"),header = T)
cor_cell_scses_sepcific$tool=toolname[cor_cell_scses_sepcific$tool,"new"]
p_cor_cell_scses_sepcific=ggplot(data = cor_cell_scses_sepcific[which(cor_cell_scses_sepcific$event_type!="SE"),],
       mapping = aes(x = cell_type,y = cor,fill=event_type))+
  geom_boxplot(linewidth=base_line,width=0.7,outlier.shape = NA)+
  # ggtitle("SCSES specific splicing events")+
  scale_fill_manual(values = mycol$event_type)+
  facet_wrap(~tool)+
  xlab('')+
  ylab('SCC')+
  guides(fill=guide_legend(title = "",position = "inside"))+
  basic_theme+
  theme(axis.text.x = element_text(angle = 30,hjust = 1,vjust = 1))

plotdir='/share/lvxuan/Single-Splicing/cell_line/'
ggsave(paste0(plotdir,"/p_cor_cell_scses_sepcific.pdf"),
       p_cor_cell_scses_sepcific, width = 5.77,height = 2.5,units = 'in', dpi = 300)
rmse_cell_scses_sepcific$tool=toolname[rmse_cell_scses_sepcific$tool,"new"]
p_rmse_cell_scses_sepcific=ggplot(data = rmse_cell_scses_sepcific[which(rmse_cell_scses_sepcific$event_type!="SE"),],
                                 mapping = aes(x = cell_type,y = rmse,fill=event_type))+
  geom_boxplot(linewidth=base_line,width=0.7,outlier.shape = NA)+
  # ggtitle("SCSES specific splicing events")+
  scale_fill_manual(values = mycol$event_type)+
  xlab('')+
  ylab('RMSE')+
  facet_wrap(~tool)+
  guides(fill=guide_legend(title = "",position = "inside"))+
  basic_theme+
  theme(axis.text.x = element_text(angle = 30,hjust = 1,vjust = 1))
plotdir='/share/lvxuan/Single-Splicing/cell_line/'
ggsave(paste0(plotdir,"/p_rmse_cell_scses_sepcific.pdf"),
       p_rmse_cell_scses_sepcific, width = 5.77,height = 2.5,units = 'in', dpi = 300)

paper_events=readLines('/disk/lvxuan/Single-Splicing/evaluation/cell_line/paper_events//SE.txt')
scses_paper_events=intersect(paper_events,scses_events)
psi_bulk=psi_ref_list[["scses"]][scses_paper_events,]
psi_bulk=psi_bulk[which(rowVars(as.matrix(psi_bulk),useNames = T)>0),]
scses_paper_events=row.names(psi_bulk)
pheatmap::pheatmap(psi_bulk,show_rownames = F,show_colnames = F,cluster_rows = F,
                   scale = "row",annotation_col = data.frame(cell=annotation_bulk$V2,row.names = annotation_bulk$V1))
psi_scses=psi_test_list[["scses_RC"]][scses_paper_events,]
psi_scses=psi_scses[which(rowSums(is.na(psi_scses))!=ncol(psi_scses)),]
psi_test=psi_test_list[["scses_test"]]
psi_test=psi_test[row.names(psi_scses),]

annotation_row=sapply(row.names(psi_scses),function(x){
  unlist(strsplit(x,"[|]"))[length(unlist(strsplit(x,"[|]")))-1]
})
annotation_row=data.frame(gene=annotation_row,row.names = names(annotation_row))
pheatmap::pheatmap(psi_scses,show_rownames = F,show_colnames = F,
                   scale = "row",annotation_col = data.frame(cell=annotation$V2,row.names = annotation$V1),
                   annotation_row = annotation_row,
                   cluster_rows = F)
pheatmap::pheatmap(psi_bulk[row.names(psi_scses),],show_rownames = F,show_colnames = F,
                   scale = "row",annotation_col = data.frame(cell=annotation_bulk$V2,row.names = annotation_bulk$V1),
                   annotation_row = annotation_row,cluster_rows = F)
pheatmap::pheatmap(psi_test,show_rownames = F,show_colnames = F,
                   scale = "row",annotation_col = data.frame(cell=annotation$V2,row.names = annotation$V1),
                   annotation_row = annotation_row,cluster_rows = F)

pheatmap::pheatmap(psi_bulk[row.names(psi_scses)[grep("CD47",row.names(psi_scses))],],show_rownames = F,show_colnames = F,
                   # scale = "row",
                   annotation_col = data.frame(cell=annotation_bulk$V2,row.names = annotation_bulk$V1),
                   annotation_row = annotation_row,cluster_rows = F)

feature_num=3000
v <- rowVars(as.matrix(psi_test_list[["scses_RC"]]),useNames = F)
id_select <- order(v, decreasing = T)[1:feature_num]
id_select <- row.names(psi_test_list[["scses_RC"]])[id_select]
pca_df=PCA_D_reduct(psi_test_list[["scses_RC"]],id_select)
pca_df=as.data.frame(pca_df)
pca_df$cell=annotation$V2[match(row.names(pca_df),annotation$V1)]
pca_df$psi=as.numeric(psi_scses[grep("VPS24",row.names(psi_scses)),row.names(pca_df)])

umap_df=calcu_umap(psi_test_list[["scses_RC"]],
                   n_neighbors = ncol(psi_test_list[["scses_RC"]])*0.2)
umap_df$cell=annotation$V2[match(row.names(umap_df),annotation$V1)]
umap_df$psi=as.numeric(psi_scses[grep("VPS29",row.names(psi_scses)),row.names(umap_df)])
umap_vps29=ggplot(data = umap_df,mapping = aes(x = V1,y = V2))+
  geom_point(aes(shape=cell,fill=psi),color="black",stroke=0.1,
             size=3)+
  ggtitle("VPS29 exon2")+
  xlab("UMAP1")+
  ylab("UMAP2")+
  scale_fill_paletteer_c("ggthemes::Red-Black-White Diverging",direction = -1)+
  scale_shape_manual(values = 21:24)+
  guides(shape=guide_legend(title = "Cell Type",position = "bottom",nrow = 1,
                            override.aes = list(size=2.5,stroke=base_line)),
         fill=guide_colorbar(title = "PSI",direction = "vertical",position = "inside"),
         theme=theme(legend.key.height = unit(3,"cm")))+
  basic_theme+
  theme(axis.ticks = element_blank(),axis.text = element_blank(),
        axis.text.x = element_blank())

umap_df$psi=as.numeric(psi_scses[grep("CD47",row.names(psi_scses)),row.names(umap_df)])
umap_cd47=ggplot(data = umap_df,mapping = aes(x = V1,y = V2))+
  geom_point(aes(shape=cell,fill=psi),color="black",stroke=0.1,
             size=2)+
  ggtitle("CD47 exon10")+
  xlab("UMAP1")+
  ylab("UMAP2")+
  scale_fill_paletteer_c("ggthemes::Red-Black-White Diverging",direction = -1)+
  scale_shape_manual(values = 21:24)+
  guides(shape=guide_legend(title = "Cell Type",position = "bottom",nrow = 1,
                            override.aes = list(size=2.5,stroke=base_line)),
         fill=guide_colorbar(title = "PSI",direction = "vertical",position = "inside"),
         theme=theme(legend.key.height = unit(3,"cm")))+
  basic_theme+
  theme(axis.ticks = element_blank(),axis.text = element_blank(),
        axis.text.x = element_blank())
plotdir='/share/lvxuan/Single-Splicing/cell_line/'
ggsave(paste0(plotdir,"/umap_cd47.pdf"),
       umap_cd47, width = 3,height = 2.5,units = 'in', dpi = 300)

pca_cd47=ggplot(data = pca_df,mapping = aes(x = PC1,y = PC2))+
  geom_point(aes(shape=cell,fill=psi),color="black",stroke=0.1,
             size=1)+
  ggtitle("CD47 exon10")+
  scale_fill_paletteer_c("ggthemes::Red-Black-White Diverging",direction = -1)+
  scale_shape_manual(values = 21:24)+
  guides(shape=guide_legend(title = "Cell Type",position = "bottom",nrow = 1),
         fill=guide_colorbar(title = "PSI",direction = "horizontal"),
         theme=theme(legend.key.height = unit(3,"cm")))+
  basic_theme+
  theme(axis.ticks = element_blank(),axis.text = element_blank(),
        axis.text.x = element_blank())

df=rbind(data.frame(psi=as.numeric(psi_test[grep("VPS29",row.names(psi_test)),]),
                    cell=annotation$V2[match(colnames(psi_test),annotation$V1)],
                    group="Raw"),
         data.frame(psi=as.numeric(psi_scses[grep("VPS29",row.names(psi_scses)),]),
                    cell=annotation$V2[match(colnames(psi_scses),annotation$V1)],
                    group="SCSES"))
box_vps29=ggplot(data = df[which(df$cell=="HCT116"),])+
  geom_violin(mapping = aes(x = cell,y=psi,fill=group),
              linewidth=base_line)+
  ggtitle("CD47 exon10")+
  scale_fill_manual(values = mycol$compare_raw_impute)+
  ylab("PSI")+
  basic_theme+
  theme(axis.title.x = element_blank(),axis.text.x = element_text(angle = 30,vjust = 1,hjust = 1))
library(gghalves)
violin_vps29=ggplot(data = df,
                   mapping = aes(x = cell,y=psi,fill=group))+
  geom_half_violin(data=df[which(df$group=="Raw"),],
                   position=position_nudge(x=-0.01,y=0),
                   side='l',trim=F,alpha=1,color="black",
                   fill=mycol$compare_raw_impute["Raw"],
                   show.legend = T,adjust=1.2,linewidth=base_line)+
  geom_half_violin(data=df[which(df$group=="SCSES"),],
                   position=position_nudge(x=0.01,y=0),
                   side='R',trim=F,alpha=1,color="black",
                   fill=mycol$compare_raw_impute["SCSES"],
                   show.legend = F,adjust=1.2,linewidth=base_line)+
  ggtitle("VPS29 exon2")+
  scale_y_continuous(breaks = c(0,1))+
  ylab("PSI")+
  basic_theme+
  theme(axis.title.x = element_blank(),
        axis.text.x = element_text(angle = 30,vjust = 1,hjust = 1))

pca_df$psi=as.numeric(psi_scses[grep("NUMB",row.names(psi_scses)),row.names(pca_df)])
pca_numb=ggplot(data = pca_df,mapping = aes(x = PC1,y = PC2))+
  geom_point(aes(shape=cell,fill=psi),color="black",stroke=0.1,
             size=1)+
  ggtitle("NUMB exon12")+
  scale_fill_paletteer_c("ggthemes::Red-Black-White Diverging",direction = -1)+
  scale_shape_manual(values = 21:24)+
  guides(shape=guide_legend(title = "Cell Type",position = "bottom",nrow = 1),
         fill=guide_colorbar(title = "PSI",direction = "horizontal"),
         theme=theme(legend.key.height = unit(3,"cm")))+
  basic_theme+
  theme(axis.ticks = element_blank(),axis.text = element_blank(),
        axis.text.x = element_blank())
umap_df$psi=as.numeric(psi_scses[grep("NUMB",row.names(psi_scses)),row.names(umap_df)])
umap_numb=ggplot(data = umap_df,mapping = aes(x = V1,y = V2))+
  geom_point(aes(shape=cell,fill=psi),color="black",stroke=0.1,
             size=3)+
  ggtitle("NUMB exon12")+
  xlab("UMAP1")+
  ylab("UMAP2")+
  scale_fill_paletteer_c("ggthemes::Red-Black-White Diverging",direction = -1)+
  scale_shape_manual(values = 21:24)+
  guides(shape=guide_legend(title = "Cell Type",position = "bottom",nrow = 1,
                            override.aes = list(size=2.5,stroke=base_line)),
         fill=guide_colorbar(title = "PSI",direction = "vertical",position = "inside"),
         theme=theme(legend.key.height = unit(3,"cm")))+
  basic_theme+
  theme(axis.ticks = element_blank(),axis.text = element_blank(),
        axis.text.x = element_blank())

df=rbind(data.frame(psi=as.numeric(psi_test[grep("NUMB",row.names(psi_test)),]),
                    cell=annotation$V2[match(colnames(psi_test),annotation$V1)],
                    group="Raw"),
         data.frame(psi=as.numeric(psi_scses[grep("NUMB",row.names(psi_scses)),]),
                    cell=annotation$V2[match(colnames(psi_scses),annotation$V1)],
                    group="SCSES"))
violin_numb=ggplot(data = df,
                   mapping = aes(x = cell,y=psi,fill=group))+
  geom_half_violin(data=df[which(df$group=="Raw"),],
                   position=position_nudge(x=-0.01,y=0),
                   side='l',trim=F,alpha=1,color="black",
                   fill=mycol$compare_raw_impute["Raw"],
                   show.legend = T,adjust=1.2,linewidth=base_line)+
  geom_half_violin(data=df[which(df$group=="SCSES"),],
                   position=position_nudge(x=0.01,y=0),
                   side='R',trim=F,alpha=1,color="black",
                   fill=mycol$compare_raw_impute["SCSES"],
                   show.legend = F,adjust=1.2,linewidth=base_line)+
  ggtitle("NUMB exon12")+
  ylab("PSI")+
  basic_theme+
  theme(axis.title.x = element_blank(),axis.text.x = element_text(angle = 30,vjust = 1,hjust = 1))

box_numb=ggplot(data = df)+
  geom_boxplot(mapping = aes(x = cell,y=psi,fill=group),
              linewidth=base_line)+
  ggtitle("NUMB exon12")+
  ylab("PSI")+
  scale_fill_manual(values = mycol$compare_raw_impute)+
  basic_theme+
  theme(axis.title.x = element_blank(),axis.text.x = element_text(angle = 30,vjust = 1,hjust = 1))

p=((umap_cd47|violin_cd47))/(umap_numb|violin_numb)
p=(umap_vps29|umap_numb)
plotdir='/share/lvxuan/Single-Splicing/cell_line/'
ggsave(paste0(plotdir,"/TP_event_cases.pdf"),
       p, width = 4,height = 2.5,units = 'in', dpi = 300)

###################组图###############

p1=p_cor_cell[[2]]+labs(tag = 'A')
p2=p_rmse_event[[2]]+labs(tag = 'B')
p3=p_diffsplice+labs(tag = 'C')
p4=pca_cd47+labs(tag = 'D')
p5=pca_numb+labs(tag = 'E')
p4.5=((p4/p5)+plot_layout(guides = "collect"))&theme(legend.position = "right")
layout <- "
AAA##
BBB##
CCCDD
CCCDD
"
p.final=p1 + p2 + p3 + p4.5+
  plot_layout(design = layout)

ggsave(filename ='figure2.pdf',
       plot = p.final,device = 'pdf',path = paste0(evaluation_path,'/figure/'),
       width = 8.27,height = 12,units = 'in')


###################pseudobulk###############
rc_pseudobulk=read_rc(paste0(work_path_cell_line,'/splicing_value/'))
colnames(rc_pseudobulk)=gsub(bam_suffix_cell_line,"",colnames(rc_pseudobulk))
rc_pseudobulk=lapply(unique(annotation$V2),function(x){
  cell_id=annotation$V1[which(annotation$V2==x)]
  rc_new=rowSums(rc_pseudobulk[,cell_id])
  rc_new=data.frame(rc_new)
  colnames(rc_new)=x
  return(rc_new)
})
rc_pseudobulk=do.call(what = cbind,args = rc_pseudobulk)
event_pseudobulk=read_event(paste0(work_path_cell_line,'/splicing_value/'))
rc_exclusion = array(0, dim=c(nrow(event_pseudobulk), ncol(rc_pseudobulk), 2))
rc_exclusion[, , 1] = as.matrix(rc_pseudobulk[event_pseudobulk$exclusion1,])
rc_exclusion[, , 2] = as.matrix(rc_pseudobulk[event_pseudobulk$exclusion2,])
iso1 = rowMeans(rc_exclusion, dims = 2,na.rm = T)
rc_retention = array(0, dim=c(nrow(event_pseudobulk), ncol(rc_pseudobulk), 2))
rc_retention[, , 1] = as.matrix(rc_pseudobulk[event_pseudobulk$retention1,])
rc_retention[, , 2] = as.matrix(rc_pseudobulk[event_pseudobulk$retention2,])
iso2 = rowMeans(rc_retention, dims = 2,na.rm = T)
psi_pseudobulk = iso2/(iso1+iso2)
psi_pseudobulk = as.data.frame(psi_pseudobulk)
row.names(psi_pseudobulk) = event_pseudobulk$event
colnames(psi_pseudobulk) = colnames(rc_pseudobulk)
psi_pseudobulk[is.na(psi_pseudobulk)]=0

scses_ref=psi_ref_list[["scses"]]
event_id=intersect(row.names(psi_pseudobulk),row.names(scses_ref))
scses_ref=scses_ref[event_id,]
rc_ref <- read_rc(splicing_value_ref_path)
event_ref <- read_event(splicing_value_ref_path)
event_ref <- event_ref[match(row.names(scses_ref),event_ref$event),]
rc_ex_ref=calcu_ex_rc(rc_ref,event_ref)
rc_in_ref=calcu_in_rc(rc_ref,event_ref)
colnames(rc_ex_ref)<-gsub(bam_suffix,"",colnames(rc_ex_ref))
colnames(rc_in_ref)<-gsub(bam_suffix,"",colnames(rc_in_ref))
psi_pseudobulk=psi_pseudobulk[event_id,]

p_cell_pseudobulk = lapply(1:ncol(psi_pseudobulk), function(x) {
  cell_id=colnames(psi_pseudobulk)[x]
  cell_id_bulk=annotation_bulk[which(annotation_bulk$V2==cell_id),1]
  idx=which(as.numeric(rc_ex_ref[,cell_id_bulk])>20|as.numeric(rc_in_ref[,cell_id_bulk])>20)
  psi1=psi_pseudobulk[idx,x]
  psi2=scses_ref[idx,cell_id_bulk]
  cor_res = cor.test(as.numeric(psi1), as.numeric(psi2), method = "spearman")
  c = cor_res$estimate
  p = cor_res$p.value
  rmse = sqrt(mean((as.numeric(psi1) - as.numeric(psi2))^2))
  df=data.frame(bulk=psi2,pseudobulk=psi1)
  p=ggplot(data = df,mapping = aes(x=pseudobulk,y=bulk))+
    geom_point(size=0.1,color="#C3C3C3")+
    # geom_pointdensity(adjust=3)+
    geom_smooth(method = "lm",color='red',linewidth=base_line)+
    xlab("pseudobulk PSI")+
    ylab("bulk PSI")+
    stat_cor(method = "spearman",
             label.x = 0.05, label.y = 0.9,color='red')+
    ggtitle(cell_id)+
    basic_theme
  return(p)
})
p=ggarrange(plotlist = p_cell_pseudobulk,ncol = 4,nrow = 1)
plotdir='/share/lvxuan/Single-Splicing/cell_line/'
ggsave(paste0(plotdir,"/p_psi_cor_pseudobulk.pdf"),
       p, width = 8.27,height = 2.5,units = 'in', dpi = 300)

cell_types=colnames(psi_pseudobulk)
compare<-combn(1:length(cell_types),2)
p_dpsi_pseudobulk<-apply(compare, 2, function(x){
  id_cell1<-annotation_bulk[which(annotation_bulk$V2==cell_types[x[1]]),1]
  id_cell2<-annotation_bulk[which(annotation_bulk$V2==cell_types[x[2]]),1]
  idx_cell1=which(as.numeric(rc_ex_ref[,id_cell1])>20|as.numeric(rc_in_ref[,id_cell1])>20)
  idx_cell2=which(as.numeric(rc_ex_ref[,id_cell2])>20|as.numeric(rc_in_ref[,id_cell2])>20)
  event_inst=Reduce(intersect,list(row.names(rc_ex_ref)[idx_cell1],row.names(rc_ex_ref)[idx_cell2]))
  
  cell1_psi_ref=scses_ref[event_inst,id_cell1]
  cell2_psi_ref=scses_ref[event_inst,id_cell2]
  dpsi_ref=cell1_psi_ref-cell2_psi_ref
  event_inst2=which(abs(dpsi_ref)>0.2)
  
  cell1_psi_test=psi_pseudobulk[event_inst,cell_types[x[1]]]
  cell2_psi_test=psi_pseudobulk[event_inst,cell_types[x[2]]]
  dpsi_pseudobulk=cell1_psi_test-cell2_psi_test
  cor_res = cor.test(dpsi_ref[event_inst2], dpsi_pseudobulk[event_inst2], method = "spearman")
  c = cor_res$estimate
  p = cor_res$p.value
  print(c)
  df=data.frame(bulk=dpsi_ref[event_inst2],pseudobulk=dpsi_pseudobulk[event_inst2])
  p=ggplot(data = df,mapping = aes(x=pseudobulk,y=bulk))+
    geom_point(size=0.5)+
    stat_cor(method = "spearman",
             label.x = 0.05, label.y = 0.9,color='red')+
    
    ggtitle(paste0(cell_types[x[1]],"_",cell_types[x[2]]))+
    basic_theme
  return(p)
})
ggarrange(plotlist = p_dpsi_pseudobulk,ncol = 3,nrow = 2)

tools=c("rmats","brie_mode1","psix5","outrigger","scses_test")
tools_event_num=lapply(tools, function(t){
  data=psi_test_list[[t]]
  event_id=row.names(data)
  event_type=lapply(event_id,function(x){
    unlist(strsplit(x,'[|]'))[length(unlist(strsplit(x,'[|]')))]
  })
  tb=table(unlist(event_type))
  return(data.frame(SE=tb["SE"],A3SS=tb["A3SS"],A5SS=tb["A5SS"],
                    MXE=tb["MXE"],RI=tb["RI"]))
})
tools_event_num=do.call(what = rbind,args = tools_event_num)
tools_event_num$tool=c("rMats","BRIE","Psix","Expedition","SCSES")
tools_event_num=melt(tools_event_num,id.vars = "tool")
tools_event_num$label=ifelse(is.na(tools_event_num$value),"-",tools_event_num$value)

library(ggVennDiagram)
x=list(rMats=row.names(psi_test_list[[1]]),
      BRIE=row.names(psi_test_list[[2]]),
      Expedition=row.names(psi_test_list[[10]]),
      Psix=row.names(psi_test_list[[5]]),
      SCSES=row.names(psi_test_list[[11]]))

p_event_venn=ggVennDiagram(x, size=1,lty="longdash",color="gray60",
                           label="count",label_size = base_size*5/14,
              label_alpha = 0,set_size=base_size*5/14,edge_lty = 1,
              edge_size = base_line,
              # set_color=mycol$method[c("rMats","BRIE","Psix","Expedition","SCSES")]
              ) + 
  scale_fill_gradient2(low = muted("#f2f9fe"),mid = "#a2cbe3",
                       high = muted("#1b71b4"),na.value = "white",
                       midpoint = 0) +
  # ggtitle("The intersection of splicing events")+
  basic_theme +
  theme(axis.text.x = element_blank(),
        axis.text.y = element_blank(),
        axis.title.x = element_blank(),
        axis.title.y = element_blank(),
        axis.line = element_blank(),
        axis.ticks = element_blank(),legend.position = "none")
plotdir='/share/lvxuan/Single-Splicing/cell_line/'
ggsave(paste0(plotdir,"/p_event_venn.pdf"),
       p_event_venn, width = 2.5,height = 2.5,units = 'in', dpi = 300)

p_event_num=ggplot(tools_event_num, aes(variable, tool)) +
  geom_tile(aes(fill = value),colour = "black",linewidth=base_line)+
  scale_fill_gradient2(low = muted("#f2f9fe"),mid = "#a2cbe3",
                       high = muted("#1b71b4"),na.value = "white",
                       midpoint = 6000) +
  geom_text(aes(label = label), size = base_size*5/14, colour = "white")+
  ggtitle("The number of splicing events")+
  basic_theme+
  theme(legend.position = "none",axis.line = element_blank(),
        axis.ticks = element_blank(),axis.title = element_blank())


p1=(p_cell_pseudobulk[[1]]|p_cell_pseudobulk[[2]])/(p_cell_pseudobulk[[3]]|p_cell_pseudobulk[[4]])+labs(tag = 'A')
p2=p_event_num+labs(tag = 'B')
p3=p_event_venn+labs(tag = 'C')
p4=p_cor_cell[[1]]+labs(tag = 'D')
p5=p_cor_cell[[3]]+labs(tag = 'E')
p6=p_cor_cell[[4]]+labs(tag = 'F')
p7=p_rmse_event[[1]]+labs(tag = 'G')
p8=p_rmse_event[[3]]+labs(tag = 'H')
p9=p_rmse_event[[4]]+labs(tag = 'I')

p.final.sup1=p1/((p2|p3)+plot_layout(width = c(1,1)))/p4/p5/p6/p7/p8/p9
ggsave(filename ='figure2_sup1.pdf',
       plot = p.final.sup1,device = 'pdf',path = paste0(evaluation_path,'/figure/'),
       width = 8.27,height = 20,units = 'in')

p1=p_cor_cell_scses_sepcific+labs(tag = 'A')
p2=p_rmse_cell_scses_sepcific+labs(tag = 'B')
p3=box_cd47+labs(tag = 'C')
p4=box_numb+labs(tag = 'D')
p.final.sup2=((p1|p2)/(p3|p4)/plot_spacer())+plot_layout(heights = c(1,1,1))
ggsave(filename ='figure2_sup2.pdf',
       plot = p.final.sup2,device = 'pdf',path = paste0(evaluation_path,'/figure/'),
       width = 8.27,height = 10,units = 'in')

###################IGV###############
library(Gviz)
library(GenomicRanges)
library(biomaRt)
bm <- useEnsembl(host = "https://grch37.ensembl.org", 
                 biomart = "ENSEMBL_MART_ENSEMBL",
                 dataset = "hsapiens_gene_ensembl")
bam_path=paras_cell_line_bulk$Basic$bam_path
select_e=c(row.names(psi_scses)[grep("CD47",row.names(psi_scses))],
           row.names(psi_scses)[grep("NUMB",row.names(psi_scses))])
for (e in select_e) {
  print(e)
  e=unlist(strsplit(e,"[|]"))
  gene_name=e[length(e)-1]
  iso1= gsub(pattern = "isoform[0-9]=", replacement = "", x = e[1])
  iso1 = unlist(strsplit(x = iso1, split = "@"))
  chr=unlist(strsplit(iso1,":"))[2]
  s=unlist(strsplit(iso1,":"))[4]
  pos=lapply(iso1,function(x){
    tmp=unlist(strsplit(x,":"))[3]
    unlist(strsplit(tmp,"-"))
  })
  pos=unlist(pos)
  pos=sort(as.numeric(pos))
  Track_HCT116 <- AlignmentsTrack(
    paste0(bam_path,'/SRR8615282.bam'),fill.coverage=mycol$cell_line["HCT116"],
    background.title="white",col.title="black",col.axis="black",
    fontsize=10,isPaired = TRUE,chromosome = chr,name = 'HCT116',
    stacking = "dense")
  Track_HepG2 <- AlignmentsTrack(
    paste0(bam_path,'/SRR8616129.bam'),fill.coverage=mycol$cell_line["HepG2"],
    background.title="white",col.title="black",col.axis="black",
    fontsize=10,isPaired = TRUE,chromosome = chr,name = 'HepG2',
    stacking = "dense")
  Track_HL <- AlignmentsTrack(
    paste0(bam_path,'/SRR8616133.bam'),fill.coverage=mycol$cell_line["HL-60"],
    background.title="white",col.title="black",col.axis="black",
    fontsize=10,isPaired = TRUE,chromosome = chr,name = 'HL-60',
    stacking = "dense")
  Track_HCC1954 <- AlignmentsTrack(
    paste0(bam_path,'/SRR8616174.bam'),fill.coverage=mycol$cell_line["HCC1954"],
    background.title="white",col.title="black",col.axis="black",
    fontsize=10,isPaired = TRUE,chromosome = chr,name = 'HCC1954',
    stacking = "dense")
  afrom <- min(pos)
  ato <- max(pos)
  bmt <- BiomartGeneRegionTrack(genome = "hg19", chromosome = chr,name = gene_name,
                                start = afrom - 50, end = ato + 50,
                                background.title="white",col.title="black",col.axis="black",
                                fontsize=10,cex.title=1,
                                filter = list(with_refseq_mrna = TRUE),
                                stacking = "dense",biomart = bm,protein_coding="#7B7B7B",
                                utr3="#7B7B7B",utr5="#7B7B7B")
  pdf(paste0(evaluation_path,"/",gene_name,"_igv.pdf"),
      width = 4,height =  2.5)
  plotTracks(c(Track_HCT116,Track_HepG2,Track_HL,Track_HCC1954,bmt), 
             from = afrom - 50, to = ato + 50, 
             chromosome = chr,type = "coverage",
             coverageHeight = 10,
             sizes = c(rep(1,4),0.5))
  dev.off()
}

###################IGV END###############

# 5. K562 RBP -------------------------------------------------------------
#* 5.1 encode event id transfer----
load('/disk/lvxuan/Single-Splicing/evaluation/cell_line/encode/rbp_event_deal_all_total.RData')
event_type=read.table('/disk/lvxuan/Single-Splicing/evaluation/cell_line/encode/encode_id_type.txt')
event_type_se=event_type[which(event_type$V2=="SE"),]
id_scses=lapply(event_type_se$V1, function(x){
  xx=unlist(strsplit(x,"_"))
  if(length(xx)==10){
    geneSymbol=xx[2]
    chr=xx[3]
    strand=xx[4]
    pos=sort(unique(as.numeric(xx[5:10])))
    exon1 <- paste0(pos[1] + 1, "-", pos[2])
    exon2 <- paste0(pos[3] + 1, "-", pos[4])
    exon3 <- paste0(pos[5] + 1, "-", pos[6])
    iso1 <- paste0(pos[2] + 1, "-", pos[5])
    iso2_1 <- paste0(pos[2] + 1, "-", pos[3])
    iso2_2 <- paste0(pos[4] + 1, "-", pos[5])
    iso1_id <- paste0("isoform1=exon:", chr, ":", exon1, ":", strand, "@junction:", chr, ":", iso1, ":", strand, "@exon:", chr, ":", exon3, ":", strand)
    iso2_id <- paste0("isoform2=junction:", chr, ":", iso2_1, ":", strand, "@exon:", chr, ":", exon2, ":", strand, "@junction:", chr, ":", iso2_2, ":", strand)
    event_id <- paste(iso1_id, iso2_id, sep = "|")
    event_id <- paste(event_id, geneSymbol, "SE", sep = "|")
    return(data.frame(ID=x,id_scses=event_id))
  }else{
    return(NULL)
  }
})
id_scses=id_scses[!sapply(id_scses,is.null)]
id_scses=do.call(what = rbind,args = id_scses)
rbp_event_deal_se=merge(rbp_event_deal_all_total,id_scses)
rbp_event_deal_se=rbp_event_deal_se[which(!is.na(rbp_event_deal_se$id_scses)),]
rbp_event_deal_se$regulate<-ifelse(rbp_event_deal_se$score>0.8,"yes","no")
rbp_event_deal_se$tool<-"ENCODE"
rbp_event_deal_se$id=paste(rbp_event_deal_se$id_scses,rbp_event_deal_se$RBP,sep = "_")

#* 5.2 K562 event id transfer----
psi_k562_list=list()
work_path_k562="/disk/lvxuan/Single-Splicing/result/cell_line/K562/"
bam_suffix_cell_line=".bam"
paras_cell_line=fromJSON('/disk/lvxuan/Single-Splicing/configure/K562.json')

# 1.2.1 scses
print(paste("[",Sys.time(),'] ',"scses"))
psi_scses_test=read_psi(paste0(work_path_k562,'/splicing_value/'))
colnames(psi_scses_test)<-gsub(".bam","",colnames(psi_scses_test))
psi_k562_list[["scses_test"]]=psi_scses_test
scses_impute_file=list.files(paste0(work_path_k562,'/imputation/'),pattern = "*_combined_Dreduct*")
load(paste0(work_path_k562,'/imputation/',scses_impute_file))
for (x in names(psi_imputed_final)){
  data=as.data.frame(psi_imputed_final[[x]])
  colnames(data)<-gsub(bam_suffix_cell_line,"",colnames(data))
  psi_k562_list=c(psi_k562_list,list(data))
  names(psi_k562_list)[length(psi_k562_list)]=paste0("scses_",x)
}
# 1.2.2 rmats
print(paste("[",Sys.time(),'] ',"rmats"))
e_rmats_path=paste0(work_path_k562,'/rMats/output/')
psi_rmats_new<-id_tr3_rmats(e_path = e_rmats_path,remove.chr = F)
colnames(psi_rmats_new)<-gsub(bam_suffix_cell_line,"",colnames(psi_rmats_new))
psi_rmats_new[is.na(psi_rmats_new)]=0
psi_k562_list[["rmats"]]=psi_rmats_new
# 1.2.3 brie
print(paste("[",Sys.time(),'] ',"brie"))
brie_anno_path <- paras_cell_line$Task$BRIE2$brie_ref
brie_id_path <- paste0(dirname(brie_anno_path), "/SE_events_scses_id.txt")
e_brie_path <- paste0(work_path_k562, "/BRIE2/psi_BRIE2_mode1.txt")
psi_brie_mode1_new <- id_tr_brie2(e_brie_path, brie_id_path)
psi_k562_list[["brie_mode1"]]=psi_brie_mode1_new
e_brie_path <- paste0(work_path_k562, "/BRIE2/psi_BRIE2_mode2_aggr.txt")
psi_brie_mode2_aggr <- id_tr_brie2(e_brie_path, brie_id_path)
psi_k562_list[["brie_mode2_aggr"]]=psi_brie_mode2_aggr

# 1.2.4 psix
print(paste("[",Sys.time(),'] ',"psix"))
psix_anno_path <- paras_cell_line$Task$psix$anno_path
psix_id_path <- paste0(dirname(psix_anno_path), "/SE_events_scses_id.txt")
e_psix_path <- paste0(work_path_k562, "/psix/psix_object/")
psi_psix_list_new <- id_tr_psix(e_psix_path, psix_id_path)
for (x in names(psi_psix_list_new)) {
  psi_psix_list_new[[x]][is.na(psi_psix_list_new[[x]])]=0
  psi_k562_list=c(psi_k562_list,list(psi_psix_list_new[[x]]))
  names(psi_k562_list)[length(psi_k562_list)]=paste0("psix",x)
}

# 1.1.5 outrigger
e_outrigger_path <- paste0(work_path_k562, "/outrigger/outrigger_psi.csv")
psi_outrigger_new <- read.csv(e_outrigger_path,header = T,row.names = 1)
psi_outrigger_new <- id_tr_outrigger(e_outrigger_path,gtf = paras_cell_line$Task$outrigger$gtf_path)
colnames(psi_outrigger_new)<-gsub(bam_suffix_cell_line,"",colnames(psi_outrigger_new))
psi_outrigger_new[is.na(psi_outrigger_new)]=0
psi_k562_list[["outrigger"]]=psi_outrigger_new
save(psi_k562_list, file = paste0(work_path_k562, "/psi_k562_list.rdata"))

#* 5.3 K562 single cell RBP-events----
paras=fromJSON('/disk/lvxuan/Single-Splicing/configure/K562.json')
splicing_value_path='/disk/lvxuan/Single-Splicing/result/cell_line/K562/splicing_value/'
work_path = paras$Basic$work_path
data_source=paras$DataSet
minevent_count <- paras$Basic$filter_events_sc$minevent_count
mincell_num <- paras$Basic$filter_events_sc$mincell_num
cutoff_expr=paras$Basic$filter_events_sc$expr_0_percent
cutoff_psi=paras$Basic$filter_events_sc$psi_0_or_1_percent
cutoff_cell_count_sum=paras$Basic$filter_events_sc$expr_sum
cutoff_cell_gene_sum=paras$Basic$filter_events_sc$gene_sum
cutoff_cell_MT_gene=paras$Basic$filter_events_sc$MT_gene_pct
filter_mt_gene <- paras$Basic$filter_events_sc$filter_mt_gene
filter_rp_gene <- paras$Basic$filter_events_sc$filter_rp_gene
data_list=data_preprocess(psi_path=splicing_value_path,
                          rc_path=splicing_value_path,
                          expr_path=paste0(work_path,"/expr/"),
                          data_source=data_source,
                          mincell_num=mincell_num,
                          minevent_count = minevent_count,
                          cutoff_expr=cutoff_expr,
                          cutoff_psi=cutoff_psi,
                          cutoff_cell_count_sum=cutoff_cell_count_sum,
                          cutoff_cell_gene_sum=cutoff_cell_gene_sum,
                          cutoff_cell_MT_gene=cutoff_cell_MT_gene,
                          filter_mt_gene = filter_mt_gene,
                          filter_rp_gene = filter_rp_gene
)
expr=data_list$expr
expr_tpm=data_list$expr_tpm
rc=data_list$rc
psi=data_list$psi
event=data_list$event
rm(data_list)
expr_tpm_rbp=expr_tpm[intersect(unique(rbp_event_deal_se$RBP),row.names(expr_tpm)),]
colnames(expr_tpm_rbp)=gsub(".bam","",colnames(expr_tpm_rbp))

cor_test_all=lapply(names(psi_k562_list), function(tool){
  psi_test=psi_k562_list[[tool]]
  psi_test=psi_test[intersect(row.names(psi_test),rbp_event_deal_se$id_scses),colnames(expr_tpm_rbp)]
  cor_test_res<-cor_spearman(psi_test,expr_tpm_rbp,method = "spearman")
  cor_test_res$padj<-p.adjust(cor_test_res$p,method = "fdr")
  cor_test_res$regulate<-ifelse(cor_test_res$p<0.05
                                    &abs(cor_test_res$cor)>0.5,"yes","no")
  cor_test_res$tool<-tool
  return(cor_test_res)
})
cor_test_all=do.call(what = rbind,args = cor_test_all)
cor_test_all$id=paste(cor_test_all$row,cor_test_all$col,sep = "_")
true_label<-data.frame(id=rbp_event_deal_se$id,
                       regulate=ifelse(rbp_event_deal_se$score > 0.6,1,0))
rbp_res=lapply(names(psi_k562_list), function(tool){
  tmp=cor_test_all[which(cor_test_all$tool==tool),c("cor","p","padj","id")]
  tmp$regulate=true_label$regulate[match(tmp$id,true_label$id)]
  tmp=rbind(tmp,data.frame(cor=NA,p=NA,padj=NA,
                           id=true_label$id[-which(true_label$id%in%tmp$id)],
                           regulate=true_label$regulate[-which(true_label$id%in%tmp$id)]))
  tmp$predict=ifelse(is.na(tmp$cor),-1,
                    ifelse(tmp$p<0.05
                           &abs(tmp$cor)>0.3,1,0))
  rocobj <- roc(response=as.numeric(tmp$regulate[which(tmp$predict!=(-1))]), 
                predictor=abs(tmp$cor[which(tmp$predict!=(-1))]),
                direction="<")
  auc<-auc(rocobj)[1]
  auc
  return(data.frame(auc=auc,tool=tool))
})
rbp_res=do.call(what = rbind,args = rbp_res)




# 6.RBP -------------------------------------------------------------
paras=fromJSON('/disk/lvxuan/Single-Splicing/configure/cell_line.json')
splicing_value_path='/disk/lvxuan/Single-Splicing/result/cell_line/combine/splicing_value/'
work_path = paras$Basic$work_path
data_source=paras$DataSet
minevent_count <- paras$Basic$filter_events_sc$minevent_count
mincell_num <- paras$Basic$filter_events_sc$mincell_num
cutoff_expr=paras$Basic$filter_events_sc$expr_0_percent
cutoff_psi=paras$Basic$filter_events_sc$psi_0_or_1_percent
cutoff_cell_count_sum=paras$Basic$filter_events_sc$expr_sum
cutoff_cell_gene_sum=paras$Basic$filter_events_sc$gene_sum
cutoff_cell_MT_gene=paras$Basic$filter_events_sc$MT_gene_pct
filter_mt_gene <- paras$Basic$filter_events_sc$filter_mt_gene
filter_rp_gene <- paras$Basic$filter_events_sc$filter_rp_gene
data_list=data_preprocess(psi_path=splicing_value_path,
                          rc_path=splicing_value_path,
                          expr_path=paste0(work_path,"/expr/"),
                          data_source=data_source,
                          mincell_num=mincell_num,
                          minevent_count = minevent_count,
                          cutoff_expr=cutoff_expr,
                          cutoff_psi=cutoff_psi,
                          cutoff_cell_count_sum=cutoff_cell_count_sum,
                          cutoff_cell_gene_sum=cutoff_cell_gene_sum,
                          cutoff_cell_MT_gene=cutoff_cell_MT_gene,
                          filter_mt_gene = filter_mt_gene,
                          filter_rp_gene = filter_rp_gene
)
expr=data_list$expr
expr_tpm=data_list$expr_tpm
rc=data_list$rc
psi=data_list$psi
event=data_list$event
rm(data_list)
expr_tpm_rbp=expr_tpm[intersect(unique(rbp_event_deal_se$RBP),row.names(expr_tpm)),]
colnames(expr_tpm_rbp)=gsub(".bam","",colnames(expr_tpm_rbp))

cor_test_all=lapply(names(psi_test_list), function(tool){
  psi_test=psi_test_list[[tool]]
  psi_test=psi_test[intersect(row.names(psi_test),rbp_event_deal_se$id_scses),colnames(expr_tpm_rbp)]
  cor_test_res<-cor_spearman(psi_test,expr_tpm_rbp,method = "spearman")
  cor_test_res$padj<-p.adjust(cor_test_res$p,method = "fdr")
  cor_test_res$regulate<-ifelse(cor_test_res$padj<0.05
                                &abs(cor_test_res$cor)>0.5,"yes","no")
  cor_test_res$tool<-tool
  return(cor_test_res)
})
cor_test_all=do.call(what = rbind,args = cor_test_all)
cor_test_all$id=paste(cor_test_all$row,cor_test_all$col,sep = "_")
true_label<-data.frame(id=rbp_event_deal_se$id,
                       regulate=ifelse(rbp_event_deal_se$score > 0.6,1,0))
rbp_res=lapply(names(psi_test_list), function(tool){
  tmp=cor_test_all[which(cor_test_all$tool==tool),c("cor","p","padj","id")]
  tmp$regulate=true_label$regulate[match(tmp$id,true_label$id)]
  tmp=rbind(tmp,data.frame(cor=NA,p=NA,padj=NA,
                           id=true_label$id[-which(true_label$id%in%tmp$id)],
                           regulate=true_label$regulate[-which(true_label$id%in%tmp$id)]))
  
  tmp$predict=ifelse(is.na(tmp$cor),-1,
                     ifelse(tmp$padj<0.05
                            &abs(tmp$cor)>0.4,1,0))
  table(tmp$regulate,tmp$predict)
  rocobj <- roc(response=as.numeric(tmp$regulate[which(tmp$predict!=(-1))]), 
                predictor=abs(tmp$padj[which(tmp$predict!=(-1))]),
                direction=">")
  auc<-auc(rocobj)[1]
  auc
  return(data.frame(auc=auc,tool=tool))
})
rbp_res=do.call(what = rbind,args = rbp_res)
